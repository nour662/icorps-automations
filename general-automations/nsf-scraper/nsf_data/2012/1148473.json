{
 "awd_id": "1148473",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SI2-SSE: Fingerprinting Scientific Codes to Verify and Create Compatible System Software Environments",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Rajiv Ramnath",
 "awd_eff_date": "2012-04-01",
 "awd_exp_date": "2017-03-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2012-04-11",
 "awd_max_amd_letter_date": "2012-04-11",
 "awd_abstract_narration": "Every computational science application requires supporting software (code libraries, data files, other programs) to run properly. However, the computer systems that complex scientific applications run on are continuously updated by administrators to add new capabilities, fix bugs, and plug security holes. These are necessary changes, but a user needs to know if \"something changed in the system that will break his/her code\". A similar question arises when running a code on a different computer from which it was compiled or developed: \"does the new system have all the necessary support software to run my applications?\" This proposal describes a plan for developing the software capability to both statically and dynamically \"fingerprint\" a scientific application to answer those two questions and therefore test for compatibility of new system or determine if a new update could have deleterious effects. Our proposed software system will have five major components: fingerprint format, static analysis of an application to create one type of fingerprint, a system verifier that checks if a system satisfies the needs defined in a fingerprint, dynamic analysis to find applications dependencies only detectable at run time, and a composer capability to automatically define a Rocks cluster managed system that will fulfill the requirements of a specific fingerprint. All software developed will be open-source and freely available.\r\n\r\nNearly every person who uses a computer has seen messages similar to \"new updates have been installed, you must restart your computer.\" Sometimes, applications break because of these updates. This proposal's broader impact is that, for a wide variety of scientific applications, we will be able to determine if a new system or an existing system is compatible by verifying the code's fingerprint. Since, scientific applications can be very sensitive to underlying software changes, it will be possible to detect incompatibility before wasting time and energy to run a large-scale application on an production systems. When these applications are used as the basis of scientific discovery, it becomes even more imperative that we view the computing environment and application together as an experimental apparatus whose configuration we need to better understand. We believe that the composer capability of this proposal can have the transformational impact by developing fully- descriptive catalogs of what an application needs to function properly. In the era in which simulation output is being used to drive policy, this kind of scientific reproducibility has impact well beyond the notions of academic completeness.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Philip",
   "pi_last_name": "Papadopoulos",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Philip M Papadopoulos",
   "pi_email_addr": "ppapadopoulos@ucsd.edu",
   "nsf_id": "000462781",
   "pi_start_date": "2012-04-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-San Diego",
  "inst_street_address": "9500 GILMAN DR",
  "inst_street_address_2": "",
  "inst_city_name": "LA JOLLA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8585344896",
  "inst_zip_code": "920930021",
  "inst_country_name": "United States",
  "cong_dist_code": "50",
  "st_cong_dist_code": "CA50",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SAN DIEGO",
  "org_prnt_uei_num": "",
  "org_uei_num": "UYTTZT6G9DT1"
 },
 "perf_inst": {
  "perf_inst_name": "The Regents of tne University of California, UC San Diego",
  "perf_str_addr": "9500 Gilman Drive MC0505",
  "perf_city_name": "La Jolla",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "920930505",
  "perf_ctry_code": "US",
  "perf_cong_dist": "50",
  "perf_st_cong_dist": "CA50",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  },
  {
   "pgm_ref_code": "8005",
   "pgm_ref_txt": "Scientific Software Elements"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Nearly every application that executes on a modern operating system (OS) like Linux, Windows, and MacOS is built upon a layered set of software that forms a foundation for the application.&nbsp; For example, a code that performs gene sequence assembly may be dependent on other software that knows how to read compressed data files in a specific format, which in turn is dependent on the base operating system that knows how to open files on the local disk drive. &nbsp;&nbsp;This recursive chain is both natural and normal. When an application begins execution, dependencies are loaded as required. If any of the requirements are missing, the application fails.&nbsp;&nbsp; Scientific software applications often have dependencies that number into the hundreds. &nbsp;&nbsp;&nbsp;Fingerprint is tool that was developed in this project to &ldquo;write&rdquo; down exactly what an application needs by following it as it runs and then store the observation in a small file called a <em>swirl</em> (named after the swirls of a human fingerprint) .&nbsp; This tracking is performed on an <em>unmodified</em> executable for the widest possible applicability.</p>\n<p>The dependencies can include other software and data files. When possible, fingerprint will group dependencies into their system software packages. &nbsp;Once an application has been fingerprinted, the swirl file has enough information to answer questions like: Is this application compatible with a new system? Has the current system software changed to now be incompatible? &nbsp;&nbsp;Fingerprint itself is written in backwards-compatible version of Python for maximal portability and is known to work on RedHat, CentOS, Debian, Ubuntu, OracleLinux, and SuSE Linux. An application&rsquo;s fingerprint can fundamentally be used as a component of reproducibility in computational science because it can track the components and versions that a binary application requires. &nbsp;It is perhaps simplest view a swirl (fingerprint) as list of ingredients needed to run an application. The fingerprint checker can verify that all ingredients are present and unchanged before an application is run. This check can prevent errors are reduce wasted computing time and energy.</p>\n<p>While tracking and interrogation are fundamentally useful, tools were also developed that can encapsulate an application and all if its discovered dependencies for execution on another system.&nbsp; Over the lifetime of this project different virtualization techniques could be applied and fingerprint support two major modes.&nbsp; In that vein, tools have been developed that will take an application and its swirl on a source machine and build either a Docker image (container-based virtualization) &nbsp;or virtual machine (full virtualization) to execute the application on a &ldquo;foreign&rdquo; system. &nbsp;The project demonstrated this with both serial and message-passing-based (MPI) parallel applications, an area of particular concern in high-performance computing.</p>\n<p>Fingerprint has been applied to a number of scientific applications including: &nbsp;gene-sequence assembly, computational chemistry and scientific visualization. It has proven quite useful in systems development and debugging when regular software updates have had the undesirable effect of fundamentally breaking compatibility with existing applications. Those updates could easily be identified for fingerprinted. applications. These affected binaries could then be recompiled (possibly requiring recoding at the source) so that they could operate within the new system software.</p>\n<p>Fingerprint has been instrumental in extending the understanding of how applications are intertwined with operating systems. Even seemingly simple applications (like listing files in directory) can have dozens of library dependencies. The application with the observed furthest reaching dependency chain was a visualization package called Visit.&nbsp; Fingerprint identified more than 300 software packages that Visit needed to properly function.</p>\n<p>The fingerprint system is open source and available on GitHub for free use at <a href=\"https://github.com/rocksclusters/FingerPrint\">https://github.com/rocksclusters/FingerPrint</a>.&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/01/2017<br>\n\t\t\t\t\tModified by: Philip&nbsp;M&nbsp;Papadopoulos</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nNearly every application that executes on a modern operating system (OS) like Linux, Windows, and MacOS is built upon a layered set of software that forms a foundation for the application.  For example, a code that performs gene sequence assembly may be dependent on other software that knows how to read compressed data files in a specific format, which in turn is dependent on the base operating system that knows how to open files on the local disk drive.   This recursive chain is both natural and normal. When an application begins execution, dependencies are loaded as required. If any of the requirements are missing, the application fails.   Scientific software applications often have dependencies that number into the hundreds.    Fingerprint is tool that was developed in this project to \"write\" down exactly what an application needs by following it as it runs and then store the observation in a small file called a swirl (named after the swirls of a human fingerprint) .  This tracking is performed on an unmodified executable for the widest possible applicability.\n\nThe dependencies can include other software and data files. When possible, fingerprint will group dependencies into their system software packages.  Once an application has been fingerprinted, the swirl file has enough information to answer questions like: Is this application compatible with a new system? Has the current system software changed to now be incompatible?   Fingerprint itself is written in backwards-compatible version of Python for maximal portability and is known to work on RedHat, CentOS, Debian, Ubuntu, OracleLinux, and SuSE Linux. An application?s fingerprint can fundamentally be used as a component of reproducibility in computational science because it can track the components and versions that a binary application requires.  It is perhaps simplest view a swirl (fingerprint) as list of ingredients needed to run an application. The fingerprint checker can verify that all ingredients are present and unchanged before an application is run. This check can prevent errors are reduce wasted computing time and energy.\n\nWhile tracking and interrogation are fundamentally useful, tools were also developed that can encapsulate an application and all if its discovered dependencies for execution on another system.  Over the lifetime of this project different virtualization techniques could be applied and fingerprint support two major modes.  In that vein, tools have been developed that will take an application and its swirl on a source machine and build either a Docker image (container-based virtualization)  or virtual machine (full virtualization) to execute the application on a \"foreign\" system.  The project demonstrated this with both serial and message-passing-based (MPI) parallel applications, an area of particular concern in high-performance computing.\n\nFingerprint has been applied to a number of scientific applications including:  gene-sequence assembly, computational chemistry and scientific visualization. It has proven quite useful in systems development and debugging when regular software updates have had the undesirable effect of fundamentally breaking compatibility with existing applications. Those updates could easily be identified for fingerprinted. applications. These affected binaries could then be recompiled (possibly requiring recoding at the source) so that they could operate within the new system software.\n\nFingerprint has been instrumental in extending the understanding of how applications are intertwined with operating systems. Even seemingly simple applications (like listing files in directory) can have dozens of library dependencies. The application with the observed furthest reaching dependency chain was a visualization package called Visit.  Fingerprint identified more than 300 software packages that Visit needed to properly function.\n\nThe fingerprint system is open source and available on GitHub for free use at https://github.com/rocksclusters/FingerPrint. \n\n \n\n\t\t\t\t\tLast Modified: 08/01/2017\n\n\t\t\t\t\tSubmitted by: Philip M Papadopoulos"
 }
}