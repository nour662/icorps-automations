{
 "awd_id": "1217929",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "HCC: Small: New Infrastructure Concepts for Robust Handling of Inputs with Uncertainty",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Ephraim Glinert",
 "awd_eff_date": "2012-08-15",
 "awd_exp_date": "2016-07-31",
 "tot_intn_awd_amt": 499919.0,
 "awd_amount": 535119.0,
 "awd_min_amd_letter_date": "2012-08-14",
 "awd_max_amd_letter_date": "2015-04-07",
 "awd_abstract_narration": "The conventional software currently used to handle input in nearly all modern graphical user interfaces (GUIs) is effective and highly evolved.  This has the advantages of promoting reuse rather than reinvention of interaction techniques, and making it easy to create GUis, even for those with limited programming ability.  However, these successful software abstractions assume the inputs reported to the system accurately reflect the actions of the user - that input is certain rather than uncertain.  Unfortunately, this does not hold for some of the most interesting new input technologies including naturalistic inputs such as free space gestures (e.g., as sensed by the Kinect depth camera), pen input (including handwriting, gestures, and free hand drawing), touch input, sensors for context, and voice input.  Some of these new technologies contain inherent uncertainty, such as when a finger touch area (that the user cannot see) is much larger than the pixels of a display.  Others make use of recognizers for input and typically produce estimates of what might have occurred.  Since conventional methods of input handling have no way to manage uncertainty in input, many of them force uncertainty to be resolved before input processing even starts.  For example, the location of input from a touch screen may be represented as certain using a single point (its centroid).  But when uncertainty information is thrown away, interfaces can quickly become brittle; small recognition errors can derail the interaction and destroy the user experience.  As a result, these new and very promising forms of input have often proven difficult to use to their full potential.  The PI's goal in this project is to overcome this problem by creating a redesigned input-handling infrastructure, which will robustly model, and make use of, inputs with uncertainty.  It will do this by treating all input, and all UI actions stemming from that input, on a probabilistic basis, entertaining multiple possible interpretations of input (and all its consequences over time), along with estimates of the likelihood of each interpretation.  As a result, when decisions need to be made and irreversible actions undertaken, systems will have a sound basis for choosing among interpretations.  Rather than starting with completely new input concepts, the PI's approach is to extend conventional input abstractions with support for uncertainty.  Normally, a single certain input event is dispatched to a single interactor, which interprets its meaning to track its own interactive state and eventually request actions.  Now, each of these parts of the input process will be done probabilistically.  An estimated probability distribution will be tracked over input alternatives that might have occurred, interactors which might have received that input, states that interactors might be in, and actions that interactors might request as a result.  These probability distributions can then be used to make informed decisions about when, whether, and which actions to actually undertake.  To hide the complexity of maintaining each of these distributions over time from the UI programmer, the PI will employ a Monte Carlo representation of a probability distribution (i.e., a weighted set of samples each indicating the probability of one definite value).  Crucially, this representation will allow the code to simply execute traditional (certain) input processing steps multiple times - once for each sample in the relevant probability distribution(s).  This hides nearly all the complexity associated with uncertainty, and allows programmers to use their current conceptual models, and even code nearly identical to their current practices, for most aspects of input handling.\r\n\r\nBroader Impacts:   Project outcomes will radically change the ease with which readily available new input technologies can be incorporated into interactive systems, and thus will have wide impact in expanding our ability to build and deploy interfaces with new forms of input.  As part of this research, the PI will develop working solutions for both graphical user interfaces and context-aware applications.  He will also create and widely distribute a full teaching toolkit which embodies these concepts (where the term \"teaching\" is used in the same spirit that Pascal was a teaching programming language - it used good concepts and the best practices of the time; it was conceptually clean, yet suitable for real work).  This teaching toolkit will be integrated into educational activities at the PI's institution, and curricular modules will be developed which should allow this to be carried to other universities.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Scott",
   "pi_last_name": "Hudson",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Scott E Hudson",
   "pi_email_addr": "hudson@cs.cmu.edu",
   "nsf_id": "000396012",
   "pi_start_date": "2012-08-14",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Jennifer",
   "pi_last_name": "Mankoff",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jennifer Mankoff",
   "pi_email_addr": "jmankoff@uw.edu",
   "nsf_id": "000149860",
   "pi_start_date": "2012-08-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie Mellon University",
  "perf_str_addr": "5000 Forbes Avenue",
  "perf_city_name": "Pittsburgh",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133815",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736700",
   "pgm_ele_name": "HCC-Human-Centered Computing"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7367",
   "pgm_ref_txt": "Cyber-Human Systems"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 160127.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 358992.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Graphical user interfaces have revolutionized the ability of people to make use of computers in everyday activities.&nbsp; The underlying software concepts that make these user interfaces work are now well understood and widely adopted.&nbsp; However, recent advances in user interface technology &ndash; for example, the touch input found on mobile phones and tablets, voice input, pen input, and new techniques that make use of &ldquo;big data&rdquo; to predict the activities of users &ndash; have introduced significant new challenges that these software concepts were not designed to handle.&nbsp; Specifically, the original software concepts for handling user input assume that user actions (inputs) are certain to have occurred as they are reported to a system &ndash; if the system reports that the right mouse button has been pressed down, it is very likely that the user has pressed the right mouse button.&nbsp; However, new naturalistic forms of input like those listed above introduce uncertainty into input &ndash; in a voice interface, the user might say &ldquo;50&rdquo; but the system may find it hard to distinguish this from &ldquo;15&rdquo;.&nbsp; Current software for handling user input has no good way to resolve this uncertainty.&nbsp; As a result systems are normally forced to resolve this ambiguity as soon as the input occurs &ndash; they cannot take into account information which may arrive later, or make use of the context in which inputs occur, instead they must make an immediate decision.&nbsp; This leads to &ldquo;brittle&rdquo; interfaces which can make significantly more mistakes than necessary, and have no way to let the user guide them to a correct interpretation of ambiguous input.&nbsp;</p>\n<p>The primary result of this project has been the development of a new set of input handling software concepts which support new forms of uncertain input much better.&nbsp; These software concepts track the uncertainty involved with input across multiple user actions and provide systems with accurate estimates of the probabilities of various combinations of input, while allowing systems both to wait until actions must be performed to make decisions, and to know when those decisions are highly uncertain.&nbsp; This allows better, more usable and more understandable user interfaces to be created.&nbsp; Importantly, these software concepts have been designed to appear to programmers in a very similar form to the existing concepts for input handling &ndash; with most of the difficult probabilistic modeling occurring &ldquo;under the covers&rdquo;.&nbsp; This should allow techniques based on these concepts to be easily adopted into future systems.&nbsp; As a consequence, the results of this project provide the promise of improving user interfaces in a wide range of applications and for a wide range of future devices.&nbsp;&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/02/2017<br>\n\t\t\t\t\tModified by: Scott&nbsp;E&nbsp;Hudson</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nGraphical user interfaces have revolutionized the ability of people to make use of computers in everyday activities.  The underlying software concepts that make these user interfaces work are now well understood and widely adopted.  However, recent advances in user interface technology &ndash; for example, the touch input found on mobile phones and tablets, voice input, pen input, and new techniques that make use of \"big data\" to predict the activities of users &ndash; have introduced significant new challenges that these software concepts were not designed to handle.  Specifically, the original software concepts for handling user input assume that user actions (inputs) are certain to have occurred as they are reported to a system &ndash; if the system reports that the right mouse button has been pressed down, it is very likely that the user has pressed the right mouse button.  However, new naturalistic forms of input like those listed above introduce uncertainty into input &ndash; in a voice interface, the user might say \"50\" but the system may find it hard to distinguish this from \"15\".  Current software for handling user input has no good way to resolve this uncertainty.  As a result systems are normally forced to resolve this ambiguity as soon as the input occurs &ndash; they cannot take into account information which may arrive later, or make use of the context in which inputs occur, instead they must make an immediate decision.  This leads to \"brittle\" interfaces which can make significantly more mistakes than necessary, and have no way to let the user guide them to a correct interpretation of ambiguous input. \n\nThe primary result of this project has been the development of a new set of input handling software concepts which support new forms of uncertain input much better.  These software concepts track the uncertainty involved with input across multiple user actions and provide systems with accurate estimates of the probabilities of various combinations of input, while allowing systems both to wait until actions must be performed to make decisions, and to know when those decisions are highly uncertain.  This allows better, more usable and more understandable user interfaces to be created.  Importantly, these software concepts have been designed to appear to programmers in a very similar form to the existing concepts for input handling &ndash; with most of the difficult probabilistic modeling occurring \"under the covers\".  This should allow techniques based on these concepts to be easily adopted into future systems.  As a consequence, the results of this project provide the promise of improving user interfaces in a wide range of applications and for a wide range of future devices.  \n\n \n\n\t\t\t\t\tLast Modified: 01/02/2017\n\n\t\t\t\t\tSubmitted by: Scott E Hudson"
 }
}