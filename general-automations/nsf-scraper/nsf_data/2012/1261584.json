{
 "awd_id": "1261584",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: Programming Interface And Runtime For Self-Tuning Scalable C/C++ Data Structures",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2012-08-13",
 "awd_exp_date": "2018-09-30",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2012-09-06",
 "awd_max_amd_letter_date": "2018-01-29",
 "awd_abstract_narration": "A key challenge in developing multi-threaded applications on modern architectures is correctly synchronizing data shared among the threads while avoiding excessive performance penalties. Unsafe low-level synchronization mechanisms can easily introduce errors (e.g. race conditions and deadlock) that are extremely difficult to debug. At the same time, application performance and scalability are frequently compromised due to inefficient implementations of synchronous operations on shared data.    \r\n\r\nThis research develops a library of highly concurrent scalable data containers with associated programming interface and optimization support to significantly enhance the productivity and performance of multi-threaded C/C++ applications on multicore architectures. The library provides an easy to use and composable interface similar to that of C++ Standard Template Library (STL) and enhances each container type with internal support for non-blocking synchronization of their data accesses, thereby providing better safety and performance than traditional blocking synchronization by eliminating hazards such as deadlock, livelock, and priority inversion, and by being highly scalable in supporting large numbers of threads. A higher level programming interface, similar to that of OpenMP, is supported by a preprocessing compiler associated with the runtime to ease the transition of existing sequential or multi-threaded C/C++ applications to using the non-blocking synchronous template library and to provide optimization and tuning support for the use of the library abstractions. The developed deliverables are expected to demonstrate a seamless integration of developer input, compiler optimization, and multicore runtimes to support systematic migration of C/C++ applications to continuously evolving architectures. \r\n\r\nThe scalable template library and the associated programming interface and tuning support is expected to provide an immense productivity and performance boost for developers of high-end scientific and systems applications, including branch and bound, graph analysis, complex scene rendering, and goal propagation in autonomous embedded systems. The developed programming techniques and tools can enable the transformation of such applications into software that is substantially more reliable, efficient, and scalable than existing state of the art. The software techniques is also expected to be employed as an educational toolkit in the teaching of programming languages, compilers, systems software, and parallel programming courses.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Qing",
   "pi_last_name": "Yi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Qing Yi",
   "pi_email_addr": "yi7@llnl.gov",
   "nsf_id": "000492904",
   "pi_start_date": "2012-09-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Colorado at Colorado Springs",
  "inst_street_address": "1420 AUSTIN BLUFFS PKWY",
  "inst_street_address_2": "",
  "inst_city_name": "COLORADO SPRINGS",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "7192553153",
  "inst_zip_code": "809183733",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "CO05",
  "org_lgl_bus_name": "THE REGENTS OF THE UNIVERSITY OF COLORADO",
  "org_prnt_uei_num": "",
  "org_uei_num": "RH87YDXC1AY5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Colorado at Colorado Springs",
  "perf_str_addr": "1420 Austin Bluffs Parkway",
  "perf_city_name": "Colorado Springs",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "809183733",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "CO05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7329",
   "pgm_ref_txt": "COMPILERS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 250000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><div class=\"page\" title=\"Page 2\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>This funded research addresses challenges in the design, optimization, and tool support of scalable concurrent data structures in C/C++ applications. Specifically it focuses on&nbsp;programming and compiler support to 1) &nbsp;automatically convert sequential data abstractions to efficient implementations of highly concurrent implementations using lock-free synchronization mechanisms, and &nbsp;2) optimization and tuning support for porting architecture-sensitive implementations of library abstractions and their use cases in large applications to different architectures. The prototype deliverables accordingly include 1)&nbsp;</span>a lock-free synchronization compiler, which automatically modifies sequential data structure implementations to support concurrent operations using non-blocking synchronizations, &nbsp;and 2) a source-to-source data abstraction replacement compiler, which support the automated exchange of data structure implementations and the optimization of their synchronizations to enhance application performance. &nbsp;The outcome also includes a preliminary adapter specification language to model the semantic properties of data abstractions in multi-threaded applications and thereby to enable these abstractions to be used interchangeably in large applications.</p>\n<p>The lock-free synchronization compiler has been tested by using it to automate synchronization of 8 commonly used data structures. Here our auto-generated non-blocking synchronizations can perform comparably or better than existing state-of-the-art manual implementations for all data structures tested. The compiler-generated code can perform highly efficiently because it automatically integrates a combination of state-of-the practice lock-free synchronization techniques based on the underlying code that need to be synchronized, through automated program analysis of the data abstraction implementation. The data abstraction replacement compiler has been tested by using it to support the exchange of data structure implementations in the PARSEC benchmarks. The compiler was able to automate the exchange of all uses of pre-defined queue, map, and synchronization abstractions in PARSEC (they are used in 10 of the 13 available benchmarks). However, speedups were observed on for 6 of the 10 benchmarks optimized. The main reason being low contentions among concurrent uses of the task queue abstractions in the original application design.</p>\n<p>The main findings of the research are two folds. First, there is a large potential in optimizing the implementation of entire data abstractions, each represented by a group of related data members and encapsulated operations on these data. The potential is reflected by the significant improvement attained by automatically synchronizing sequential data abstractions from their sequential implementations, beyond what is possible via previous state-of-the-art. Second, the implementations of different abstractions in a large application are often intertwined with one another, and changing the implementation of an individual abstraction in isolation is often not rewarding, as reflected by the lack of speedups attained by our compiler when exchanging individual abstraction implementations in isolation. It is important to collectively consider the hierarchy of abstractions and their parallelization dertails in a cohesive fashion, in order to improve the overall efficiency of a large application.</p>\n</div>\n</div>\n</div><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/23/2018<br>\n\t\t\t\t\tModified by: Qing&nbsp;Yi</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\n\n\nThis funded research addresses challenges in the design, optimization, and tool support of scalable concurrent data structures in C/C++ applications. Specifically it focuses on programming and compiler support to 1)  automatically convert sequential data abstractions to efficient implementations of highly concurrent implementations using lock-free synchronization mechanisms, and  2) optimization and tuning support for porting architecture-sensitive implementations of library abstractions and their use cases in large applications to different architectures. The prototype deliverables accordingly include 1) a lock-free synchronization compiler, which automatically modifies sequential data structure implementations to support concurrent operations using non-blocking synchronizations,  and 2) a source-to-source data abstraction replacement compiler, which support the automated exchange of data structure implementations and the optimization of their synchronizations to enhance application performance.  The outcome also includes a preliminary adapter specification language to model the semantic properties of data abstractions in multi-threaded applications and thereby to enable these abstractions to be used interchangeably in large applications.\n\nThe lock-free synchronization compiler has been tested by using it to automate synchronization of 8 commonly used data structures. Here our auto-generated non-blocking synchronizations can perform comparably or better than existing state-of-the-art manual implementations for all data structures tested. The compiler-generated code can perform highly efficiently because it automatically integrates a combination of state-of-the practice lock-free synchronization techniques based on the underlying code that need to be synchronized, through automated program analysis of the data abstraction implementation. The data abstraction replacement compiler has been tested by using it to support the exchange of data structure implementations in the PARSEC benchmarks. The compiler was able to automate the exchange of all uses of pre-defined queue, map, and synchronization abstractions in PARSEC (they are used in 10 of the 13 available benchmarks). However, speedups were observed on for 6 of the 10 benchmarks optimized. The main reason being low contentions among concurrent uses of the task queue abstractions in the original application design.\n\nThe main findings of the research are two folds. First, there is a large potential in optimizing the implementation of entire data abstractions, each represented by a group of related data members and encapsulated operations on these data. The potential is reflected by the significant improvement attained by automatically synchronizing sequential data abstractions from their sequential implementations, beyond what is possible via previous state-of-the-art. Second, the implementations of different abstractions in a large application are often intertwined with one another, and changing the implementation of an individual abstraction in isolation is often not rewarding, as reflected by the lack of speedups attained by our compiler when exchanging individual abstraction implementations in isolation. It is important to collectively consider the hierarchy of abstractions and their parallelization dertails in a cohesive fashion, in order to improve the overall efficiency of a large application.\n\n\n\n\n\t\t\t\t\tLast Modified: 10/23/2018\n\n\t\t\t\t\tSubmitted by: Qing Yi"
 }
}