{
 "awd_id": "1249449",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Identifying and Removing Barriers to Autovectorization",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2012-09-15",
 "awd_exp_date": "2013-08-31",
 "tot_intn_awd_amt": 60611.0,
 "awd_amount": 60611.0,
 "awd_min_amd_letter_date": "2012-09-11",
 "awd_max_amd_letter_date": "2012-09-11",
 "awd_abstract_narration": "Most modern microprocessors support some form of vector operations that allow the same operation to be applied to small vectors of arguments simultaneously.  Studies have shown that use of these instructions can improve the performance of many scientific codes by a factor of 2 or more.  Unfortunately, the state of the art in autovectorization falls far short of this goal, only achieving improvements of 20-30% on the same codes.\r\n\r\nWhile studies have shown that current autovectorizing compilers do not identify all of the opportunities for vectorization, little is known about why they fail to do so.  The PIs plan to evaluate tradeoffs between different compiler optimizations and vectorization in an effort to understand how optimization choices affect opportunities for autovectorization.  They will use an extensive set of benchmarks to evaluate these tradeoffs.  This research will make it possible to develop better autovectorizing compilers by avoiding optimization choices that interfere with autovectorization.  The performance benefits of such compilers will improve the performance of applications ranging from multimedia software to scientific computing.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Alexandru",
   "pi_last_name": "Nicolau",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Alexandru Nicolau",
   "pi_email_addr": "anicolau@uci.edu",
   "nsf_id": "000108570",
   "pi_start_date": "2012-09-11",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Alexander",
   "pi_last_name": "Veidenbaum",
   "pi_mid_init": "V",
   "pi_sufx_name": "",
   "pi_full_name": "Alexander V Veidenbaum",
   "pi_email_addr": "alexv@ics.uci.edu",
   "nsf_id": "000181882",
   "pi_start_date": "2012-09-11",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Utpal",
   "pi_last_name": "Banerjee",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Utpal Banerjee",
   "pi_email_addr": "ubanerjee@acm.org",
   "nsf_id": "000608727",
   "pi_start_date": "2012-09-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Irvine",
  "inst_street_address": "160 ALDRICH HALL",
  "inst_street_address_2": "",
  "inst_city_name": "IRVINE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9498247295",
  "inst_zip_code": "926970001",
  "inst_country_name": "United States",
  "cong_dist_code": "47",
  "st_cong_dist_code": "CA47",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA IRVINE",
  "org_prnt_uei_num": "MJC5FCYQTPE6",
  "org_uei_num": "MJC5FCYQTPE6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Irvine",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "926970001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "47",
  "perf_st_cong_dist": "CA47",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7329",
   "pgm_ref_txt": "COMPILERS"
  },
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 60611.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This work (EAGER award) was an effort to determine the reasons why &nbsp;vectorization - &nbsp;a very efficient technique for parallel execution of certain types of code - &nbsp;has been in practice relatively unsuccessful, yielding only modest speedups and ~30% actual code vectorization in average applications, even though numerous studies show that, in principle &gt;90% vectorization/parallelization might be achievable.</p>\n<p>This is a very important problem, because a significant improvement in code performance via improved vectorization/parallelization would result not only in much faster execution of programs on exiting and future computers, but significant power savings as well.</p>\n<p>The relative failure to vectorize well is seemingly due not to the lack of parallelization/vectorization techniques (which are plentiful following 50+ years of prior research), but rather because of inability of existing tools to predict well &nbsp;which part of the code can be parallelized/vectorized and which transformations will result in the most significant performance increase as a result of such transformations for that particular code.</p>\n<p>&nbsp;To remedy this, as part of this project, we developed <span>a new technique for performance evaluation that is able to <em><strong>predict</strong></em> the performance of parallel programs across very diverse and&nbsp;</span><span>complex computer systems. This constitutes the foundation of a future effort to design the \"ultimate\" vectorizing compiler, in as much as this prediction tool will be used to accurately guide the application of transformations and optimizations to maximize performance of a given program executing on a given system, and/or optimize power consumption as well.&nbsp;</span></p>\n<p><span><br /></span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/25/2013<br>\n\t\t\t\t\tModified by: Alexandru&nbsp;Nicolau</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis work (EAGER award) was an effort to determine the reasons why  vectorization -  a very efficient technique for parallel execution of certain types of code -  has been in practice relatively unsuccessful, yielding only modest speedups and ~30% actual code vectorization in average applications, even though numerous studies show that, in principle &gt;90% vectorization/parallelization might be achievable.\n\nThis is a very important problem, because a significant improvement in code performance via improved vectorization/parallelization would result not only in much faster execution of programs on exiting and future computers, but significant power savings as well.\n\nThe relative failure to vectorize well is seemingly due not to the lack of parallelization/vectorization techniques (which are plentiful following 50+ years of prior research), but rather because of inability of existing tools to predict well  which part of the code can be parallelized/vectorized and which transformations will result in the most significant performance increase as a result of such transformations for that particular code.\n\n To remedy this, as part of this project, we developed a new technique for performance evaluation that is able to predict the performance of parallel programs across very diverse and complex computer systems. This constitutes the foundation of a future effort to design the \"ultimate\" vectorizing compiler, in as much as this prediction tool will be used to accurately guide the application of transformations and optimizations to maximize performance of a given program executing on a given system, and/or optimize power consumption as well. \n\n\n\n\n\t\t\t\t\tLast Modified: 09/25/2013\n\n\t\t\t\t\tSubmitted by: Alexandru Nicolau"
 }
}