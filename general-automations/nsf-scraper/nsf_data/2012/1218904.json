{
 "awd_id": "1218904",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AF: III: Small: Space-efficient Frameworks for Multi-pattern Matching in Text Streams",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Maria Zemankova",
 "awd_eff_date": "2012-09-01",
 "awd_exp_date": "2016-08-31",
 "tot_intn_awd_amt": 184261.0,
 "awd_amount": 184261.0,
 "awd_min_amd_letter_date": "2012-07-30",
 "awd_max_amd_letter_date": "2015-04-14",
 "awd_abstract_narration": "Multi-pattern matching is the problem of finding whether and where a set of patterns appear in a data stream. An example of such a problem is scanning Internet traffic for malware signature patterns. Important considerations in multi-pattern matching are the amount of memory required to store the patterns and the speed with which the stream can be scanned through. Storage space can be reduced either by compressing the patterns or by approximately 'sketching' them. This project aims to advance this field by seeking ways to enable multi-pattern search with (1) minimum possible space, (2) fastest possible time, and (3) high accuracy. The project combines theoretical advances with practical implementations. Theoretical approaches involve sketching, streaming, hashing and succinct data structures. Practical goals include developing faster hardware-based implementations and cache-aware implementations. \r\n\r\nMulti-pattern matching is central to applications such as computer virus detection, network intrusion detection and information extraction. It resides at the cross-section of several fields of computer science, including theory, networking, databases and bioinformatics. Recent development of tools in pattern matching such as succinct data structures and streaming algorithms make this an exciting time to advance the state-of-the-art in this field. Several research opportunities for undergraduate students will evolve from this project. Results will be disseminated through publications in conferences and journals.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Sukhamay",
   "pi_last_name": "Kundu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sukhamay Kundu",
   "pi_email_addr": "kundu@csc.lsu.edu",
   "nsf_id": "000467571",
   "pi_start_date": "2015-04-14",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Rahul",
   "pi_last_name": "Shah",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Rahul T Shah",
   "pi_email_addr": "rahul@csc.lsu.edu",
   "nsf_id": "000200569",
   "pi_start_date": "2012-07-30",
   "pi_end_date": "2015-04-14"
  }
 ],
 "inst": {
  "inst_name": "Louisiana State University",
  "inst_street_address": "202 HIMES HALL",
  "inst_street_address_2": "",
  "inst_city_name": "BATON ROUGE",
  "inst_state_code": "LA",
  "inst_state_name": "Louisiana",
  "inst_phone_num": "2255782760",
  "inst_zip_code": "708030001",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "LA06",
  "org_lgl_bus_name": "LOUISIANA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "ECQEYCHRNKJ4"
 },
 "perf_inst": {
  "perf_inst_name": "Louisiana State University & Agricultural and Mechanical College",
  "perf_str_addr": "Coates Hall, LSU",
  "perf_city_name": "Baton rouge",
  "perf_st_code": "LA",
  "perf_st_name": "Louisiana",
  "perf_zip_code": "708032701",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "LA06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7926",
   "pgm_ref_txt": "ALGORITHMS"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 184261.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The objectives of the project were to develop data structures and algorithms for dictionary matching problems in space constrained models. In dictionary matching problem, we create a data structure out of multiple patterns which are given in the database.&nbsp; Then, when the text stream comes in online fashion, we need to output if any of the stored pattern appears at the current location in the text. We focus on space saving variants of this data structures. Imagine internet packets flowing through a router and we need to do a deep packet inspection, to find certain security risks. Or imagine that we want to store virus database in a limited RAM memory of desktop or mobile deivce to scan for viruses in incoming data/files. All of these require small space data structures.</p>\n<p>We considered two different kind of data structural models which compress the indexed data set. One which does lossless data compression (succinct) and answers exactly and other which allows lossy compression - which could lead to some false positives (streaming). We worked on classical pattern matching problem as well as a variant called parameterized pattern matching where the alphabet symbols can be permuted under one-one mapping.</p>\n<p>1) We developed the most optimal succinct dictionary matching data structure.</p>\n<p>2) We developed an approximate variants of this problem. The approximations involved measures like<br />a) gaps<br />b) wildcards</p>\n<p>3) For parameterized pattern matching: we developed<br />a) Succinct data structure<br />b) Streaming data structure<br />c) Dynamic data structure.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/03/2017<br>\n\t\t\t\t\tModified by: Sukhamay&nbsp;Kundu</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe objectives of the project were to develop data structures and algorithms for dictionary matching problems in space constrained models. In dictionary matching problem, we create a data structure out of multiple patterns which are given in the database.  Then, when the text stream comes in online fashion, we need to output if any of the stored pattern appears at the current location in the text. We focus on space saving variants of this data structures. Imagine internet packets flowing through a router and we need to do a deep packet inspection, to find certain security risks. Or imagine that we want to store virus database in a limited RAM memory of desktop or mobile deivce to scan for viruses in incoming data/files. All of these require small space data structures.\n\nWe considered two different kind of data structural models which compress the indexed data set. One which does lossless data compression (succinct) and answers exactly and other which allows lossy compression - which could lead to some false positives (streaming). We worked on classical pattern matching problem as well as a variant called parameterized pattern matching where the alphabet symbols can be permuted under one-one mapping.\n\n1) We developed the most optimal succinct dictionary matching data structure.\n\n2) We developed an approximate variants of this problem. The approximations involved measures like\na) gaps\nb) wildcards\n\n3) For parameterized pattern matching: we developed\na) Succinct data structure\nb) Streaming data structure\nc) Dynamic data structure.\n\n\t\t\t\t\tLast Modified: 01/03/2017\n\n\t\t\t\t\tSubmitted by: Sukhamay Kundu"
 }
}