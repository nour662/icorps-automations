{
 "awd_id": "1149454",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Automated Concurrency Debugging ? An Essential Ingredient for Safety-Critical Software Assurance and Security",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2012-01-01",
 "awd_exp_date": "2017-12-31",
 "tot_intn_awd_amt": 478042.0,
 "awd_amount": 526042.0,
 "awd_min_amd_letter_date": "2011-12-13",
 "awd_max_amd_letter_date": "2016-02-08",
 "awd_abstract_narration": "Detecting and repairing concurrent software defects has always been labor-intensive due to the inherent complexity in analyzing the astronomically large number of thread interleavings. The situation is exacerbated by the increasingly widespread use of multicore processors, whose computing power can only be unleashed by concurrent software. Automation of this detection and repair process promises to drastically reduce the time spent in debugging such systems, leading to reliable and secure software as well as fully utilized parallel hardware. The objective of this research is to improve the concurrent software reliability and security through innovations in automated concurrency debugging. \r\n\r\nThis project will investigate new theoretical and algorithmic advances, and tools to fully automate the crucial process of bug detection, diagnosis, repair, and optimization for large concurrent software. The unifying theme of this research is the judicious application of logical constraint based symbolic methods and automated thread interference abstractions.  Symbolic methods will mitigate interleaving explosion, which is the major scalability bottleneck in concurrent software analysis, verification, synthesis and maintenance. Interference abstraction will enable the use of the most economical methods to analyze properties of the system via under- or over-approximated modeling of thread interactions. The PI will incorporate the results from this research into the undergraduate computing curriculum and summer retraining courses for Information Technology (IT) practioners with the aim of maintaining the competitive vitality of the U.S. IT workforce.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Chao",
   "pi_last_name": "Wang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Chao Wang",
   "pi_email_addr": "wang626@usc.edu",
   "nsf_id": "000596776",
   "pi_start_date": "2011-12-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Virginia Polytechnic Institute and State University",
  "inst_street_address": "300 TURNER ST NW",
  "inst_street_address_2": "STE 4200",
  "inst_city_name": "BLACKSBURG",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "5402315281",
  "inst_zip_code": "240603359",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "VA09",
  "org_lgl_bus_name": "VIRGINIA POLYTECHNIC INSTITUTE & STATE UNIVERSITY",
  "org_prnt_uei_num": "X6KEFGLHSJX7",
  "org_uei_num": "QDE5UHE5XD16"
 },
 "perf_inst": {
  "perf_inst_name": "Virginia Polytechnic Institute and State University",
  "perf_str_addr": "",
  "perf_city_name": "Blacksburg",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "240603580",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "VA09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  },
  {
   "pgm_ele_code": "794400",
   "pgm_ele_name": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 176876.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 141007.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 102170.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 89989.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This NSF CAREER grant allowed the principal investigator and students to conduct cutting-edge research on static, dynamic, and symbolic analysis techniques for concurrent software, as well as leverage these advanced techniques for automated testing, debugging, repairing, and optimizing concurrent software. As a result, a number of new algorithms have been proposed. The project has led to more than thirty publications, the majority of which appeared in the most prestigious journals and conferences in the area (software engineering/programming languages). The grant also supported the doctoral dissertation research of several PhD students and the thesis research of several Masters students. Research findings have been integrated into graduate-level courses taught by the principal investigator at both Virginia Tech and University of Southern California.</p>\n<p>&nbsp;</p>\n<p>Selected Publications:</p>\n<ol>\n<li>Qiuping Yi, Zijiang Yang, Shengjian Guo, Chao Wang, Jian Liu, and Chen Zhao&nbsp;(2018).&nbsp;Eliminating path redundancy via postconditioned symbolic execution.&nbsp; <em>IEEE Transactions on Software Engineering</em>. </li>\n<li>Markus Kusano, and Chao Wang&nbsp;(2017).&nbsp;Thread-modular static analysis for relaxed memory models.&nbsp; <em>(FSE)</em>. </li>\n<li>Tingting Yu, Tarannum Zaman, and Chao Wang&nbsp;(2017).&nbsp;DESCRY: Reproducing system-level concurrency failures.&nbsp;(<em>FSE).</em></li>\n<li>Shengjian Guo, Meng Wu, and Chao Wang&nbsp;(2017).&nbsp;Symbolic execution of programmable logic controller code.&nbsp;(<em>FSE)</em>. </li>\n<li>Li Cheng, Zijiang Yang, and Chao Wang&nbsp;(2017).&nbsp;Systematic reduction of GUI test sequences.&nbsp;(<em>ASE).</em> </li>\n<li>Chungha Sung, Markus Kusano, and Chao Wang&nbsp;(2017).&nbsp;Modular verification of interrupt-driven software.&nbsp; (<em>ASE).</em></li>\n<li>Lu Zhang, and Chao Wang&nbsp;(2017).&nbsp;RClassify: Classifying race conditions in web applications via deterministic replay.&nbsp;(<em>ICSE)</em>. </li>\n<li>Markus Kusano and Chao Wang&nbsp;(2016).&nbsp;Flow-sensitive composition of thread-modular abstract interpretation.&nbsp; (<em>FSE)</em>. </li>\n<li>Chungha Sung, Markus Kusano, Nishant Sinha, and Chao Wang&nbsp;(2016).&nbsp;Static DOM event dependency analysis for testing web applications. (<em>FSE)</em>. </li>\n<li>Naling Zhang, Markus Kusano, and Chao Wang&nbsp;(2015).&nbsp;Dynamic partial order reduction for relaxed memory models.&nbsp; <em>(PLDI)</em>. </li>\n<li>Shengjian Guo, Markus Kusano, Chao Wang, Zijiang Yang, and Aarti Gupta&nbsp;(2015).&nbsp;Assertion guided symbolic execution of multithreaded programs.&nbsp;(<em>FSE).</em> </li>\n<li>Markus Kusano, Arijit Chattopadhyay, and Chao Wang&nbsp;(2015).&nbsp;Dynamic generation of likely invariants for multithreaded programs.&nbsp;(<em>ICSE)</em>. </li>\n<li>Lu Zhang, Arijit Chattopadhyay, and Chao Wang&nbsp;(2015).&nbsp;Round-Up: Runtime verification of quasi linearizability for concurrent data structures.&nbsp; <em>IEEE Trans. Software Engineering</em>. </li>\n<li>Kiran Adhikari, James Street, Chao Wang, Yang Liu, and Shaojie Zhang&nbsp;(2016).&nbsp;Verifying a quantitative relaxation of linearizability via refinement.&nbsp; <em>Intl. J. Software Tools for Technology Transfer</em>. </li>\n<li>Lu Zhang, and Chao Wang&nbsp;(2014).&nbsp;Runtime prevention of concurrency related type-state violations in multithreaded applications.&nbsp; <em>(ISSTA)</em>. </li>\n<li>Lu Zhang, Arijit Chattopadhyay, and Chao Wang&nbsp;(2013).&nbsp;Round-Up: Runtime checking quasi linearizability of concurrent data structures.&nbsp;<em>(ASE)</em>. </li>\n<li>Markus Kusano and Chao Wang&nbsp;(2013).&nbsp;CCmutator: A mutation generator for concurrency constructs in multithreaded C/C++ applications.&nbsp; <em>(ASE)</em>. </li>\n<li>Markus Kusano, and Chao Wang&nbsp;(2014).&nbsp;Assertion guided abstraction: a cooperative optimization for dynamic partial order reduction.&nbsp; <em>(ASE)</em>. </li>\n<li>Mitra Befrouei, Chao Wang, and Georg Weissenbacher&nbsp;(2014).&nbsp;Abstraction and mining of traces to explain concurrency bugs.&nbsp; <em>Intl. Conf. Runtime Verification (RV)</em>. </li>\n<li>Qiuping Yi, Zijiang Yang, Jian Liu, Chen Zhao, and Chao Wang&nbsp;(2015).&nbsp;A synergistic analysis method for explaining failed regression tests.&nbsp; <em>(ICSE)</em>. </li>\n<li>Qiuping Yi, Zijiang Yang, Shengjian Guo, Chao Wang, Jian Liu, and Chen Zhao&nbsp;(2015).&nbsp;Post-conditioned symbolic execution.&nbsp; <em>(ICST)</em>. </li>\n<li>Roderick Bloem, Bettena Konighofer, Robert Konighofer, and Chao Wang&nbsp;(2015).&nbsp;Shield synthesis: Runtime enforcement for reactive systems.&nbsp; <em>(TACAS)</em>. </li>\n<li>Sepideh Khoshnood, Markus Kusano, and Chao Wang&nbsp;(2015).&nbsp;ConcBugAssist: Constraint solving for diagnosis and repair of concurrency bugs.&nbsp; <em>(ISSTA)</em>. </li>\n<li>Shengjian Guo, Markus Kusano, and Chao Wang&nbsp;(2016).&nbsp;Conc-iSE: Incremental symbolic execution of concurrent software.&nbsp; (<em>ASE)</em>. </li>\n<li>Vineet Kahlon, and Chao Wang&nbsp;(2012).&nbsp;Lock removal for concurrent trace programs.&nbsp; <em>(CAV)</em>. </li>\n</ol>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/02/2018<br>\n\t\t\t\t\tModified by: Chao&nbsp;Wang</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis NSF CAREER grant allowed the principal investigator and students to conduct cutting-edge research on static, dynamic, and symbolic analysis techniques for concurrent software, as well as leverage these advanced techniques for automated testing, debugging, repairing, and optimizing concurrent software. As a result, a number of new algorithms have been proposed. The project has led to more than thirty publications, the majority of which appeared in the most prestigious journals and conferences in the area (software engineering/programming languages). The grant also supported the doctoral dissertation research of several PhD students and the thesis research of several Masters students. Research findings have been integrated into graduate-level courses taught by the principal investigator at both Virginia Tech and University of Southern California.\n\n \n\nSelected Publications:\n\nQiuping Yi, Zijiang Yang, Shengjian Guo, Chao Wang, Jian Liu, and Chen Zhao (2018). Eliminating path redundancy via postconditioned symbolic execution.  IEEE Transactions on Software Engineering. \nMarkus Kusano, and Chao Wang (2017). Thread-modular static analysis for relaxed memory models.  (FSE). \nTingting Yu, Tarannum Zaman, and Chao Wang (2017). DESCRY: Reproducing system-level concurrency failures. (FSE).\nShengjian Guo, Meng Wu, and Chao Wang (2017). Symbolic execution of programmable logic controller code. (FSE). \nLi Cheng, Zijiang Yang, and Chao Wang (2017). Systematic reduction of GUI test sequences. (ASE). \nChungha Sung, Markus Kusano, and Chao Wang (2017). Modular verification of interrupt-driven software.  (ASE).\nLu Zhang, and Chao Wang (2017). RClassify: Classifying race conditions in web applications via deterministic replay. (ICSE). \nMarkus Kusano and Chao Wang (2016). Flow-sensitive composition of thread-modular abstract interpretation.  (FSE). \nChungha Sung, Markus Kusano, Nishant Sinha, and Chao Wang (2016). Static DOM event dependency analysis for testing web applications. (FSE). \nNaling Zhang, Markus Kusano, and Chao Wang (2015). Dynamic partial order reduction for relaxed memory models.  (PLDI). \nShengjian Guo, Markus Kusano, Chao Wang, Zijiang Yang, and Aarti Gupta (2015). Assertion guided symbolic execution of multithreaded programs. (FSE). \nMarkus Kusano, Arijit Chattopadhyay, and Chao Wang (2015). Dynamic generation of likely invariants for multithreaded programs. (ICSE). \nLu Zhang, Arijit Chattopadhyay, and Chao Wang (2015). Round-Up: Runtime verification of quasi linearizability for concurrent data structures.  IEEE Trans. Software Engineering. \nKiran Adhikari, James Street, Chao Wang, Yang Liu, and Shaojie Zhang (2016). Verifying a quantitative relaxation of linearizability via refinement.  Intl. J. Software Tools for Technology Transfer. \nLu Zhang, and Chao Wang (2014). Runtime prevention of concurrency related type-state violations in multithreaded applications.  (ISSTA). \nLu Zhang, Arijit Chattopadhyay, and Chao Wang (2013). Round-Up: Runtime checking quasi linearizability of concurrent data structures. (ASE). \nMarkus Kusano and Chao Wang (2013). CCmutator: A mutation generator for concurrency constructs in multithreaded C/C++ applications.  (ASE). \nMarkus Kusano, and Chao Wang (2014). Assertion guided abstraction: a cooperative optimization for dynamic partial order reduction.  (ASE). \nMitra Befrouei, Chao Wang, and Georg Weissenbacher (2014). Abstraction and mining of traces to explain concurrency bugs.  Intl. Conf. Runtime Verification (RV). \nQiuping Yi, Zijiang Yang, Jian Liu, Chen Zhao, and Chao Wang (2015). A synergistic analysis method for explaining failed regression tests.  (ICSE). \nQiuping Yi, Zijiang Yang, Shengjian Guo, Chao Wang, Jian Liu, and Chen Zhao (2015). Post-conditioned symbolic execution.  (ICST). \nRoderick Bloem, Bettena Konighofer, Robert Konighofer, and Chao Wang (2015). Shield synthesis: Runtime enforcement for reactive systems.  (TACAS). \nSepideh Khoshnood, Markus Kusano, and Chao Wang (2015). ConcBugAssist: Constraint solving for diagnosis and repair of concurrency bugs.  (ISSTA). \nShengjian Guo, Markus Kusano, and Chao Wang (2016). Conc-iSE: Incremental symbolic execution of concurrent software.  (ASE). \nVineet Kahlon, and Chao Wang (2012). Lock removal for concurrent trace programs.  (CAV). \n\n\n \n\n\t\t\t\t\tLast Modified: 02/02/2018\n\n\t\t\t\t\tSubmitted by: Chao Wang"
 }
}