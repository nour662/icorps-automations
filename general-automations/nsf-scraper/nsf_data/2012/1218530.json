{
 "awd_id": "1218530",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF:Small:Collaborative Research:Adaptive Automatic Parallelization",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2012-10-01",
 "awd_exp_date": "2015-09-30",
 "tot_intn_awd_amt": 247793.0,
 "awd_amount": 247793.0,
 "awd_min_amd_letter_date": "2012-09-04",
 "awd_max_amd_letter_date": "2012-09-04",
 "awd_abstract_narration": "To effectively exploit the power of multi-core processors, programs must be structured as a collection of independent tasks, where separate tasks execute on independent cores.  The complexity of modern software makes it difficult for programmers to express their algorithms within this model, both due to the amount of program analysis needed to identify regions of code that can run in parallel, and the likelihood that different regions of code will be best suited by distinct, and possibly incompatible, models of parallel computing.  In particular, some codes are best parallelized through speculative techniques, while others favor regular analysis, such as that provided by the polyhedral approach.\r\n\r\nThe proposed research addresses fundamental issues in the creation of parallel programs through a novel combination of automatic and profile-driven techniques.  The heart of the research is a robust system based on machine learning, through which a compilation tool can analyze a program, assess the suitability of a variety of parallelization techniques to that program, and then apply the most promising techniques automatically.  At run-time, the program will also employ learning to adapt its behavior according to inputs and environment.  Furthermore, the programmer will be given a profile-driven feedback mechanism, in order to guide the tool to refine its parallelization of the program, and guide the program's self-tuning behavior.  In conjunction with the creation of this system, new algorithms and tools for speculative parallelization and large-scale program analysis will be invented. Prototypes and source code will be distributed as open-source software.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Spear",
   "pi_mid_init": "F",
   "pi_sufx_name": "",
   "pi_full_name": "Michael F Spear",
   "pi_email_addr": "spear@cse.lehigh.edu",
   "nsf_id": "000538657",
   "pi_start_date": "2012-09-04",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Lehigh University",
  "inst_street_address": "526 BRODHEAD AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BETHLEHEM",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "6107583021",
  "inst_zip_code": "180153008",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "PA07",
  "org_lgl_bus_name": "LEHIGH UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "E13MDBKHLDB5"
 },
 "perf_inst": {
  "perf_inst_name": "Lehigh University",
  "perf_str_addr": "19 Memorial Drive West",
  "perf_city_name": "Bethlehem",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "180153005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "PA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7329",
   "pgm_ref_txt": "COMPILERS"
  },
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 247793.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project explored, broadly, compiler, hardware, and run-time library mechanisms to improve speculative execution of concurrent regions of code. &nbsp;The research considered both implicit parallelization (e.g., transforming sequential programs into parallel programs by concurrently executing sequential regions as ordered speculations) and explicit parallelization (e.g., speculative concurrent execution of critical sections from multiple language-level threads). &nbsp;Particular focus was given to issues that broadly cut across domains, such as dynamic reordering of contended operations, novel uses for hardware features such as transactional memory (TM) and high-precision hardware cycle counters, and algorithmic innovations to manage speculative resources within modern multiprocessors. &nbsp;Among the most significant outcomes were the development of new algorithms for dynamically reordering and safely delaying read-modify-write operations within speculative regions of code, new algorithms for hybrid hardware / software transactional memory, and the release of open-source algorithms and tools.</p>\n<p>During the course of the research, 10 research papers were published, to include 2 journal papers. &nbsp;The software developed in support of those papers was released as open-source, and is being used by researchers worldwide.</p>\n<p>Three Ph.D. students and three masters students were directly supported during portions of their education through this research. &nbsp;The award provided a catalyst for enhanced collaborations with TU-Dresden, ARM, Intel, and Oracle. &nbsp;The award also supported numerous outreach activities that aim to broaden the STEM pipeline by introducing elementary school children (grades K-5) to topics in computer science.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/14/2016<br>\n\t\t\t\t\tModified by: Michael&nbsp;F&nbsp;Spear</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project explored, broadly, compiler, hardware, and run-time library mechanisms to improve speculative execution of concurrent regions of code.  The research considered both implicit parallelization (e.g., transforming sequential programs into parallel programs by concurrently executing sequential regions as ordered speculations) and explicit parallelization (e.g., speculative concurrent execution of critical sections from multiple language-level threads).  Particular focus was given to issues that broadly cut across domains, such as dynamic reordering of contended operations, novel uses for hardware features such as transactional memory (TM) and high-precision hardware cycle counters, and algorithmic innovations to manage speculative resources within modern multiprocessors.  Among the most significant outcomes were the development of new algorithms for dynamically reordering and safely delaying read-modify-write operations within speculative regions of code, new algorithms for hybrid hardware / software transactional memory, and the release of open-source algorithms and tools.\n\nDuring the course of the research, 10 research papers were published, to include 2 journal papers.  The software developed in support of those papers was released as open-source, and is being used by researchers worldwide.\n\nThree Ph.D. students and three masters students were directly supported during portions of their education through this research.  The award provided a catalyst for enhanced collaborations with TU-Dresden, ARM, Intel, and Oracle.  The award also supported numerous outreach activities that aim to broaden the STEM pipeline by introducing elementary school children (grades K-5) to topics in computer science.\n\n\t\t\t\t\tLast Modified: 01/14/2016\n\n\t\t\t\t\tSubmitted by: Michael F Spear"
 }
}