{
 "awd_id": "1162021",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Medium: RacePro: Automatically Detecting API Races in Deployed Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2012-09-01",
 "awd_exp_date": "2017-08-31",
 "tot_intn_awd_amt": 800000.0,
 "awd_amount": 800000.0,
 "awd_min_amd_letter_date": "2012-08-29",
 "awd_max_amd_letter_date": "2012-08-29",
 "awd_abstract_narration": "While races in multithreaded programs have drawn huge attention from the\r\nresearch community, little has been done for API races, a class\r\nof errors as dangerous and as difficult to debug as traditional thread\r\nraces.  An API race occurs when multiple activities, whether they be\r\nthreads or processes, access a shared resource via an application\r\nprogramming interface (API) without proper synchronization.  Detecting\r\nAPI races is an important and difficult problem as existing race\r\ndetectors are unlikely to work well with API races. \r\n\r\nSoftware reliability increasingly affects everyone, whether or not\r\nthey personally use computers.  This research studies and\r\nautomatically detects for the first time an important class of races\r\nthat has a significant impact on software reliability.  The study\r\nquantitatively demonstrates how API races are numerous, difficult to\r\ndebug, and a real threat to software reliability.  To address this\r\nproblem, this research is developing RacePro, a new system to\r\nautomatically detect API races in deployed systems.  RacePro checks\r\ndeployed systems in-vivo by recording live executions then\r\ndeterministically replay and check them later.  This approach\r\nincreases checking coverage beyond the configurations or executions\r\ncovered by software vendors or beta testing sites.  RacePro records\r\nmultiple processes and threads, detects races in the recording among \r\nAPI methods that may concurrently access shared objects, then explores\r\ndifferent execution orderings of such API methods to determine which races\r\nare harmful and result in failures.  Technologies developed will help\r\napplication developers detect insidious software defects, enabling \r\nmore robust, reliable, and secure software infrastructure.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jason",
   "pi_last_name": "Nieh",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jason Nieh",
   "pi_email_addr": "nieh@cs.columbia.edu",
   "nsf_id": "000304769",
   "pi_start_date": "2012-08-29",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Junfeng",
   "pi_last_name": "Yang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Junfeng Yang",
   "pi_email_addr": "junfeng@cs.columbia.edu",
   "nsf_id": "000509381",
   "pi_start_date": "2012-08-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Columbia University",
  "inst_street_address": "615 W 131ST ST",
  "inst_street_address_2": "MC 8741",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "2128546851",
  "inst_zip_code": "100277922",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "NY13",
  "org_lgl_bus_name": "THE TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK",
  "org_prnt_uei_num": "",
  "org_uei_num": "F4N1QNPB95M4"
 },
 "perf_inst": {
  "perf_inst_name": "Columbia University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "100276902",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "NY13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 800000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>Software reliability increasingly affects everyone, whether or not&nbsp;</span>they personally use computers.&nbsp; This research studied and automatically detected for the first time a class of errors that has a&nbsp;significant impact on software reliability, API races. &nbsp;An API race occurs when multiple activities, whether they be threads or processes, access a shared resource via an application programming interface (API) without proper synchronization. &nbsp;We show that API races are numerous, difficult to debug, &nbsp;and a real threat to software reliability. &nbsp;We have further studied the evolution of APIs and their possible races to understand how new API abstractions are forming. &nbsp;We address the API race problem by developing new techniques to automatically detect API races in deployed systems. &nbsp;Our approach checks deployed systems in-vivo by recording live executions then deterministically replaying and checking them later, including reordering the replayed execution as needed to detect races. &nbsp;We have also developed techniques to ensure that applications use storage system APIs correctly without concurrency errors, such as data loss errors caused by a concurrent crash. &nbsp;We have also generalized techniques we have developed for race detection which can be used in other ways to improve software reliability. &nbsp;Technologies developed can help application developers detect insidious software defects, enabling more robust, reliable, and secure software infrastructure.&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/14/2017<br>\n\t\t\t\t\tModified by: Jason&nbsp;Nieh</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware reliability increasingly affects everyone, whether or not they personally use computers.  This research studied and automatically detected for the first time a class of errors that has a significant impact on software reliability, API races.  An API race occurs when multiple activities, whether they be threads or processes, access a shared resource via an application programming interface (API) without proper synchronization.  We show that API races are numerous, difficult to debug,  and a real threat to software reliability.  We have further studied the evolution of APIs and their possible races to understand how new API abstractions are forming.  We address the API race problem by developing new techniques to automatically detect API races in deployed systems.  Our approach checks deployed systems in-vivo by recording live executions then deterministically replaying and checking them later, including reordering the replayed execution as needed to detect races.  We have also developed techniques to ensure that applications use storage system APIs correctly without concurrency errors, such as data loss errors caused by a concurrent crash.  We have also generalized techniques we have developed for race detection which can be used in other ways to improve software reliability.  Technologies developed can help application developers detect insidious software defects, enabling more robust, reliable, and secure software infrastructure. \n\n \n\n \n\n\t\t\t\t\tLast Modified: 10/14/2017\n\n\t\t\t\t\tSubmitted by: Jason Nieh"
 }
}