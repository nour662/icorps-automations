{
 "awd_id": "1217501",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Capitalizing on First-Class SQL Support in the Ur/Web Programming Language",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2012-09-01",
 "awd_exp_date": "2016-08-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2012-08-28",
 "awd_max_amd_letter_date": "2012-08-28",
 "awd_abstract_narration": "The World Wide Web has become one of the most popular platforms for deploying rich software applications, and most Web applications include interfaces to persistent databases, many implemented with the SQL language. Mainstream programming techniques provide programmers with little help in construction of correct database interface code. As a result, many Web applications include serious security vulnerabilities that allow attackers to read others' private data, or even delete or corrupt it.  Furthermore, programmers expend substantial effort reimplementing similar functionality for each new application and its new data model.  This project studies programming tool support that can help solve both of these problems, based on a programming language and compiler that in a sense \"understand\" SQL database access.\r\n\r\nA connecting thread in the project's technical approach is real-world application of computer theorem proving technology. The programming language, Ur/Web, is based on dependent type theory, a language paradigm pioneered by interactive mathematical theorem proving tools. In the Web application context, type theory provides a unified framework for enforcing key program properties, such as invulnerability to code injection attacks and other common security problems. On top of this is built support for metaprogramming, or programs that generate programs, where the key security properties ought to be guaranteed for any code outputs of a metaprogram. One major thrust of the project is using metaprogramming to reify coding patterns as reusable libraries, dramatically reducing time and effort needed to construct a new application. The other major thrust is static program analysis, where symbolic execution and automated theorem proving are used to verify formally that Web applications conform to declarative security policies, covering information flow and access control. Metaprogramming will support component-based construction with module-local reasoning, while the static analysis ensures global consistency of programs from a security perspective.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Adam",
   "pi_last_name": "Chlipala",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Adam J Chlipala",
   "pi_email_addr": "adamc@csail.mit.edu",
   "nsf_id": "000610723",
   "pi_start_date": "2012-08-28",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394301",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project investigated new ways to take advantage of Ur/Web, a programming language specialized for building interactive Web sites (applications). &nbsp;In particular, Ur/Web is distinguished by more specialized features for accessing databases based on the popular SQL language. &nbsp;In a sense, the Ur/Web compiler \"understands\" how an application is using the database, where mainstream compilers and libraries lack any such understanding. &nbsp;As a result, the Ur/Web compiler can do a better job of checking programs for errors and making them run quickly.</p>\n<p>One key outcome is the Ur/Web People Organizer (UPO), a production-ready code library written in Ur/Web. &nbsp;With UPO, applications can be assembled quickly by combining standard concepts like message forums and polls, where these standard concepts nontheless need to be customized to the application in subtle ways. &nbsp;Such a concept exists as a first-class module in UPO, with a formal specification of the dimensions of customization and of what functionality is offered in return. &nbsp;These specifications are type signatures, thus making them relatively accessible to programmers.</p>\n<p>Another outcome is Sqlcache, a new compiler optimization that speeds up SQL-based Ur/Web programs without requiring any extra work by the programmer. &nbsp;From the same code that Ur/Web programmers would write anyway, Sqlcache infers opportunities to <em>cache</em>&nbsp;database results. &nbsp;That is, when a set of results is retrieved from the database, the program saves it in memory, so that the program can skip future executions of the same query. &nbsp;These caches are also used to save whole segments of generated web pages, some of which may depend on multiple different queries. &nbsp;The key challenge here is to also infer which <em>invalidations</em>&nbsp;are necessary: when the program makes database modifications, some of the old saved query results may no longer be up-to-date, so they must be removed from caches. &nbsp;The approach taken also scales to concurrent execution of Web applications, allowing many cache operations to execute simultaneously, in common workloads.</p>\n<p>On the side of practice, the project has produced several artifacts that are usable for real-world programming today. &nbsp;The Ur/Web compiler is available as open source, including in popular package systems for Linux and Macintosh platforms. &nbsp;It compares favorably to alternative tools in dimensions like performance of compiled Web applications, as shown by a third-party initiative called the TechEmpower Web Framework Benchmarks, where Ur/Web places a close second out of 194 tool combinations used for the marquee benchmark. &nbsp;The UPO framework is also available as open source and has been used for a number of production Web applications within MIT, with a total of about 500 users between them.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/30/2016<br>\n\t\t\t\t\tModified by: Adam&nbsp;J&nbsp;Chlipala</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project investigated new ways to take advantage of Ur/Web, a programming language specialized for building interactive Web sites (applications).  In particular, Ur/Web is distinguished by more specialized features for accessing databases based on the popular SQL language.  In a sense, the Ur/Web compiler \"understands\" how an application is using the database, where mainstream compilers and libraries lack any such understanding.  As a result, the Ur/Web compiler can do a better job of checking programs for errors and making them run quickly.\n\nOne key outcome is the Ur/Web People Organizer (UPO), a production-ready code library written in Ur/Web.  With UPO, applications can be assembled quickly by combining standard concepts like message forums and polls, where these standard concepts nontheless need to be customized to the application in subtle ways.  Such a concept exists as a first-class module in UPO, with a formal specification of the dimensions of customization and of what functionality is offered in return.  These specifications are type signatures, thus making them relatively accessible to programmers.\n\nAnother outcome is Sqlcache, a new compiler optimization that speeds up SQL-based Ur/Web programs without requiring any extra work by the programmer.  From the same code that Ur/Web programmers would write anyway, Sqlcache infers opportunities to cache database results.  That is, when a set of results is retrieved from the database, the program saves it in memory, so that the program can skip future executions of the same query.  These caches are also used to save whole segments of generated web pages, some of which may depend on multiple different queries.  The key challenge here is to also infer which invalidations are necessary: when the program makes database modifications, some of the old saved query results may no longer be up-to-date, so they must be removed from caches.  The approach taken also scales to concurrent execution of Web applications, allowing many cache operations to execute simultaneously, in common workloads.\n\nOn the side of practice, the project has produced several artifacts that are usable for real-world programming today.  The Ur/Web compiler is available as open source, including in popular package systems for Linux and Macintosh platforms.  It compares favorably to alternative tools in dimensions like performance of compiled Web applications, as shown by a third-party initiative called the TechEmpower Web Framework Benchmarks, where Ur/Web places a close second out of 194 tool combinations used for the marquee benchmark.  The UPO framework is also available as open source and has been used for a number of production Web applications within MIT, with a total of about 500 users between them.\n\n\t\t\t\t\tLast Modified: 11/30/2016\n\n\t\t\t\t\tSubmitted by: Adam J Chlipala"
 }
}