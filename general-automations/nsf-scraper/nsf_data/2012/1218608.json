{
 "awd_id": "1218608",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Design for Competitive Automated Layout (DCAL) of Mobile Application Processors",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Yuanyuan Yang",
 "awd_eff_date": "2012-08-01",
 "awd_exp_date": "2017-12-31",
 "tot_intn_awd_amt": 350000.0,
 "awd_amount": 350000.0,
 "awd_min_amd_letter_date": "2012-07-03",
 "awd_max_amd_letter_date": "2017-06-05",
 "awd_abstract_narration": "Smart phones, tablet computers, and other mobile devices are transforming the way people work, play, and interact. Their mobility, connection to the cloud, and integration of sensors, computation and communication have inspired unique applications unforeseen just a short time ago. The future holds even greater promise, as applications fuse diverse inputs to deliver new levels of situation awareness and embedded intelligence. To fuel this rapidly growing market, the processors that power mobile devices must be designed more quickly than processors in conventional computers, even as the complexity of mobile processors approaches that of desktop and server processors. Product development is accelerated by licensing hardware descriptions of the latest processors - called soft cores - from third parties, and integrating them with proprietary designs into an overall system-on-chip. Unfortunately, there is an additional step that erodes the productivity gains won by licensing soft cores. A soft core must be converted into a hard core, i.e., a circuit layout that can be fabricated in a semiconductor foundry. Producing a high-quality layout is a painstaking, manual process requiring niche expertise. Alternatively, automated synthesis and place-and-route (SPR) tools can be used, but they produce poor layouts with sub-par performance and power consumption.\r\n\r\nThis research combines the convenience of automated layout with the quality of manual layout. The key innovation is to not compromise on automation - SPR must be used - but rather to modify the design of mobile processors so that SPR is able to produce a quality layout on par with manual layout. That is, the mobile processor is designed with the knowledge that SPR is going to be used. This new paradigm is called Design for Competitive Automated Layout (DCAL). DCAL applies a novel regimen of design strategies at multiple levels that enables SPR to produce competitive layouts. A common theme across all levels is to restructure or eliminate sources of processor complexity that SPR handles poorly. (1) Circuit-level DCAL: Highly-ported memory structures traditionally require intense manual layout. Making matters worse, there are many of them in a modern processor. These are restructured to achieve quality layouts without manual effort. (2) Microarchitecture-level DCAL: The most challenging processor units are restructured so that aggressive circuit and layout optimizations for meeting timing closure are rendered unnecessary. (3) Core-level DCAL: Designing a single microarchitecture that performs well across arbitrary program phases is a significant source of complexity. Core-level DCAL divides program behaviors into useful classes and provides dedicated core designs for these classes; the cores are streamlined for the targeted behaviors, enabling SPR to produce quality physical designs. (4) ISA-level DCAL: For portability across many different processors, mobile device software is often distributed using a virtual instruction-set-architecture (ISA) that does not correspond to any particular processor ISA. The prerequisite for translating the virtual ISA into a processor ISA on-the-fly opens the door to improvising on the processor's ISA for one or multiple core types, with the aim of further streamlining cores for SPR to generate quality physical designs.\r\n\r\nThe economic and societal benefits of DCAL are tangible. Automation accelerates innovation by allowing companies to focus more on developing richer user experiences and less on low-level technology that makes it all possible. Moreover, automation puts this technology into the hands of more people, including folks without niche expertise and small nimble design teams. Both companies and everyday users profit from the fact that more innovative products are being delivered to market sooner.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Eric",
   "pi_last_name": "Rotenberg",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Eric Rotenberg",
   "pi_email_addr": "ericro@ncsu.edu",
   "nsf_id": "000340411",
   "pi_start_date": "2012-07-03",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "North Carolina State University",
  "inst_street_address": "2601 WOLF VILLAGE WAY",
  "inst_street_address_2": "",
  "inst_city_name": "RALEIGH",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9195152444",
  "inst_zip_code": "276950001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "NC02",
  "org_lgl_bus_name": "NORTH CAROLINA STATE UNIVERSITY",
  "org_prnt_uei_num": "U3NVH931QJJ3",
  "org_uei_num": "U3NVH931QJJ3"
 },
 "perf_inst": {
  "perf_inst_name": "North Carolina State University",
  "perf_str_addr": "Box 7911",
  "perf_city_name": "Raleigh",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "276957911",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "NC02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7941",
   "pgm_ref_txt": "COMPUTER ARCHITECTURE"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 350000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>At a high level, designing a computer&rsquo;s central processing unit (CPU) is a two-step process. The first step is to conceive the CPU&rsquo;s overall microarchitecture &ndash; the major units and their connections &ndash; and describe the microarchitecture using a hardware description language. The second step is to map the microarchitecture&rsquo;s description into logic gates, then transistors and wires, and ultimately a &ldquo;layout&rdquo; or literal drawing of all the shapes across many physical layers that make up the transistors and wires, in a particular semiconductor technology. This final layout is the blueprint used by a semiconductor foundry to fabricate the CPU chip. Altogether, the many sub-steps comprising the second step is referred to as &ldquo;physical design&rdquo; because it involves translating the microarchitecture&rsquo;s description into a blueprint for physical implementation.</p>\n<p>Many tools exist to help automate the physical design step, but the best physical designs typically require manual intervention. Thus, physical design can range from no automation to full automation, with a trade-off between physical design effort and physical design quality.&nbsp; Our findings indicate that manual physical design tuning has a 2x to 3x advantage over fully automated synthesis and layout of CPUs, but aggressive tuning is too labor-intensive and prone to reliability problems moving forward.</p>\n<p>The goal of this project is to bridge the gap between manual and automated physical design of CPUs, using a regimen of physical-design-aware strategies called \"Design for Competitive Automated Layout\" or DCAL. Below is a summary of concepts, findings, and technologies developed in the course of this project.</p>\n<p><strong>&ldquo;A Case for Standard-Cell Based RAMs in Highly-Ported Superscalar Processor Structures&rdquo;</strong><br /> <br /> Highly-ported memories are pervasive within superscalar processors. Accordingly, they have been targets for full-custom design using multi-ported versions of the 6T SRAM bitcell. Unfortunately, full-custom design of highly-ported memories is becoming exceedingly difficult in deep sub-micron technologies. This paper makes the case for implementing highly-ported memories with standard cells (flip-flops, muxes, clock buffers). In lieu of exotic peripheral circuits for each port, standard-cell SRAMs use muxes. Consequently, area differences between full-custom and standard-cell designs are greatly reduced at a high number of ports. To also compete with full-custom memories in terms of timing and power, we introduce a standard-cell memory compiler with three key features: (i) per-row clock gating, (ii) a new tri-state based mux standard cell, and (iii) a modular layout strategy, which is the centerpiece of the memory compiler. For a 16-read/8-write 128-entry register file, our modular standard-cell memory consumes 13% more area and 4% more power, and is 35% faster, than the custom memory produced by FabMem. The automatic (built-in) robustness of standard cell designs further weigh in their favor, contrasted with exquisite transistor sizing/tuning of intertwined sub-circuits in a full-custom design.<strong></strong></p>\n<p><br /> <strong>&ldquo;</strong><strong>Design-Effort Alloy: Boosting a Highly Tuned Primary Core with Untuned Alternate Cores&rdquo;</strong><br /> <br /> We invented a new class of single-ISA heterogeneous multi-core processor, called Design-Effort Alloy (DEA).&nbsp; The key idea is to augment a flagship full-custom superscalar core (high-effort physical design) with multiple microarchitecturally diverse synthesized cores (low-effort physical design).&nbsp; The synthesized cores' diverse microarchitectures accelerate outlier program phases at low non-recurring engineering (NRE) cost owing to their fully-automated approach to physical design.</p>\n<p>Our evaluation of a DEA processor comprised of one high-effort core type (HEC) and three low-effort core types (LEC) yielded the following key findings:<br /> <br /> 1. The DEA processor's HEC is the same core type in the best high-effort homogeneous multi-core, owing to most program phases demonstrating \"average\" instruction-level behavior and favoring this balanced core.<br /> <br /> 2. The DEA processor yields a speedup in BIPS<sup>3</sup>/W of 1%-87%, and a geometric-mean speedup of 25%, on 20 out of 179 benchmark phases over the best high-effort homogeneous multi-core (hence, over the HEC). Moreover, 9 of these 20 benchmark phases actually run faster on the LECs (speedup in BIPS, owing to microarchitectures adapted for memory latency tolerance and memory level parallelism). Thus, untuned LECs operating at less than half the frequency of the HEC nonetheless accelerate program phases with \"outlier\" instruction-level behavior.<br /> <br /></p>\n<p><strong>&ldquo;A Profitable Fully-Synthesized Trace Processor&rdquo;</strong><br /> <br /> We revisited the Trace Processor [Rotenberg, et al., MICRO-30, 1997] as a microarchitecture amenable to automated layout. Its large hierarchical window -- replicated superscalar processing elements (PEs), hierarchical physical register file (per-PE local register files, replicated global register file), local and global bypasses, etc. -- provide a starting point for modular, hence efficient, automated layout.&nbsp; Novel trace selection policies and global register communication policies are some of the key to-be-disclosed technologies that facilitate a trace processor featuring high instructions-per-cycle (IPC), high frequency, and low physical design effort.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/03/2018<br>\n\t\t\t\t\tModified by: Eric&nbsp;Rotenberg</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2018/1218608/1218608_10186866_1522776967523_DCAL-image-1--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2018/1218608/1218608_10186866_1522776967523_DCAL-image-1--rgov-800width.jpg\" title=\"circuit-level DCAL\"><img src=\"/por/images/Reports/POR/2018/1218608/1218608_10186866_1522776967523_DCAL-image-1--rgov-66x44.jpg\" alt=\"circuit-level DCAL\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Tool for auto-generating  standard-cell based RAMs for use as highly-ported superscalar processor structures.</div>\n<div class=\"imageCredit\">Sungkwan Ku and Eric Rotenberg</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Eric&nbsp;Rotenberg</div>\n<div class=\"imageTitle\">circuit-level DCAL</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2018/1218608/1218608_10186866_1522777179047_DCAL-image-2--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2018/1218608/1218608_10186866_1522777179047_DCAL-image-2--rgov-800width.jpg\" title=\"microarchitecture-level DCAL\"><img src=\"/por/images/Reports/POR/2018/1218608/1218608_10186866_1522777179047_DCAL-image-2--rgov-66x44.jpg\" alt=\"microarchitecture-level DCAL\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Auto-generated, efficient layout of a clustered microarchitecture.</div>\n<div class=\"imageCredit\">Sungkwan Ku and Eric Rotenberg</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Eric&nbsp;Rotenberg</div>\n<div class=\"imageTitle\">microarchitecture-level DCAL</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nAt a high level, designing a computer?s central processing unit (CPU) is a two-step process. The first step is to conceive the CPU?s overall microarchitecture &ndash; the major units and their connections &ndash; and describe the microarchitecture using a hardware description language. The second step is to map the microarchitecture?s description into logic gates, then transistors and wires, and ultimately a \"layout\" or literal drawing of all the shapes across many physical layers that make up the transistors and wires, in a particular semiconductor technology. This final layout is the blueprint used by a semiconductor foundry to fabricate the CPU chip. Altogether, the many sub-steps comprising the second step is referred to as \"physical design\" because it involves translating the microarchitecture?s description into a blueprint for physical implementation.\n\nMany tools exist to help automate the physical design step, but the best physical designs typically require manual intervention. Thus, physical design can range from no automation to full automation, with a trade-off between physical design effort and physical design quality.  Our findings indicate that manual physical design tuning has a 2x to 3x advantage over fully automated synthesis and layout of CPUs, but aggressive tuning is too labor-intensive and prone to reliability problems moving forward.\n\nThe goal of this project is to bridge the gap between manual and automated physical design of CPUs, using a regimen of physical-design-aware strategies called \"Design for Competitive Automated Layout\" or DCAL. Below is a summary of concepts, findings, and technologies developed in the course of this project.\n\n\"A Case for Standard-Cell Based RAMs in Highly-Ported Superscalar Processor Structures\"\n \n Highly-ported memories are pervasive within superscalar processors. Accordingly, they have been targets for full-custom design using multi-ported versions of the 6T SRAM bitcell. Unfortunately, full-custom design of highly-ported memories is becoming exceedingly difficult in deep sub-micron technologies. This paper makes the case for implementing highly-ported memories with standard cells (flip-flops, muxes, clock buffers). In lieu of exotic peripheral circuits for each port, standard-cell SRAMs use muxes. Consequently, area differences between full-custom and standard-cell designs are greatly reduced at a high number of ports. To also compete with full-custom memories in terms of timing and power, we introduce a standard-cell memory compiler with three key features: (i) per-row clock gating, (ii) a new tri-state based mux standard cell, and (iii) a modular layout strategy, which is the centerpiece of the memory compiler. For a 16-read/8-write 128-entry register file, our modular standard-cell memory consumes 13% more area and 4% more power, and is 35% faster, than the custom memory produced by FabMem. The automatic (built-in) robustness of standard cell designs further weigh in their favor, contrasted with exquisite transistor sizing/tuning of intertwined sub-circuits in a full-custom design.\n\n\n \"Design-Effort Alloy: Boosting a Highly Tuned Primary Core with Untuned Alternate Cores\"\n \n We invented a new class of single-ISA heterogeneous multi-core processor, called Design-Effort Alloy (DEA).  The key idea is to augment a flagship full-custom superscalar core (high-effort physical design) with multiple microarchitecturally diverse synthesized cores (low-effort physical design).  The synthesized cores' diverse microarchitectures accelerate outlier program phases at low non-recurring engineering (NRE) cost owing to their fully-automated approach to physical design.\n\nOur evaluation of a DEA processor comprised of one high-effort core type (HEC) and three low-effort core types (LEC) yielded the following key findings:\n \n 1. The DEA processor's HEC is the same core type in the best high-effort homogeneous multi-core, owing to most program phases demonstrating \"average\" instruction-level behavior and favoring this balanced core.\n \n 2. The DEA processor yields a speedup in BIPS3/W of 1%-87%, and a geometric-mean speedup of 25%, on 20 out of 179 benchmark phases over the best high-effort homogeneous multi-core (hence, over the HEC). Moreover, 9 of these 20 benchmark phases actually run faster on the LECs (speedup in BIPS, owing to microarchitectures adapted for memory latency tolerance and memory level parallelism). Thus, untuned LECs operating at less than half the frequency of the HEC nonetheless accelerate program phases with \"outlier\" instruction-level behavior.\n \n\n\n\"A Profitable Fully-Synthesized Trace Processor\"\n \n We revisited the Trace Processor [Rotenberg, et al., MICRO-30, 1997] as a microarchitecture amenable to automated layout. Its large hierarchical window -- replicated superscalar processing elements (PEs), hierarchical physical register file (per-PE local register files, replicated global register file), local and global bypasses, etc. -- provide a starting point for modular, hence efficient, automated layout.  Novel trace selection policies and global register communication policies are some of the key to-be-disclosed technologies that facilitate a trace processor featuring high instructions-per-cycle (IPC), high frequency, and low physical design effort.\n\n\t\t\t\t\tLast Modified: 04/03/2018\n\n\t\t\t\t\tSubmitted by: Eric Rotenberg"
 }
}