{
 "awd_id": "1217700",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Expressive and Scalable Notifications for Program Analysis Tools",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2012-10-01",
 "awd_exp_date": "2016-12-31",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2012-09-06",
 "awd_max_amd_letter_date": "2016-06-17",
 "awd_abstract_narration": "Software developers create the software that society increasingly relies on, and in turn software developers rely on program analysis tools to help them create that software. A wide variety of program analysis tools have been created to help software developers do their jobs, yet the output of these tools are often difficult to understand and vary significantly from tool to tool. As a result, software developers may waste time trying to interpret the output of these tools, instead of making their software more capable and reliable.\r\n\r\nThe goals of this project are (1) to understand how expressiveness and scalability can be increased in and across program analysis tools and (2) to understand how increased expressiveness and scalability affects developers' effectiveness and efficiency in creating and maintaining software. To reach these goals, the project will study three different types of program analysis tools, investigate the similarities and differences between these tools, describe how expressiveness and uniformity can be increased, and finally evaluate tools created with enhanced expressiveness and uniformity in mind. There are three outcomes of this project: (1) design guidelines to help tool makers create better program analysis tools, (2) tool implementations that illustrate how the guidelines can be fulfilled, and (3) empirical results that demonstrate the extent to which and the context in which program analysis tools implemented with the guidelines yield positive outcomes. Once these goals are reached, we can create program analysis tools that enable developers to make tremendous strides towards more correct, more reliable, and more on-time software systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Emerson",
   "pi_last_name": "Murphy-Hill",
   "pi_mid_init": "R",
   "pi_sufx_name": "",
   "pi_full_name": "Emerson R Murphy-Hill",
   "pi_email_addr": "emerson@csc.ncsu.edu",
   "nsf_id": "000578912",
   "pi_start_date": "2012-09-06",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Sarah",
   "pi_last_name": "Heckman",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sarah Heckman",
   "pi_email_addr": "Sarah_Heckman@ncsu.edu",
   "nsf_id": "000605432",
   "pi_start_date": "2012-09-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "North Carolina State University",
  "inst_street_address": "2601 WOLF VILLAGE WAY",
  "inst_street_address_2": "",
  "inst_city_name": "RALEIGH",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9195152444",
  "inst_zip_code": "276950001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "NC02",
  "org_lgl_bus_name": "NORTH CAROLINA STATE UNIVERSITY",
  "org_prnt_uei_num": "U3NVH931QJJ3",
  "org_uei_num": "U3NVH931QJJ3"
 },
 "perf_inst": {
  "perf_inst_name": "North Carolina State University",
  "perf_str_addr": "Campus Box 8206",
  "perf_city_name": "Raleigh",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "276958206",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "NC02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 250000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project investigated how software developers understand the output of program analysis tools, tools that are increasingly used in industry-leading software companies such as Microsoft and Facebook. Unfortunately, despite the significant potential of these tools, this project found that developers can deliberately and inadvertently disuse these tools for a variety of reasons. Primary findings include:</p>\n<p>* In collaboration with Google, our interviews with processional developers found that these tools are sometimes insufficiently usable, inhibit collaboration, and are not sufficiently customizable.</p>\n<p>* In another collaboration with Google, in interactive sessions with developers with a variety of experience, we found that the challenges developers encounter when interpreting program analysis tool notifications are caused by gaps and mismatches between developers&rsquo; programming knowledge, based on their individual experiences, and methods used by notifications to communicate information about developers&rsquo; source code.</p>\n<p>* Developers read the output of program analysis notifications, but the notifications themselves tend to focus developers' efforts to address those notifications in suboptimal ways.</p>\n<p>These findings were peer reviewed and presented at the top publication venues for software engineering. Additionally, we proposed some novel ways of addressing these problems with program analysis tools, including automatically adapting the output of program analysis tools to the software developer looking at them. In sum, we ancitipate that our findings will help toolsmiths create a new generation of developer-friendly program analysis tools, which will yield software that will better meet the needs of its users.</p>\n<p>Broader impacts include conducting week-long workshops with middle and high school students in app development, inclusion of undergraduates in the research process, and talks aimed at underrepresented groups in computer science. The grant also supported an underrepresented minority during her PhD studies.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/04/2017<br>\n\t\t\t\t\tModified by: Emerson&nbsp;R&nbsp;Murphy-Hill</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project investigated how software developers understand the output of program analysis tools, tools that are increasingly used in industry-leading software companies such as Microsoft and Facebook. Unfortunately, despite the significant potential of these tools, this project found that developers can deliberately and inadvertently disuse these tools for a variety of reasons. Primary findings include:\n\n* In collaboration with Google, our interviews with processional developers found that these tools are sometimes insufficiently usable, inhibit collaboration, and are not sufficiently customizable.\n\n* In another collaboration with Google, in interactive sessions with developers with a variety of experience, we found that the challenges developers encounter when interpreting program analysis tool notifications are caused by gaps and mismatches between developers? programming knowledge, based on their individual experiences, and methods used by notifications to communicate information about developers? source code.\n\n* Developers read the output of program analysis notifications, but the notifications themselves tend to focus developers' efforts to address those notifications in suboptimal ways.\n\nThese findings were peer reviewed and presented at the top publication venues for software engineering. Additionally, we proposed some novel ways of addressing these problems with program analysis tools, including automatically adapting the output of program analysis tools to the software developer looking at them. In sum, we ancitipate that our findings will help toolsmiths create a new generation of developer-friendly program analysis tools, which will yield software that will better meet the needs of its users.\n\nBroader impacts include conducting week-long workshops with middle and high school students in app development, inclusion of undergraduates in the research process, and talks aimed at underrepresented groups in computer science. The grant also supported an underrepresented minority during her PhD studies.\n\n\t\t\t\t\tLast Modified: 02/04/2017\n\n\t\t\t\t\tSubmitted by: Emerson R Murphy-Hill"
 }
}