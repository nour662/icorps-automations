{
 "awd_id": "1139056",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "Collaborative Research: Expeditions in Computer Augmented Program Engineering (ExCAPE): Harnessing Synthesis for Software Design",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2012-04-01",
 "awd_exp_date": "2017-03-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2012-04-02",
 "awd_max_amd_letter_date": "2015-09-03",
 "awd_abstract_narration": "ExCAPE: Expeditions in Computer Augmented Program Engineering\r\nLead PI/Institution: Rajeev Alur, University of Pennsylvania\r\n\r\nComputers have revolutionized our daily lives, and yet the way we program computers has changed little in the last several decades. Software development still remains a tedious and error-prone activity. ExCAPE aims to change programming from a purely manual task to one in which a programmer and an automated program synthesis tool collaborate to generate software that meets its specification. \r\n\r\nA distinguishing feature of the ExCAPE approach is that the program description can involve a wide range of artifacts that are best-suited to the particular development task: incomplete programs; declarative specifications of high-level requirements; positive and negative examples of desired behaviors; and optimization criteria for selecting among alternative implementations. This diversity is aimed at allowing a programmer flexibility to express insights through a variety of formats, leading to a more intuitive and less error-prone way of programming.\r\n\r\nThe synthesis tool uses a range of computational approaches and developer interaction to compose these different views about the structure and functionality of the system into a unified, concrete implementation. The computational techniques include decision procedures for constraint-satisfaction problems; iterative schemes for abstraction and refinement; and data-driven learning. The methodology for programmer interaction moves verification from the back-end of the design cycle to the front-end, with the promise of a more reliable software product.\r\n\r\nTo develop the theory and practice of the proposed paradigm, the ExCAPE team brings together expertise in theoretical foundations (computer-aided verification, control theory, program analysis), design methodology (human-computer interaction, model-based design, programming environments), and applications (concurrent programming, network protocols, robotics, system architecture). Research will focus on developing new computational engines for transformation and integration of synthesis artifacts, and effective methods for programmer interaction and feedback. \r\n\r\nWhile the benefits of the ExCAPE approach will apply broadly to software development, the ExCAPE team will focus its efforts by initially targeting four challenge problems: developing efficient concurrent data structures; developing protocols for on-chip interconnection networks; developing distributed routing network protocols; and end-user programming for autonomous robots. The ExCAPE approach will be a radical departure from the way these problems are solved today. For example, for the challenge problem on concurrent programming, the planned design tool will provide smart assistance for expert programmers to produce efficient and correct code, while the proposed tool for the robotics challenge problem will let end users program robots by demonstrating example behaviors. As ExCAPE aims to affect industrial practice, design tools for all four challenge problems will be developed and evaluated in close collaboration with industrial partners.\r\n\r\nThe technology developed by ExCAPE also has the potential to revolutionize the way computing concepts are taught. Building on the core technology used in program synthesis, the ExCAPE team plans to develop smart tutoring software that can analyze students? answers for conceptual errors and generate additional problems tailored to that student.. This tutoring software will be developed for representative high-school and undergraduate courses and will be made widely available. This outreach effort is aimed at attracting more students to computing disciplines by promoting a new and more appealing vision of what it means to program. ExCAPE will also nurture an inter-disciplinary community of researchers in computer-augmented programming, via an annual workshop, a biannual summer school, and a competition for synthesis tools, with associated challenge problems and benchmarks.\r\n\r\nFor more information visit http://excape.cis.upenn.edu",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Armando",
   "pi_last_name": "Solar-Lezama",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Armando Solar-Lezama",
   "pi_email_addr": "asolar@csail.mit.edu",
   "nsf_id": "000541631",
   "pi_start_date": "2012-04-02",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394301",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "164000",
   "pgm_ele_name": "Information Technology Researc"
  },
  {
   "pgm_ele_code": "772300",
   "pgm_ele_name": "Expeditions in Computing"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7723",
   "pgm_ref_txt": "EXPERIMENTAL EXPEDITIONS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 158220.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 100000.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 200000.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 41780.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The ExCape project proposed a novel approach to software design&mdash;<em>computer augmented program engineering</em>&mdash;in which a programmer and an automated synthesis tool collaborate to generate software that meets its specification. The core technical contribution behind this new approach to software design was a set of new techniques for program synthesis capable of exploring large spaces of possibilities for how to write a given piece of code in order to find one that satisfies a set of requirements. In addition to advancing the state of the art for synthesis algorithms, the project explored ways of leveraging these synthesis algorithms for a variety of programming tasks, and achieving an optimal division of labor between the synthesis algorithm and the human user who drives the synthesis process.</p>\n<p>One of the major outcomes of the project was to demonstrate the use of program synthesis technology for a number of tasks that go beyond simply writing code from scratch to solve a particular problem. For example, a major application thrust that emerged as part of this project was <em>Computer Aided Personalized Education</em>. The key observation behind this thrust was that program synthesis could be used to solve the problem of automatically providing a student with detailed feedback on why a solution to an assignment is wrong. Excape demonstrated this for several different classes of assignments, from introductory programming assignments to assignments from automata theory.</p>\n<p>Another exciting application of synthesis that was pioneered as part of this project was the use of synthesis to understand existing pieces of software, either for analysis purposes, or to enable optimization. For example, one of the major challenges in static analysis is that most modern programs are built on top of complex object-oriented frameworks that are too complex to analyze. The way people get around this problem is by carefully writing models of these frameworks that capture their essential properties, but without all the complexity. The ExCape project showed that synthesis could be used to generate these models automatically, significantly reducing the manual effort required to run static analysis tools on Android applications, for example. The ability of synthesis to generate a high-level representation of a low-level piece of software was also leveraged in another set of experiments that showed that this kind of Lifting could enable aggressive domain specific optimization of existing applications. This was a use of synthesis that we did not foresee before the start of the project but which has proven to be very impactful.</p>\n<p>Another exciting development was the integration of type-based verification techniques and synthesis engines. This made it possible to synthesize for the first time provably correct implementations of complex algorithms that had hitherto proven too difficult to synthesize. The Synquid system for example, enabled a new form of synthesis where the user provides a set of components whose specifications are given using an expressive type system, and Synquid discovers how to assemble them to satisfy a high-level specification. The technology has even been expanded to automatically repair functional programs to make them satisfy expressive information flow policies that can prevent dangerous data breaches in an application.</p>\n<p>ExCape was a large multi-disciplinary effort involving multiple institutions; this is only a sample of the many innovations that were made as part of this project, focusing on those where MIT played a role. Another big accomplishment of the project was the development of a research community around program synthesis. This included a community effort to develop the SyGuS format for expressing synthesis problems, but most importantly, the training of graduate students and postdocs in this new area of research. MIT alumni who were involved in some capacity on this project include graduate students Alvin Cheung (now faculty at UW), Jean Yang (now faculty at CMU), Rishabh Singh (now researcher at Microsoft Research), and postdocs Xiaokang Qiu (now faculty at Purdue), Nadia Polikarpova (now faculty at UCSD) and Shachar Itzhaki (now faculty at Technion in Israel). Finally, the project was able to push synthesis technology to the point where it is now of some commercial interest. We are currently engaged with Toyota through an InTrans effort to explore applications of ExCape &nbsp;technology to help make self-driving cars safe.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/27/2017<br>\n\t\t\t\t\tModified by: Armando&nbsp;Solar-Lezama</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe ExCape project proposed a novel approach to software design&mdash;computer augmented program engineering&mdash;in which a programmer and an automated synthesis tool collaborate to generate software that meets its specification. The core technical contribution behind this new approach to software design was a set of new techniques for program synthesis capable of exploring large spaces of possibilities for how to write a given piece of code in order to find one that satisfies a set of requirements. In addition to advancing the state of the art for synthesis algorithms, the project explored ways of leveraging these synthesis algorithms for a variety of programming tasks, and achieving an optimal division of labor between the synthesis algorithm and the human user who drives the synthesis process.\n\nOne of the major outcomes of the project was to demonstrate the use of program synthesis technology for a number of tasks that go beyond simply writing code from scratch to solve a particular problem. For example, a major application thrust that emerged as part of this project was Computer Aided Personalized Education. The key observation behind this thrust was that program synthesis could be used to solve the problem of automatically providing a student with detailed feedback on why a solution to an assignment is wrong. Excape demonstrated this for several different classes of assignments, from introductory programming assignments to assignments from automata theory.\n\nAnother exciting application of synthesis that was pioneered as part of this project was the use of synthesis to understand existing pieces of software, either for analysis purposes, or to enable optimization. For example, one of the major challenges in static analysis is that most modern programs are built on top of complex object-oriented frameworks that are too complex to analyze. The way people get around this problem is by carefully writing models of these frameworks that capture their essential properties, but without all the complexity. The ExCape project showed that synthesis could be used to generate these models automatically, significantly reducing the manual effort required to run static analysis tools on Android applications, for example. The ability of synthesis to generate a high-level representation of a low-level piece of software was also leveraged in another set of experiments that showed that this kind of Lifting could enable aggressive domain specific optimization of existing applications. This was a use of synthesis that we did not foresee before the start of the project but which has proven to be very impactful.\n\nAnother exciting development was the integration of type-based verification techniques and synthesis engines. This made it possible to synthesize for the first time provably correct implementations of complex algorithms that had hitherto proven too difficult to synthesize. The Synquid system for example, enabled a new form of synthesis where the user provides a set of components whose specifications are given using an expressive type system, and Synquid discovers how to assemble them to satisfy a high-level specification. The technology has even been expanded to automatically repair functional programs to make them satisfy expressive information flow policies that can prevent dangerous data breaches in an application.\n\nExCape was a large multi-disciplinary effort involving multiple institutions; this is only a sample of the many innovations that were made as part of this project, focusing on those where MIT played a role. Another big accomplishment of the project was the development of a research community around program synthesis. This included a community effort to develop the SyGuS format for expressing synthesis problems, but most importantly, the training of graduate students and postdocs in this new area of research. MIT alumni who were involved in some capacity on this project include graduate students Alvin Cheung (now faculty at UW), Jean Yang (now faculty at CMU), Rishabh Singh (now researcher at Microsoft Research), and postdocs Xiaokang Qiu (now faculty at Purdue), Nadia Polikarpova (now faculty at UCSD) and Shachar Itzhaki (now faculty at Technion in Israel). Finally, the project was able to push synthesis technology to the point where it is now of some commercial interest. We are currently engaged with Toyota through an InTrans effort to explore applications of ExCape  technology to help make self-driving cars safe.\n\n\t\t\t\t\tLast Modified: 08/27/2017\n\n\t\t\t\t\tSubmitted by: Armando Solar-Lezama"
 }
}