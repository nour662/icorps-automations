{
 "awd_id": "1217503",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: CCF: SHF:  Mining the Execution History of a Software System to Infer the Safe Time for its Adaptation",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2012-02-01",
 "awd_exp_date": "2014-01-31",
 "tot_intn_awd_amt": 80000.0,
 "awd_amount": 80000.0,
 "awd_min_amd_letter_date": "2012-01-06",
 "awd_max_amd_letter_date": "2012-01-06",
 "awd_abstract_narration": "As software engineers have developed new techniques to address the complexity associated with the construction of modern-day software systems, an equally pressing need has risen for mechanisms that automate and simplify the management of those systems after they are deployed, i.e., during runtime. This has called for the development of (self-)adaptive software systems, which are capable of modifying their behavior at runtime to achieve certain functional or quality of service objectives. The proposed research aims to develop an alternative approach to engineering adaptive software that uses a data mining approach to automatically derive models expressing probabilistic dependencies among the components of a system. These types of models are then used to ensure changes in the running software do not create inconsistencies that jeopardize the system?s functionality. The hypothesis guiding this research is that by monitoring a software system?s execution history (e.g., message exchange, method invocation) for a sufficiently long period of time, it is possible to infer a relatively accurate model of interactions and dependencies among the system?s components. The proposed approach will be realized via a suite of integrated tools. The research will be evaluated in both controlled laboratory setting, as well as several real-world applications that are representative of the kinds of systems that could benefit from this research.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Sam",
   "pi_last_name": "Malek",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sam Malek",
   "pi_email_addr": "malek@uci.edu",
   "nsf_id": "000488088",
   "pi_start_date": "2012-01-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "George Mason University",
  "inst_street_address": "4400 UNIVERSITY DR",
  "inst_street_address_2": "",
  "inst_city_name": "FAIRFAX",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "7039932295",
  "inst_zip_code": "220304422",
  "inst_country_name": "United States",
  "cong_dist_code": "11",
  "st_cong_dist_code": "VA11",
  "org_lgl_bus_name": "GEORGE MASON UNIVERSITY",
  "org_prnt_uei_num": "H4NRWLFCDF43",
  "org_uei_num": "EADLFP7Z72E5"
 },
 "perf_inst": {
  "perf_inst_name": "George Mason University",
  "perf_str_addr": "4400 University Drive",
  "perf_city_name": "Fairfax",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "220304422",
  "perf_ctry_code": "US",
  "perf_cong_dist": "11",
  "perf_st_cong_dist": "VA11",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 80000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Modern software systems are expected to dynamically adapt their behavior in response to changing conditions in the computation infrastructure as well as the surrounding physical environment. Society as a whole is increasingly dependent on such software. Two important problems in dynamic adaptation of software are (1) how to prevent failure of the software during adaptation, and (2) how to reduce disruptions in the functionalities provisioned by the software. This research project devised a novel technique for dealing with these problems by automatically determining when is the best time for making changes to a running software system. The principles emerging from this research provided the foundation for a new method of engineering dynamically adaptive software. The results of the research were incorporated into a graduate level course to help transition the technology to the next generation of software professionals. In addition, the approach was realized via a suite of open source tools to pave the way for transitioning the research results to the industry, as well as helping the scientific community to build on the outcome of this research effort.</p>\n<p>The project a developed a new approach of engineering adaptive software that is drastically different from all prior known solutions, which assumed the availability of detailed software component dependency models. The research resulted in a novel technique that solves the dynamic software adaptation problem in settings where such models are either not available, difficult to build, or outdated due to the evolution of the software. The hypothesis guiding this research was that by monitoring a software system&rsquo;s execution history (e.g., message exchanges, method invocations) for a sufficiently long period of time, it is possible to mine an accurate model of interactions and dependencies among the system&rsquo;s components. The research confirmed that it is indeed possible to infer very accurate models this way, and moreover how models inferred in this way can be used to (1) ensure changes in the running software do not create inconsistencies that could jeopardize the system&rsquo;s functionality, (2) control the level of disruption incurred in system&rsquo;s operations due to adaptation, and (3) automatically adjust the models to changing dependencies among the potentially evolving software components.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/22/2014<br>\n\t\t\t\t\tModified by: Sam&nbsp;Malek</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nModern software systems are expected to dynamically adapt their behavior in response to changing conditions in the computation infrastructure as well as the surrounding physical environment. Society as a whole is increasingly dependent on such software. Two important problems in dynamic adaptation of software are (1) how to prevent failure of the software during adaptation, and (2) how to reduce disruptions in the functionalities provisioned by the software. This research project devised a novel technique for dealing with these problems by automatically determining when is the best time for making changes to a running software system. The principles emerging from this research provided the foundation for a new method of engineering dynamically adaptive software. The results of the research were incorporated into a graduate level course to help transition the technology to the next generation of software professionals. In addition, the approach was realized via a suite of open source tools to pave the way for transitioning the research results to the industry, as well as helping the scientific community to build on the outcome of this research effort.\n\nThe project a developed a new approach of engineering adaptive software that is drastically different from all prior known solutions, which assumed the availability of detailed software component dependency models. The research resulted in a novel technique that solves the dynamic software adaptation problem in settings where such models are either not available, difficult to build, or outdated due to the evolution of the software. The hypothesis guiding this research was that by monitoring a software system\u00c6s execution history (e.g., message exchanges, method invocations) for a sufficiently long period of time, it is possible to mine an accurate model of interactions and dependencies among the system\u00c6s components. The research confirmed that it is indeed possible to infer very accurate models this way, and moreover how models inferred in this way can be used to (1) ensure changes in the running software do not create inconsistencies that could jeopardize the system\u00c6s functionality, (2) control the level of disruption incurred in system\u00c6s operations due to adaptation, and (3) automatically adjust the models to changing dependencies among the potentially evolving software components.\n\n \n\n\t\t\t\t\tLast Modified: 04/22/2014\n\n\t\t\t\t\tSubmitted by: Sam Malek"
 }
}