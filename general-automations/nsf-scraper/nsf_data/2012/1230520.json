{
 "awd_id": "1230520",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "I/UCRC:  Software Analytics",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Dmitri Perkins",
 "awd_eff_date": "2012-07-01",
 "awd_exp_date": "2016-06-30",
 "tot_intn_awd_amt": 197997.0,
 "awd_amount": 197997.0,
 "awd_min_amd_letter_date": "2012-06-27",
 "awd_max_amd_letter_date": "2012-06-27",
 "awd_abstract_narration": "The proposed work seeks to apply data analytics to the software development process. An analytic is typically data analysis that changes the behavior of an organization. Application of data analytics to software engineering is relatively new and limited.  The proposed research plans to use five significant software technologies, each of which has been shown to have a positive impact on the software process and product, to identify and quantify software development patterns whose analysis will be used to better understand and improve the software development process.\r\n\r\nThe outcomes of the proposed work have the potential for significant impact the software design and engineering process. The resulting analytics have the potential to greatly improve the ability to assess quality, predict reliability, diagnose problems, discern impending faults and identify maintenance procedures in real time. The work is supported by the Industry Advisory Board as well as individual industry members of the center and has the potential to extend the centers portfolio through expansion into the relatively new software analytics area. The center will involve graduate students and undergraduates in the work, publish and incorporate the results in existing coursework software engineering.\r\n",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Wayne",
   "pi_last_name": "Zage",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Wayne M Zage",
   "pi_email_addr": "wmzage@bsu.edu",
   "nsf_id": "000312470",
   "pi_start_date": "2012-06-27",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Dolores",
   "pi_last_name": "Zage",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Dolores M Zage",
   "pi_email_addr": "dzage@gw.bsu.edu",
   "nsf_id": "000303616",
   "pi_start_date": "2012-06-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Ball State University",
  "inst_street_address": "2000 W UNIVERSITY AVE",
  "inst_street_address_2": "",
  "inst_city_name": "MUNCIE",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "7652851600",
  "inst_zip_code": "473061099",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "IN05",
  "org_lgl_bus_name": "BALL STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "KDP6QKY6QLM1"
 },
 "perf_inst": {
  "perf_inst_name": "Ball State University",
  "perf_str_addr": "2000 W. University Ave",
  "perf_city_name": "Muncie",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "473061022",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "IN05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "576100",
   "pgm_ele_name": "IUCRC-Indust-Univ Coop Res Ctr"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7609",
   "pgm_ref_txt": "IUCRC FUNDAMENTAL RESEARCH"
  },
  {
   "pgm_ref_code": "8039",
   "pgm_ref_txt": "Information, Communication & Computing"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 197997.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>During software development, valuable measurement information is created that can be a powerful resource to monitor software development and security-related activities.&nbsp; Software engineers struggle every day to make sense of data.&nbsp; Many software attributes, such as complexity, are never easy to state or understand by a single number. Without the ability to examine data from multiple perspectives simultaneously, many of the meaningful relationships existing in the data will remain hidden. &nbsp;Software analytics is analytics specific to describing, predicting and improving software and related development processes.&nbsp; Our main objective in the Software Analytics project was to develop a multiple measurement approach that helps software engineers assess software quality, predict reliability, diagnose problems, discern impending faults and identify maintenance procedures, all of which make software better.<strong>&nbsp;</strong></p>\n<p>One foundational component of our analytics approach is the concept of a signature, similar to a gene signature which is a group of genes in a cell whose combined expression pattern is uniquely characteristic of a&nbsp;<em>biological</em>&nbsp;phenotype or medical condition. Software is built with modules and a module signature is a group of metrics for a module.&nbsp; Based on the signature constructed from metrics, each module is placed in a set and analyzed for distinct patterns. A multiple metrics approach, as envisioned in our module signatures, provides clues to the hidden interrelated complexities of the software. &nbsp;<tt>A module signature led to patterns that became noticeable and to actions to improve the software development process and product.</tt><tt></tt></p>\n<p>There are approximately 2.4 million U.S. software engineers and on any given day about 1 million are finding and fixing errors. &nbsp;In analyzing error reports, we found that every software error is to some degree explicable. &nbsp;Modules with the same signature possessed the same number of errors or one less error 98% of the time.&nbsp; For the remaining 2%, the difference in the number of errors was 2.&nbsp; The result that the module&rsquo;s signature can predict the number of errors with a high degree of accuracy is promising in the effort to reduce the time to find and fix errors.</p>\n<p>Monitoring the metric trends from the design phase of development to the coding phase through each module&rsquo;s signature, we could expose problems earlier in the software lifecycle. Just as overloading an electrical circuit causes a circuit breaker to shut off, suggesting that the circuit was not designed to handle that much input, a software implementation can ignore and overload the software design. &nbsp;This matching provides the missing link between the design and implementation of a software product. Modules that overloaded the design had more errors.</p>\n<p><tt>The pattern of module signatures through versions of a software system was effective in comparing how modules in a system change over time.&nbsp; Through the individual metrics in the signatures, </tt>we observed that cloning is a common occurrence in commercial software systems.<em> </em><em>Clones</em>&nbsp;are separate occurrences of the design or <em>code</em>&nbsp;that are very similar.&nbsp;&nbsp; Depending on their context, clones adversely impact the development and stability of software engineering projects, and as such are important to identify in software.&nbsp; Approaches to identifying clones are varied.&nbsp; We have found that the metric-identified clones were the best choice in identifying all types of clones and this approach can scale-up for evaluating large systems.&nbsp; Most researchers and developers know that clones exist in code.&nbsp; A few would know about design clone patterns found in this project.&nbsp; However, tying the patterns of clones to the number of errors is an insight that is not directly evident and one that this project has uncovered.</p>\n<p>As shown in the figure, the Software Analytics project utilized a metrics-based approach for analyzing software that can help software engineers build quality into the product.&nbsp; From our analysis of projects, we have discovered that within a software system are hidden relationships and structures that can be exposed by evaluating metrics. These relationships, such as clones and module signatures, can be used to answer questions about the software product and perhaps, more importantly, guide the software development process. <strong>&nbsp;</strong></p>\n<p>Six computer science graduate students, a semester intern, and five undergraduate students participated in this project. Four of the five undergraduates went on to graduate school. &nbsp;The intern finished his assignment and graduated. <strong></strong></p>\n<p>As software continues to grow in size and complexity, decision making will become more difficult and more critical to the success of a project. Analytics can assist managers and software professionals by providing more insight into the dynamics of software development, such as the effectiveness of change, recognizing under or over utilized resources, detecting and forecasting trends in data and assessing the decisions made. The use of analytics in other fields has had a profound effect on decision-making and on business itself.&nbsp; Software engineering, with its data-rich activities, also stands to benefit from analytics.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/25/2016<br>\n\t\t\t\t\tModified by: Wayne&nbsp;M&nbsp;Zage</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2016/1230520/1230520_10184935_1474837042929_SoftwareAnalyticsFigure--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2016/1230520/1230520_10184935_1474837042929_SoftwareAnalyticsFigure--rgov-800width.jpg\" title=\"The Software Analytics Process\"><img src=\"/por/images/Reports/POR/2016/1230520/1230520_10184935_1474837042929_SoftwareAnalyticsFigure--rgov-66x44.jpg\" alt=\"The Software Analytics Process\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The Software Analytics Process</div>\n<div class=\"imageCredit\">Zage and Zage</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Wayne&nbsp;M&nbsp;Zage</div>\n<div class=\"imageTitle\">The Software Analytics Process</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nDuring software development, valuable measurement information is created that can be a powerful resource to monitor software development and security-related activities.  Software engineers struggle every day to make sense of data.  Many software attributes, such as complexity, are never easy to state or understand by a single number. Without the ability to examine data from multiple perspectives simultaneously, many of the meaningful relationships existing in the data will remain hidden.  Software analytics is analytics specific to describing, predicting and improving software and related development processes.  Our main objective in the Software Analytics project was to develop a multiple measurement approach that helps software engineers assess software quality, predict reliability, diagnose problems, discern impending faults and identify maintenance procedures, all of which make software better. \n\nOne foundational component of our analytics approach is the concept of a signature, similar to a gene signature which is a group of genes in a cell whose combined expression pattern is uniquely characteristic of a biological phenotype or medical condition. Software is built with modules and a module signature is a group of metrics for a module.  Based on the signature constructed from metrics, each module is placed in a set and analyzed for distinct patterns. A multiple metrics approach, as envisioned in our module signatures, provides clues to the hidden interrelated complexities of the software.  A module signature led to patterns that became noticeable and to actions to improve the software development process and product.\n\nThere are approximately 2.4 million U.S. software engineers and on any given day about 1 million are finding and fixing errors.  In analyzing error reports, we found that every software error is to some degree explicable.  Modules with the same signature possessed the same number of errors or one less error 98% of the time.  For the remaining 2%, the difference in the number of errors was 2.  The result that the module?s signature can predict the number of errors with a high degree of accuracy is promising in the effort to reduce the time to find and fix errors.\n\nMonitoring the metric trends from the design phase of development to the coding phase through each module?s signature, we could expose problems earlier in the software lifecycle. Just as overloading an electrical circuit causes a circuit breaker to shut off, suggesting that the circuit was not designed to handle that much input, a software implementation can ignore and overload the software design.  This matching provides the missing link between the design and implementation of a software product. Modules that overloaded the design had more errors.\n\nThe pattern of module signatures through versions of a software system was effective in comparing how modules in a system change over time.  Through the individual metrics in the signatures, we observed that cloning is a common occurrence in commercial software systems. Clones are separate occurrences of the design or code that are very similar.   Depending on their context, clones adversely impact the development and stability of software engineering projects, and as such are important to identify in software.  Approaches to identifying clones are varied.  We have found that the metric-identified clones were the best choice in identifying all types of clones and this approach can scale-up for evaluating large systems.  Most researchers and developers know that clones exist in code.  A few would know about design clone patterns found in this project.  However, tying the patterns of clones to the number of errors is an insight that is not directly evident and one that this project has uncovered.\n\nAs shown in the figure, the Software Analytics project utilized a metrics-based approach for analyzing software that can help software engineers build quality into the product.  From our analysis of projects, we have discovered that within a software system are hidden relationships and structures that can be exposed by evaluating metrics. These relationships, such as clones and module signatures, can be used to answer questions about the software product and perhaps, more importantly, guide the software development process.  \n\nSix computer science graduate students, a semester intern, and five undergraduate students participated in this project. Four of the five undergraduates went on to graduate school.  The intern finished his assignment and graduated. \n\nAs software continues to grow in size and complexity, decision making will become more difficult and more critical to the success of a project. Analytics can assist managers and software professionals by providing more insight into the dynamics of software development, such as the effectiveness of change, recognizing under or over utilized resources, detecting and forecasting trends in data and assessing the decisions made. The use of analytics in other fields has had a profound effect on decision-making and on business itself.  Software engineering, with its data-rich activities, also stands to benefit from analytics.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 09/25/2016\n\n\t\t\t\t\tSubmitted by: Wayne M Zage"
 }
}