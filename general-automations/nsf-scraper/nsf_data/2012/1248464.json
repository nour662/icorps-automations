{
 "awd_id": "1248464",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: EAGER: Platform-Agnostic Supercomputing from Scientific Metaprogramming",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2012-09-01",
 "awd_exp_date": "2015-08-31",
 "tot_intn_awd_amt": 200000.0,
 "awd_amount": 217000.0,
 "awd_min_amd_letter_date": "2012-08-25",
 "awd_max_amd_letter_date": "2013-05-20",
 "awd_abstract_narration": "Porting scientific codes to new high-performance platforms is a time consuming and error-prone process.  The research funded by this EAGER award will make scientific codes more portable by raising the level of abstraction.  The Principal Investigators will develop a domain-specific language embedded in C++ for solving partial differential equations.  They will evaluate the effectiveness of their approach by applying their language to the problem of reacting flow simulations, which is a problem that is important for modeling zero-emission power plants.\r\n\r\nComputation is an increasingly important tool for scientists, but scientists must hand-tune their code for each new machine to take advantage of the latest high-performance hardware.  This research represents a new approach to implementing scientific codes on high-performance machines.  The approach allows domain experts to write code at a high level of abstraction while gaining portability across parallel platforms.  This research has the potential to improve the productivity of computational scientists by transforming the way that scientific codes are developed.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Matthew",
   "pi_last_name": "Might",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Matthew Might",
   "pi_email_addr": "might@cs.utah.edu",
   "nsf_id": "000068857",
   "pi_start_date": "2012-08-25",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Martin",
   "pi_last_name": "Berzins",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Martin Berzins",
   "pi_email_addr": "mb@cs.utah.edu",
   "nsf_id": "000175130",
   "pi_start_date": "2012-08-25",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "James",
   "pi_last_name": "Sutherland",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "James C Sutherland",
   "pi_email_addr": "james.sutherland@utah.edu",
   "nsf_id": "000425319",
   "pi_start_date": "2012-08-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Utah",
  "inst_street_address": "201 PRESIDENTS CIR",
  "inst_street_address_2": "",
  "inst_city_name": "SALT LAKE CITY",
  "inst_state_code": "UT",
  "inst_state_name": "Utah",
  "inst_phone_num": "8015816903",
  "inst_zip_code": "841129049",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "UT01",
  "org_lgl_bus_name": "UNIVERSITY OF UTAH",
  "org_prnt_uei_num": "",
  "org_uei_num": "LL8GLEVH6MG3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Utah",
  "perf_str_addr": "201 Presidents Circle Room 201",
  "perf_city_name": "Salt Lake City",
  "perf_st_code": "UT",
  "perf_st_name": "Utah",
  "perf_zip_code": "841129009",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "UT01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  },
  {
   "pgm_ele_code": "794300",
   "pgm_ele_name": "PROGRAMMING LANGUAGES"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 200000.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 17000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><div style=\"font-family: 'Helvetica Neue'; font-size: 14px;\">\n<p>This project was an exploratory research project meant to discover basic principles at the foundation of meta-programming for scientific computing.&nbsp; In this context, meta-programming is the process of using programs to generate programs.&nbsp; The advantage of this approach is that it accelerates software development, increases portability between architectures and reduces bugs by enabling the implementation of a software system to more closely resemble the high-level specification of that system.&nbsp; A specific aim of this project was to examine how meta-programming within C++ can enable the creation of embedded domain-specific languages that working scientific programmers runninng large systems can take advantage of.</p>\n<p>&nbsp;</p>\n<p><strong>Intellectual merit</strong></p>\n<p>By working directly with scientific programmers (especially in chemical engineering), the project unearthed applied embedded domain-specific language design principles.&nbsp; At the same time, language design efforts occurred within the context of principles accreted through programming language theory.&nbsp; The end result was that this project established meta-programming principles for scientific computing including:</p>\n<ol>\n<li>a tentative boundary on the limits of C++ template meta-programming, in which solving partial differential equations seems to be just inside the boundary, while (efficient) inter-process task fusion seems to lie just outside;</li>\n<li>a reinforcement of application-programmer-centric design methodology, in which features are added to a language only to solve a specific family of problems encountered within the domain of interest; and</li>\n<li>a model of C++ template meta-programming in which meta-programming is viewable as first-order term-rewriting;</li>\n<li>a model of C++ template meta-programming that enables multiple backends, including targeting single core, multi-core and GPU within a single codebase.</li>\n</ol>\n<p><strong>Broader impact</strong></p>\n<p><strong>T</strong>his project was a true fusion of three disciplines: programming language theory, high-performance computing and simulation-driven chemical engineering.&nbsp; By focusing on the confluence of these fields, this exploratory research effort is enabling the emergence of a new field: scientific meta-programming.&nbsp; Scientific meta-programming addresses multiple critical needs in computational science, including how to port old simulations efficiently to novel architectures (e.g. GPU to Xeon Phi) without necesitating a complete rewrite of the codebase.&nbsp; The effort also addresses robustness and correctness issues that arise in scientific computing when the specification for a simulation diverges widely from its implementation.</p>\n</div>\n<div style=\"font-family: 'Helvetica Neue'; font-size: 14px;\">This project also trained individuals at the confluence of these fields, including one uniquely qualified Ph.D. graduate who is extending this line of work at Lawrence Livermore National Lab, to the benefit of the broader scientific programming community.</div><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/30/2015<br>\n\t\t\t\t\tModified by: Matthew&nbsp;Might</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nThis project was an exploratory research project meant to discover basic principles at the foundation of meta-programming for scientific computing.  In this context, meta-programming is the process of using programs to generate programs.  The advantage of this approach is that it accelerates software development, increases portability between architectures and reduces bugs by enabling the implementation of a software system to more closely resemble the high-level specification of that system.  A specific aim of this project was to examine how meta-programming within C++ can enable the creation of embedded domain-specific languages that working scientific programmers runninng large systems can take advantage of.\n\n \n\nIntellectual merit\n\nBy working directly with scientific programmers (especially in chemical engineering), the project unearthed applied embedded domain-specific language design principles.  At the same time, language design efforts occurred within the context of principles accreted through programming language theory.  The end result was that this project established meta-programming principles for scientific computing including:\n\na tentative boundary on the limits of C++ template meta-programming, in which solving partial differential equations seems to be just inside the boundary, while (efficient) inter-process task fusion seems to lie just outside;\na reinforcement of application-programmer-centric design methodology, in which features are added to a language only to solve a specific family of problems encountered within the domain of interest; and\na model of C++ template meta-programming in which meta-programming is viewable as first-order term-rewriting;\na model of C++ template meta-programming that enables multiple backends, including targeting single core, multi-core and GPU within a single codebase.\n\n\nBroader impact\n\nThis project was a true fusion of three disciplines: programming language theory, high-performance computing and simulation-driven chemical engineering.  By focusing on the confluence of these fields, this exploratory research effort is enabling the emergence of a new field: scientific meta-programming.  Scientific meta-programming addresses multiple critical needs in computational science, including how to port old simulations efficiently to novel architectures (e.g. GPU to Xeon Phi) without necesitating a complete rewrite of the codebase.  The effort also addresses robustness and correctness issues that arise in scientific computing when the specification for a simulation diverges widely from its implementation.\n\nThis project also trained individuals at the confluence of these fields, including one uniquely qualified Ph.D. graduate who is extending this line of work at Lawrence Livermore National Lab, to the benefit of the broader scientific programming community.\n\n\t\t\t\t\tLast Modified: 11/30/2015\n\n\t\t\t\t\tSubmitted by: Matthew Might"
 }
}