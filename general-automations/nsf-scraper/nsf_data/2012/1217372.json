{
 "awd_id": "1217372",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: System Support for SSD-Backed Recoverable Network Applications",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2012-09-01",
 "awd_exp_date": "2017-08-31",
 "tot_intn_awd_amt": 400000.0,
 "awd_amount": 400000.0,
 "awd_min_amd_letter_date": "2012-08-20",
 "awd_max_amd_letter_date": "2016-07-06",
 "awd_abstract_narration": "The massive hardware scale, labyrinthine software complexity, and tangled external interactions of networked systems conspire to undermine reliability: Scale increases the frequency of failures while interconnectedness exacerbates their consequences by turning local mishaps into global disasters.  This project will establish new system support toward recoverable network applications on two foundations.  In an individual machine, fast, simple application recovery can be greatly eased if the application state on the persistent storage is kept always consistent.  Over a networked system, the fault-tolerance and global consistency can be better supported and reasoned if application components commit local state before emitting any output to others.  The time is right for this effort, because emerging Flash-based solid-state disks (SSDs) promise to dramatically reduce the cost of required persistent state management.  Research will proceed along three fronts:  First, the project will design and implement a new operating system mechanism (fast synchronous logging without double writes) for failure-atomic, synchronous I/O on SSDs.  Second, for broad applicability, this project will present the programmers with simple extensions of familiar POSIX interfaces.  Third, to achieve efficiency and fairness, research will develop a new I/O resource manager that combines the classic fair queuing scheduling with SSD-oriented anticipatory I/O.  Fast, simple failure recovery mechanisms developed in this project will enable high reliability for a broad range of networked applications that are critical to today's digital economy and society.  This project will also involve industry collaboration, curriculum enhancement, and student training.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Kai",
   "pi_last_name": "Shen",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Kai Shen",
   "pi_email_addr": "kshen@cs.rochester.edu",
   "nsf_id": "000489991",
   "pi_start_date": "2012-08-20",
   "pi_end_date": "2016-07-06"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Huang",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Michael C Huang",
   "pi_email_addr": "michael.huang@rochester.edu",
   "nsf_id": "000300067",
   "pi_start_date": "2016-07-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Rochester",
  "inst_street_address": "910 GENESEE ST",
  "inst_street_address_2": "STE 200",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5852754031",
  "inst_zip_code": "146113847",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "UNIVERSITY OF ROCHESTER",
  "org_prnt_uei_num": "",
  "org_uei_num": "F27KDXZMF9Y8"
 },
 "perf_inst": {
  "perf_inst_name": "University of Rochester",
  "perf_str_addr": "",
  "perf_city_name": "Rochester",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146270140",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 400000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>In today's computing landscape, the massive hardware scale, labyrinthine software complexity, and tangled external interactions of networked systems conspire to undermine reliability: Scale increases the frequency of failures while interconnectedness exacerbates their consequences by turning local mishaps into global disasters. This project set out to eastablish new system support toward recoverable network applications on two foundations. In an individual machine, fast, simple application recovery can be greatly eased if the application state on the persistent storage is kept always consistent. Over a networked system, the fault-tolerance and global consistency can be better supported and reasoned if application components commit local state before emitting any output to others.&nbsp;</span></p>\n<p><span>This project has developed system-level techniques and application support for efficient, fair, reliable data management on Flash-based solid state disks.&nbsp; Significant outcomes include the development of two new Flash I/O schedulers in the operating system.&nbsp; Our FIOS scheduler achieved fairness along with high efficiency for Flash I/O.&nbsp; Our FlashFQ scheduler further enhanced the Flash I/O responsiveness by leveraging classic fair queueing resource scheduling that was primarily used in network packet switching.</span><br /><br /><span>Fast, simple application recovery can be greatly eased if the application state on the persistent storage is kept always consistent.&nbsp; Emerging Flash-based SSDs promise to dramatically reduce the cost of required persistent state management.&nbsp; Another outcome of this project was the development of a new OS interface, called failure-atomic msync(), and efficient I/O system support for broad applicability of consistent, durable I/O.&nbsp; Our new primitive enables reliable, efficient data management through a simple, POSIX-like programming interface.</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/16/2017<br>\n\t\t\t\t\tModified by: Michael&nbsp;C&nbsp;Huang</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIn today's computing landscape, the massive hardware scale, labyrinthine software complexity, and tangled external interactions of networked systems conspire to undermine reliability: Scale increases the frequency of failures while interconnectedness exacerbates their consequences by turning local mishaps into global disasters. This project set out to eastablish new system support toward recoverable network applications on two foundations. In an individual machine, fast, simple application recovery can be greatly eased if the application state on the persistent storage is kept always consistent. Over a networked system, the fault-tolerance and global consistency can be better supported and reasoned if application components commit local state before emitting any output to others. \n\nThis project has developed system-level techniques and application support for efficient, fair, reliable data management on Flash-based solid state disks.  Significant outcomes include the development of two new Flash I/O schedulers in the operating system.  Our FIOS scheduler achieved fairness along with high efficiency for Flash I/O.  Our FlashFQ scheduler further enhanced the Flash I/O responsiveness by leveraging classic fair queueing resource scheduling that was primarily used in network packet switching.\n\nFast, simple application recovery can be greatly eased if the application state on the persistent storage is kept always consistent.  Emerging Flash-based SSDs promise to dramatically reduce the cost of required persistent state management.  Another outcome of this project was the development of a new OS interface, called failure-atomic msync(), and efficient I/O system support for broad applicability of consistent, durable I/O.  Our new primitive enables reliable, efficient data management through a simple, POSIX-like programming interface.\n\n\t\t\t\t\tLast Modified: 11/16/2017\n\n\t\t\t\t\tSubmitted by: Michael C Huang"
 }
}