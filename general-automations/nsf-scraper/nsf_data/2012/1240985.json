{
 "awd_id": "1240985",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CER: DEPICT: Developing Elementary (Learning) Progressions to Integrate Computational Thinking",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Janice Cuny",
 "awd_eff_date": "2012-11-01",
 "awd_exp_date": "2017-10-31",
 "tot_intn_awd_amt": 599895.0,
 "awd_amount": 688167.0,
 "awd_min_amd_letter_date": "2012-08-29",
 "awd_max_amd_letter_date": "2014-08-11",
 "awd_abstract_narration": "The University of California, Santa Barbara proposes to discover low anchor points and develop learning progressions for computational thinking and related computer science concepts. These learning progressions are a necessary step towards the integration of computational thinking and computer science concepts into K-12. The project staff will develop two curricula - one for grades 2-6 and one for grades 4-6. The curricula and learning progressions will iteratively inform one another. Further, the curricula will be a proof of concept that students can develop computational thinking skills in a way that reinforces other academic subjects and their own culture, and provide a practical way for teachers to begin teaching computer science at different entry points within grades 2-6.\r\n\r\nComputing has infiltrated almost all corners of life and is an increasingly important part of driving innovation, and the next generation of inventors need to understand how to develop and use software. The ability to analyze and express problems in a way compatible with software solutions, or computational thinking, will become critical in modern society. This work has the potential to revolutionize how computer science is taught in elementary schools by showing how these computational thinking skills can be developed in three or six years while supporting education in the existing curriculum. In addition, the resulting curricular materials will be developed with diverse students as the targets. First, the project staff will explore the prior knowledge that students with different backgrounds have, leading to everyday examples that are more accessible and meaningful to diverse students. Second, the content delivery will use the latest research in teaching diverse students computer science concepts.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Diana",
   "pi_last_name": "Franklin",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Diana Franklin",
   "pi_email_addr": "dmfranklin@uchicago.edu",
   "nsf_id": "000444531",
   "pi_start_date": "2012-08-29",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Danielle",
   "pi_last_name": "Harlow",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Danielle Harlow",
   "pi_email_addr": "dharlow@education.ucsb.edu",
   "nsf_id": "000496757",
   "pi_start_date": "2012-08-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Santa Barbara",
  "inst_street_address": "3227 CHEADLE HALL",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA BARBARA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8058934188",
  "inst_zip_code": "931060001",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "CA24",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SANTA BARBARA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G9QBQDH39DF4"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Santa Barbara",
  "perf_str_addr": "University of California",
  "perf_city_name": "Santa Barbara",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "931065110",
  "perf_ctry_code": "US",
  "perf_cong_dist": "24",
  "perf_st_cong_dist": "CA24",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "738200",
   "pgm_ele_name": "Computing Ed for 21st Century"
  },
  {
   "pgm_ele_code": "764500",
   "pgm_ele_name": "Discovery Research K-12"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7439",
   "pgm_ref_txt": "Comp Ed Res (CER)"
  },
  {
   "pgm_ref_code": "9000",
   "pgm_ref_txt": "BPEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0412",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001213DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 599895.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 12000.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 76272.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<p>This project has focused on understand how students interact with programming environments and content at the upper-elementary school level so that we can improve curriculum, development environments, and teaching. To this end, we have published several papers that can be used in future curriculum design. Some of the major findings are:</p>\n<p><span style=\"white-space: pre;\"> </span>* Identifying that 4th grade students can, generally, create instructions for others to follow. However, despite being able to point out mistakes in precision and completeness in others' instructions, they struggle making their own instructions both complete and precise. This means that a curriculum designed for 4th grade or younger should not depend very much on precision.</p>\n<p><span style=\"white-space: pre;\"> </span>* Identifying that math concepts such as negative numbers, percentages, and Cartesian coordinate systems created a mismatch between the mathematical instruction for elementary school and the use of Scratch for upper-elementary grades. This means that curriculum designed for 3rd-5th grade students in Scratch should not assume students can use those values - they need to be taught explicitly as part of the CS curriculum or workarounds provided.</p>\n<p><span style=\"white-space: pre;\"> </span>* Identifying that many user interface features in Scratch such as all possible blocks being visible and easy deletion of sprites were overwhelming and potentially catastrophic for students using pre-provided, scaffolded projects in a time-limited in-school setting. Strategies could be created to keep students focused on the aspects of the environment that they are using in a particular Scratch project.</p>\n<p><span style=\"white-space: pre;\"> </span>* Finding that 4th grade students struggled with anything beyond the simplest control structures in their first 8 weeks, while 6th grade students were more likely to be comfortable using a wider array of control structures. This means that in 4th grade and below, instruction should focus on exploration within a very small set of control structures. Great care should be taken not to go too quickly for students. In 6th grade, the curriculum can move more quickly.</p>\n<p><span style=\"white-space: pre;\"> </span>* Finding that the math involved in calculating distance (counting by 50's) interfered with 4th and 5th grade students' ability to merge multiple \"step 50\" instructions into a single one, whereas 6th grade students could do so easily. This means that projects should be careful about the precise level of addition skills with large numbers that are being used.</p>\n<p><span style=\"white-space: pre;\"> </span>* Finding that 4th grade students struggled with initialization in Scratch in a number of ways. First, many put initialization at the end of the program with assumptions about where the sprites were (which doesn't work if the program is stopped in the middle). Second, they are able to replicate initialization in an identical setting, but many are unable to realize how to apply the principle of initialization to a new attribute (e.g. learning to initialize position does not translate to realizing / being able to initialize size). This means that further research is needed to understand what is appropriate in terms of understanding initialization at this age and how to teach it in a way that students can be sucessful in creating their own projects.</p>\n<p><span style=\"white-space: pre;\"> </span>* Many students rely heavily on the societal context of visual cues in Scratch to predict future behavior rather than looking closely at the code in the sprites. This means that cues should be given when sprites do not act the same way as students would assume them to do based on the pictures.</p>\n<p><span style=\"white-space: pre;\"> </span>* Identifying many ways to integrate UDL principles into computer science curriculum design and instruction. We provided an overview of techniques teachers who teach computer science can use in the classroom.</p>\n<p><span style=\"white-space: pre;\"> </span>* Providing practical advice on how to design CS curriculum and manage classroom instruction at the upper-elementary level.</p>\n<p><span style=\"white-space: pre;\"> </span>* Identifying patterns of coding and their potential associated mental models that emerge from instruction in Scratch that teachers in future languages will need to attend to because of mismatches between the Scratch environment and traditional languages. This can be used to direct both Scratch curricular development and the development of \"bridge\" curricula that bring students from Scratch to text-based languages.</p>\n<p><span style=\"white-space: pre;\"> </span>* Contributing to the development of learning trajectories for Repetition, Sequence, Conditionals, Debugging, and Decomposition to guide future computational thinking curriculum research and development.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/14/2017<br>\n\t\t\t\t\tModified by: Diana&nbsp;Franklin</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \n\nThis project has focused on understand how students interact with programming environments and content at the upper-elementary school level so that we can improve curriculum, development environments, and teaching. To this end, we have published several papers that can be used in future curriculum design. Some of the major findings are:\n\n * Identifying that 4th grade students can, generally, create instructions for others to follow. However, despite being able to point out mistakes in precision and completeness in others' instructions, they struggle making their own instructions both complete and precise. This means that a curriculum designed for 4th grade or younger should not depend very much on precision.\n\n * Identifying that math concepts such as negative numbers, percentages, and Cartesian coordinate systems created a mismatch between the mathematical instruction for elementary school and the use of Scratch for upper-elementary grades. This means that curriculum designed for 3rd-5th grade students in Scratch should not assume students can use those values - they need to be taught explicitly as part of the CS curriculum or workarounds provided.\n\n * Identifying that many user interface features in Scratch such as all possible blocks being visible and easy deletion of sprites were overwhelming and potentially catastrophic for students using pre-provided, scaffolded projects in a time-limited in-school setting. Strategies could be created to keep students focused on the aspects of the environment that they are using in a particular Scratch project.\n\n * Finding that 4th grade students struggled with anything beyond the simplest control structures in their first 8 weeks, while 6th grade students were more likely to be comfortable using a wider array of control structures. This means that in 4th grade and below, instruction should focus on exploration within a very small set of control structures. Great care should be taken not to go too quickly for students. In 6th grade, the curriculum can move more quickly.\n\n * Finding that the math involved in calculating distance (counting by 50's) interfered with 4th and 5th grade students' ability to merge multiple \"step 50\" instructions into a single one, whereas 6th grade students could do so easily. This means that projects should be careful about the precise level of addition skills with large numbers that are being used.\n\n * Finding that 4th grade students struggled with initialization in Scratch in a number of ways. First, many put initialization at the end of the program with assumptions about where the sprites were (which doesn't work if the program is stopped in the middle). Second, they are able to replicate initialization in an identical setting, but many are unable to realize how to apply the principle of initialization to a new attribute (e.g. learning to initialize position does not translate to realizing / being able to initialize size). This means that further research is needed to understand what is appropriate in terms of understanding initialization at this age and how to teach it in a way that students can be sucessful in creating their own projects.\n\n * Many students rely heavily on the societal context of visual cues in Scratch to predict future behavior rather than looking closely at the code in the sprites. This means that cues should be given when sprites do not act the same way as students would assume them to do based on the pictures.\n\n * Identifying many ways to integrate UDL principles into computer science curriculum design and instruction. We provided an overview of techniques teachers who teach computer science can use in the classroom.\n\n * Providing practical advice on how to design CS curriculum and manage classroom instruction at the upper-elementary level.\n\n * Identifying patterns of coding and their potential associated mental models that emerge from instruction in Scratch that teachers in future languages will need to attend to because of mismatches between the Scratch environment and traditional languages. This can be used to direct both Scratch curricular development and the development of \"bridge\" curricula that bring students from Scratch to text-based languages.\n\n * Contributing to the development of learning trajectories for Repetition, Sequence, Conditionals, Debugging, and Decomposition to guide future computational thinking curriculum research and development.\n\n \n\n\t\t\t\t\tLast Modified: 11/14/2017\n\n\t\t\t\t\tSubmitted by: Diana Franklin"
 }
}