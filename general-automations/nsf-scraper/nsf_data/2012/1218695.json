{
 "awd_id": "1218695",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Making Software Transactional Memory More than a Research Toy",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2012-09-01",
 "awd_exp_date": "2016-08-31",
 "tot_intn_awd_amt": 400000.0,
 "awd_amount": 400000.0,
 "awd_min_amd_letter_date": "2012-08-23",
 "awd_max_amd_letter_date": "2012-08-23",
 "awd_abstract_narration": "Now that computer technology appears to have reached the limit of Dennard scaling (increasing clock rates), software must become more parallel, to scale with hardware that provides more instead of faster cores.  However, writing correct, scalable shared-memory concurrent programs is notoriously difficult. Transactional memory (TM) offers potential improvements over conventional shared-memory systems in programmability, reliability, and scalability.  However, it has not lived up to its initial promise, primarily because no one has shown how to make it practical. Hardware manufacturers are reluctant to build hardware TM (HTM) into already-complex cache and memory subsystems, and software TM (STM) suffers from poor performance and weak semantics. This project seeks to advance the state of the art dramatically by investigating new research directions for making STM truly practical, by achieving high performance with strong semantics. The project tackles STM's key cost in existing work -- detecting and handling conflicting accesses -- using a novel mechanism that avoids synchronization at non-conflicting accesses.\r\n\r\nDirect beneficial impacts of making widely available practical STM support include the ability to produce more reliable and scalable software systems, leading to advances in software for safety- and mission-critical systems. Widespread use of STM can help spur commercial development of hardware support for hybrid hardware-software TM, which requires practical STM support. The investigator's engagement with industrial researchers provides an avenue to enhance dissemination.  Public distribution of STM implementations produced by this project provides a basis for further research and development.  Several educational and outreach activities, including course projects, enhanced core course material, interactive presentations for a summer bridge program targeting minority undergraduate engineering majors, and recruiting events for prospective minority graduate students, aim to train a diverse group of programmers and researchers in developing future reliable, scalable software systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Bond",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michael Bond",
   "pi_email_addr": "mikebond@cse.ohio-state.edu",
   "nsf_id": "000565569",
   "pi_start_date": "2012-08-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Ohio State University",
  "inst_street_address": "1960 KENNY RD",
  "inst_street_address_2": "",
  "inst_city_name": "COLUMBUS",
  "inst_state_code": "OH",
  "inst_state_name": "Ohio",
  "inst_phone_num": "6146888735",
  "inst_zip_code": "432101016",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "OH03",
  "org_lgl_bus_name": "OHIO STATE UNIVERSITY, THE",
  "org_prnt_uei_num": "MN4MDDMN8529",
  "org_uei_num": "DLWBSLWAJWR1"
 },
 "perf_inst": {
  "perf_inst_name": "Ohio State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "OH",
  "perf_st_name": "Ohio",
  "perf_zip_code": "432101063",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "OH03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 400000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Now that computer technology appears to have reached the limit of Dennard scaling (increasing clock rates), software must become more parallel, to scale with hardware that provides more instead of faster cores. However, writing correct, scalable shared-memory concurrent programs is notoriously difficult. Transactional memory (TM) offers potential improvements over conventional shared-memory systems in programmability, reliability, and scalability. However, it has not lived up to its initial promise, primarily because no one has shown how to make it practical. Hardware manufacturers are reluctant to build unbounded hardware TM (HTM) into already-complex cache and memory subsystems, and software TM (STM) suffers from poor performance and weak semantics. This project seeks to advance the state of the art dramatically by investigating new research directions for making STM truly practical, by achieving high performance with strong semantics. The project aims to not only advance STM but also develop runtime support that is applicable to providing strong semantic guarantees, both for transactional and non-transactional shared-memory programs.</p>\n<p>The project provides the following contributions. (1) It develops a novel STM called LarkTM that has low overhead, tunable scalability, and strong semantic guarantees. (2) It demonstrates how to exploit asynchrony to enhance STM and other software systems that provide atomicity and determinism guarantees. (3) The project introduces support for a memory model based on snapshot isolation of synchronization-free regions, in order to balance efficiency and semantic guarantees with availability. (4) It introduces novel analyses that detect data races -- which are a key source of errors in software systems -- that are efficient enough for always-on use in production systems. Each of these contributions advances the state of the art, by providing runtime support on commodity systems with better performance than existing work.</p>\n<p>Broader impacts of the project include the ability to produce more reliable and scalable software systems, leading to advances in software for safety- and mission-critical systems. The project's software implementations are publicly available, providing a basis for further research and development. Mentoring, educational, and outreach activities have helped to train a diverse group of computer science students and researchers in developing future reliable, scalable software systems.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/22/2016<br>\n\t\t\t\t\tModified by: Michael&nbsp;Bond</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nNow that computer technology appears to have reached the limit of Dennard scaling (increasing clock rates), software must become more parallel, to scale with hardware that provides more instead of faster cores. However, writing correct, scalable shared-memory concurrent programs is notoriously difficult. Transactional memory (TM) offers potential improvements over conventional shared-memory systems in programmability, reliability, and scalability. However, it has not lived up to its initial promise, primarily because no one has shown how to make it practical. Hardware manufacturers are reluctant to build unbounded hardware TM (HTM) into already-complex cache and memory subsystems, and software TM (STM) suffers from poor performance and weak semantics. This project seeks to advance the state of the art dramatically by investigating new research directions for making STM truly practical, by achieving high performance with strong semantics. The project aims to not only advance STM but also develop runtime support that is applicable to providing strong semantic guarantees, both for transactional and non-transactional shared-memory programs.\n\nThe project provides the following contributions. (1) It develops a novel STM called LarkTM that has low overhead, tunable scalability, and strong semantic guarantees. (2) It demonstrates how to exploit asynchrony to enhance STM and other software systems that provide atomicity and determinism guarantees. (3) The project introduces support for a memory model based on snapshot isolation of synchronization-free regions, in order to balance efficiency and semantic guarantees with availability. (4) It introduces novel analyses that detect data races -- which are a key source of errors in software systems -- that are efficient enough for always-on use in production systems. Each of these contributions advances the state of the art, by providing runtime support on commodity systems with better performance than existing work.\n\nBroader impacts of the project include the ability to produce more reliable and scalable software systems, leading to advances in software for safety- and mission-critical systems. The project's software implementations are publicly available, providing a basis for further research and development. Mentoring, educational, and outreach activities have helped to train a diverse group of computer science students and researchers in developing future reliable, scalable software systems.\n\n\t\t\t\t\tLast Modified: 11/22/2016\n\n\t\t\t\t\tSubmitted by: Michael Bond"
 }
}