{
 "awd_id": "1209790",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Fellowship Award",
 "awd_titl_txt": "NSF East Asia and Pacific Summer Institute for FY 2012 in China",
 "cfda_num": "47.079",
 "org_code": "01090000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Anne Emig",
 "awd_eff_date": "2012-06-01",
 "awd_exp_date": "2013-05-31",
 "tot_intn_awd_amt": 5836.0,
 "awd_amount": 5836.0,
 "awd_min_amd_letter_date": "2012-05-23",
 "awd_max_amd_letter_date": "2012-05-23",
 "awd_abstract_narration": "This action funds Sean C. Reber of Kent State University to conduct a research project, entitled \"Computational feature-based texture synthesis on flow fields,\" during the summer of 2012 at the Shenzhen Institute of Advanced Integration Technology in Shenzhen, Guangdong Province, China.  The host scientist is George Chen.\r\n\r\nThe Intellectual Merit of the research project is producing realistic fluid representation and animation in movies, games and other digital media and assisting in visualizing and analyzing flow data or vector fields for scientific applications.  The goal of the research is to improve upon the existing methods of Lagrangian based texture advection, using a Poisson-disk distribution of particles, and optimization based texture synthesis by adapting them with structural features extracted from flow fields using finite-time Lyapunov exponents (FTLE).  \r\n\r\nThe Broader Impacts of an EAPSI fellowship include providing the Fellow a first-hand research experience outside the U.S.; an introduction to the science, science policy, and scientific infrastructure of the respective location; and an orientation to the society, culture and language. These activities meet the NSF goal to educate for international collaborations early in the career of its scientists, engineers, and educators, thus ensuring a globally aware U.S. scientific workforce.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "O/D",
 "org_dir_long_name": "Office Of The Director",
 "div_abbr": "OISE",
 "org_div_long_name": "Office of International Science and Engineering",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Sean",
   "pi_last_name": "Reber",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Sean C Reber",
   "pi_email_addr": "",
   "nsf_id": "000606036",
   "pi_start_date": "2012-05-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Reber                   Sean           C",
  "inst_street_address": "",
  "inst_street_address_2": "",
  "inst_city_name": "North Canton",
  "inst_state_code": "OH",
  "inst_state_name": "Ohio",
  "inst_phone_num": "",
  "inst_zip_code": "447208132",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "OH13",
  "org_lgl_bus_name": "",
  "org_prnt_uei_num": "",
  "org_uei_num": ""
 },
 "perf_inst": {
  "perf_inst_name": "Reber                   Sean           C",
  "perf_str_addr": null,
  "perf_city_name": "North Canton",
  "perf_st_code": "OH",
  "perf_st_name": "Ohio",
  "perf_zip_code": "447208132",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "OH13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "731600",
   "pgm_ele_name": "EAPSI"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "5936",
   "pgm_ref_txt": "GERMANY (F.R.G.)"
  },
  {
   "pgm_ref_code": "5978",
   "pgm_ref_txt": "EAST ASIA AND PACIFIC PROGRAM"
  },
  {
   "pgm_ref_code": "7316",
   "pgm_ref_txt": "EAPSI"
  },
  {
   "pgm_ref_code": "9200",
   "pgm_ref_txt": "US CHINA COOP IN BASIC SCIENCE"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 5836.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p style=\"margin-bottom: 0in;\"><strong>Sean C Reber</strong></p>\n<p style=\"margin-bottom: 0in;\"><strong>Project Outcomes Report (POR)</strong></p>\n<p style=\"margin-bottom: 0in;\"><strong>EASPI China 2012</strong></p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\">&nbsp;</p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\"><span style=\"font-family: Times New Roman,serif;\"><span style=\"font-size: small;\"> The goal of my research was to implement a distributed and parallel version of the Lattice Boltzmann method of fluid simulation over the Hadoop open-source framework for distributed computing provided by Apache. The result would be improved speed of the LBM algorithm operating over an adaptable and distributed cloud computing environment.</span></span></p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\">&nbsp;</p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\"><span style=\"font-family: Times New Roman,serif;\"><span style=\"font-size: small;\"> To give a little background, the Lattice Boltzmann method (LBM) is a computational fluid simulation method which doesn't solve the Navier-Stokes equations, instead taking advantage of the fact that the collective behavior of microscopic particles results in the macroscopic dynamics of a fluid. LBM achieves this using a regular grid with individual particle packets moving on a discrete lattice within each cell on the grid, at discrete time steps. The interaction rules between cells on the grid are defined such that the conservation of mass and momentum at each grid cell is satisfied, thus globally satisfying the macroscopic Navier-Stokes equations. LBM is known to help with handling boundary conditions between the simulated fluid and objects that may be present in the simulation, and is also known to be favorable to parallel computing implementations due to the linear and regular calculations at each local cell of the grid. The process of LBM can be thought of generally as having two steps for each cell on the grid, a collision step where the collision operations and equilibrium packet distributions are calculated for that cell and an update step where these new values are propagated to all neighboring cells.</span></span></p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\">&nbsp;</p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\"><span style=\"font-family: Times New Roman,serif;\"><span style=\"font-size: small;\"> The Hadoop framework involves a two-step programming model known as MapReduce.Essentially this model is based on functional programming concepts of turning lists of input data into lists of output data. This is done by 'mapping' the input list across various nodes throughout a cluster of machines from a master node, performing operations on them, and then collecting the answers to these sub-problems and 'reducing' them into the final output. This concept can be applied to the LBM algorithm by considering each cell of the grid, for maximum parallelism, as an input element of a list.  The necessary calculations could then be carried out at each node in the cloud and the reducing function would aggregate the updated values of the particle packet distributions and then propagate them to all neighboring cells, completing one time step. While this process is highly parallel in the collision step, it suffers from high communication overhead which may outweigh the benefit of the speed increase from the parallel processing.  Due to Hadoop's forced process isolation on each cluster node, particle packet distributions can only be propagated to neighboring cells after the results are aggregated in the reduce phase. This means that at most one time step can be calculated for each map and reduce cycle.  This large communication overhead is very costly, as at each time step each cell of the grid needs to be transmitted to the individual nodes of the cluster from the master node in the map phase and retrieved back to the master...",
  "por_txt_cntn": "Sean C Reber\nProject Outcomes Report (POR)\nEASPI China 2012\n \n The goal of my research was to implement a distributed and parallel version of the Lattice Boltzmann method of fluid simulation over the Hadoop open-source framework for distributed computing provided by Apache. The result would be improved speed of the LBM algorithm operating over an adaptable and distributed cloud computing environment.\n \n To give a little background, the Lattice Boltzmann method (LBM) is a computational fluid simulation method which doesn't solve the Navier-Stokes equations, instead taking advantage of the fact that the collective behavior of microscopic particles results in the macroscopic dynamics of a fluid. LBM achieves this using a regular grid with individual particle packets moving on a discrete lattice within each cell on the grid, at discrete time steps. The interaction rules between cells on the grid are defined such that the conservation of mass and momentum at each grid cell is satisfied, thus globally satisfying the macroscopic Navier-Stokes equations. LBM is known to help with handling boundary conditions between the simulated fluid and objects that may be present in the simulation, and is also known to be favorable to parallel computing implementations due to the linear and regular calculations at each local cell of the grid. The process of LBM can be thought of generally as having two steps for each cell on the grid, a collision step where the collision operations and equilibrium packet distributions are calculated for that cell and an update step where these new values are propagated to all neighboring cells.\n \n The Hadoop framework involves a two-step programming model known as MapReduce.Essentially this model is based on functional programming concepts of turning lists of input data into lists of output data. This is done by 'mapping' the input list across various nodes throughout a cluster of machines from a master node, performing operations on them, and then collecting the answers to these sub-problems and 'reducing' them into the final output. This concept can be applied to the LBM algorithm by considering each cell of the grid, for maximum parallelism, as an input element of a list.  The necessary calculations could then be carried out at each node in the cloud and the reducing function would aggregate the updated values of the particle packet distributions and then propagate them to all neighboring cells, completing one time step. While this process is highly parallel in the collision step, it suffers from high communication overhead which may outweigh the benefit of the speed increase from the parallel processing.  Due to Hadoop's forced process isolation on each cluster node, particle packet distributions can only be propagated to neighboring cells after the results are aggregated in the reduce phase. This means that at most one time step can be calculated for each map and reduce cycle.  This large communication overhead is very costly, as at each time step each cell of the grid needs to be transmitted to the individual nodes of the cluster from the master node in the map phase and retrieved back to the master node in the reduce phase. The amount of data transferred at each time step would be near the size of the data structure storing the grid. In the end it becomes a question of how does the speed increase from doing the calculations in parallel compare to the overhead of the network data transfer between nodes.\n \n It was later decided to try to implement another popular graphics algorithm over Hadoop, the mesh subdivision algorithm. This algorithm was chosen due to it having less potential network overhead and being inherently simpler than the LBM algorithm, whose complexity was making determining performance metrics over a cluster difficult. Early tests show that at least for the mesh subdivision algorithm the speed increase from the parallel computational outweighs the network overhead, however these are very prel..."
 }
}