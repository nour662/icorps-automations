{
 "awd_id": "1162124",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: Medium: Compiling Parallel Algorithms to Memory Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2012-04-01",
 "awd_exp_date": "2019-03-31",
 "tot_intn_awd_amt": 1199884.0,
 "awd_amount": 1206634.0,
 "awd_min_amd_letter_date": "2012-04-05",
 "awd_max_amd_letter_date": "2018-01-18",
 "awd_abstract_narration": "This project aims to improve the practice of parallel programming - perhaps the central problem facing computer science in the 21st century.  While the sequential model first introduced by Von Neumann and others has served us well, its inefficiency has been brought into sharp focus by the availability of billion-transistor chips, which are greatly underutilized yet power-hungry when running sequential algorithms.\r\n\r\nThis project aims to improve the programmability and efficiency of distributed memory systems, a key issue in the execution of parallel algorithms.  While it is fairly easy to put, say, thousands of independent adders on a single chip, it is far more difficult to supply them with useful data to add, a task that falls to the memory system.  This research will develop compiler optimization algorithms able to configure and orchestrate parallel memory systems able to utilize such parallel computational resources.\r\n\r\nTo make more than incremental progress, this project departs from existing hegemony in two important ways.  First, its techniques will be applied only to algorithms expressed in the functional style, a more abstract, mathematically sound representation that enables precise reasoning about parallel algorithms and very aggressive optimizations.  Second, it targets field-programmable gate arrays (FPGAs) rather than existing parallel computing platforms.  FPGAs provide a highly flexible platform that enables exploring parallel architectures far different than today's awkward solutions, which are largely legacy sequential architectures glued together.  While FPGAs are far too flexible and power-hungry to be the long-term \"solution\"\r\nto the parallel computer architecture question, their use grounds this project in physical reality and will produce useful hardware synthesis algorithms as a side-effect.\r\n\r\nJudicious and efficient data movement is the linchpin of parallel computing.  This project attacks that challenge head on, establishing the constructs and algorithms necessary for hardware and software to efficiently manipulate data together.  This research will lay the groundwork for the next generation of storage and instruction set architectures, compilers, and programming paradigms -- the bedrock of today's mainstream computing.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Stephen",
   "pi_last_name": "Edwards",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Stephen A Edwards",
   "pi_email_addr": "sedwards@cs.columbia.edu",
   "nsf_id": "000277894",
   "pi_start_date": "2012-04-05",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Martha",
   "pi_last_name": "Kim",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Martha A Kim",
   "pi_email_addr": "martha@cs.columbia.edu",
   "nsf_id": "000528915",
   "pi_start_date": "2012-04-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Columbia University",
  "inst_street_address": "615 W 131ST ST",
  "inst_street_address_2": "MC 8741",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "2128546851",
  "inst_zip_code": "100277922",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "NY13",
  "org_lgl_bus_name": "THE TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK",
  "org_prnt_uei_num": "",
  "org_uei_num": "F4N1QNPB95M4"
 },
 "perf_inst": {
  "perf_inst_name": "Columbia University",
  "perf_str_addr": "2960 Broadway",
  "perf_city_name": "New York",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "100276902",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "NY13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "732900",
   "pgm_ele_name": "COMPILERS"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7329",
   "pgm_ref_txt": "COMPILERS"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 294382.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 296962.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 303102.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 312188.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goal of the FHW project was to produce a compiler able to translate programs written in a functional language (we chose Haskell) into synthesizable RTL (we chose SystemVerilog)suitable for execution on an FPGA or ASIC that was highly parallel. We ultimately producedsuch a compiler, relying on the Glasgow Haskell Compiler (GHC) as a front-end and writingour own back-end that performed a series of lowering transformations to restructure suchconstructs as recursion, polymorphism, and frst-order functions, into a form suitable forhardware, then transform the now-restricted functional IR into a datafow representation that is then finally transformed into synthesizable System Verilog.</p>\n<p>In addition to the compiler transformations described above, we developed a library of compositional dataflow blocks and an \"assembler\" able to translate dataflow descriptions generated by our compiler into synthesizable System Verilog suitable for synthesis on an FPGA. The advantage of our technique is that in the systems it generates data is never dropped, ignored, or accidentally duplicated, unlike in classical RTL coding, and the computed results are always the same, unlike in certain other parallel computing systems that are inherently nondeterministic.</p>\n<p>The broader impact of this work will be to enable the generation of custom, efficient hardware from higher-level descriptions, simplifying the lives of hardware designers and putting the power of custom hardware design into the hands of designers more familiar with software.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/04/2019<br>\n\t\t\t\t\tModified by: Stephen&nbsp;A&nbsp;Edwards</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goal of the FHW project was to produce a compiler able to translate programs written in a functional language (we chose Haskell) into synthesizable RTL (we chose SystemVerilog)suitable for execution on an FPGA or ASIC that was highly parallel. We ultimately producedsuch a compiler, relying on the Glasgow Haskell Compiler (GHC) as a front-end and writingour own back-end that performed a series of lowering transformations to restructure suchconstructs as recursion, polymorphism, and frst-order functions, into a form suitable forhardware, then transform the now-restricted functional IR into a datafow representation that is then finally transformed into synthesizable System Verilog.\n\nIn addition to the compiler transformations described above, we developed a library of compositional dataflow blocks and an \"assembler\" able to translate dataflow descriptions generated by our compiler into synthesizable System Verilog suitable for synthesis on an FPGA. The advantage of our technique is that in the systems it generates data is never dropped, ignored, or accidentally duplicated, unlike in classical RTL coding, and the computed results are always the same, unlike in certain other parallel computing systems that are inherently nondeterministic.\n\nThe broader impact of this work will be to enable the generation of custom, efficient hardware from higher-level descriptions, simplifying the lives of hardware designers and putting the power of custom hardware design into the hands of designers more familiar with software.\n\n\t\t\t\t\tLast Modified: 08/04/2019\n\n\t\t\t\t\tSubmitted by: Stephen A Edwards"
 }
}