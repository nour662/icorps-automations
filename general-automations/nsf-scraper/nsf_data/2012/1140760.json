{
 "awd_id": "1140760",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Collaborative Research: Teaching Software Modularity through Architectural Review",
 "cfda_num": "47.076",
 "org_code": "11040200",
 "po_phone": "7032922832",
 "po_email": "ptymann@nsf.gov",
 "po_sign_block_name": "Paul Tymann",
 "awd_eff_date": "2012-07-01",
 "awd_exp_date": "2015-06-30",
 "tot_intn_awd_amt": 95300.0,
 "awd_amount": 95300.0,
 "awd_min_amd_letter_date": "2012-07-03",
 "awd_max_amd_letter_date": "2012-07-03",
 "awd_abstract_narration": "Drexel University, Carnegie Mellon University and the University of Hawaii are advancing the education of software engineers through research on teaching software modularity. This project addresses designing for modularity with an approach based on design rule theory, design structure matrix modeling, and architecture review. Activities include development of labs and homework assignments featuring a series of evolution scenarios for realistic software applications. A teaching package which includes the activities, instructional materials, and a tool for detecting modularity problems is being constructed. The tool is used to identify design problems within student implementations. Several approaches to performing architecture reviews are being evaluated to determine which approach best helps students design better modularized software.\r\n\r\nDesigning for modularity is a fundamental topic in educating software engineers, yet there has been little rigorous research on how to teach it.  This project leverages research results to facilitate teaching practice and has the potential to advance our basic understanding of the causes of design problems that may eventually result in maintenance difficulties. Project results may fundamentally change the way software design is taught by introducing rigorous modularity analysis techniques and semi-automatic architecture review into the classroom, resulting in better trained software designers who are equipped with the knowledge, skills, and tools to produce software that incurs much lower maintenance costs.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "EDU",
 "org_dir_long_name": "Directorate for STEM Education",
 "div_abbr": "DUE",
 "org_div_long_name": "Division Of Undergraduate Education",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jonathan",
   "pi_last_name": "Aldrich",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jonathan Aldrich",
   "pi_email_addr": "jonathan.aldrich@cs.cmu.edu",
   "nsf_id": "000426894",
   "pi_start_date": "2012-07-03",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie-Mellon University",
  "perf_str_addr": "5000 Forbes Ave",
  "perf_city_name": "Pittsburgh",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133890",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "153600",
   "pgm_ele_name": "S-STEM-Schlr Sci Tech Eng&Math"
  },
  {
   "pgm_ele_code": "751300",
   "pgm_ele_name": "TUES-Type 1 Project"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "SMET",
   "pgm_ref_txt": "SCIENCE, MATH, ENG & TECH EDUCATION"
  }
 ],
 "app_fund": [
  {
   "app_code": "0412",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001213DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  },
  {
   "app_code": "13XX",
   "app_name": "H-1B FUND, EHR, NSF",
   "app_symb_id": "045176",
   "fund_code": "1300XXXXDB",
   "fund_name": "H-1B FUND, EDU, NSF",
   "fund_symb_id": "045176"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 95300.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\"><span class=\"s1\">The objective of this project was to advance our understanding of why students make modularity mistakes in software design and development, and how we can train students to correct these mistakes and avoid making them in the first place. We developed a set of review techniques and tools that address the shortcomings of existing approaches to teaching software design, so that modularity problems&mdash;primarily unwanted dependencies&mdash;in students&rsquo; implementation can be automatically detected, and so that students can better understand the negative implications of these dependencies.</span></p>\n<p class=\"p1\"><span class=\"s1\">&nbsp;</span>We have created a suite of pedagogical materials that we employed to understand why students make modularity mistakes and how to automatically detect these mistakes. These materials include: a pre-survey, several lab assignments, an associated architecture review form that guides the student in assessing the impacts of possible future changes, a model solution and associated DSM (design structure matrix) showing the modular structure of the model solution, and a post-survey.</p>\n<p class=\"p1\">We have conducted experiments at Drexel, Cal Poly, and CMU with approximately a total of 160 undergraduate students. The experiments revealed that even for the best students, who excel in programming and in the theory of design patterns, it is still extremely easy for them to unintentionally add extra dependencies, which seriously undermine the intent (and value) of those patterns. We also learned that a DSM, by itself, is not sufficient to aid the students in recognizing and correcting their mistakes. Our qualititative assessment is that the quality of the architectural reviews varied significantly in quality. Sometimes, instructors could not respond quickly and accurately to participants' suggestions for design changes. We therefore learned that architectural reviews require a very high amount of skill and practice to execute effectively. Scaling the technique to a large class is a future research challenge. Automation is likely required.</p>\n<p class=\"p2\"><span class=\"s1\">&nbsp;</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/04/2015<br>\n\t\t\t\t\tModified by: Jonathan&nbsp;Aldrich</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "The objective of this project was to advance our understanding of why students make modularity mistakes in software design and development, and how we can train students to correct these mistakes and avoid making them in the first place. We developed a set of review techniques and tools that address the shortcomings of existing approaches to teaching software design, so that modularity problems&mdash;primarily unwanted dependencies&mdash;in students\u00c6 implementation can be automatically detected, and so that students can better understand the negative implications of these dependencies.\n We have created a suite of pedagogical materials that we employed to understand why students make modularity mistakes and how to automatically detect these mistakes. These materials include: a pre-survey, several lab assignments, an associated architecture review form that guides the student in assessing the impacts of possible future changes, a model solution and associated DSM (design structure matrix) showing the modular structure of the model solution, and a post-survey.\nWe have conducted experiments at Drexel, Cal Poly, and CMU with approximately a total of 160 undergraduate students. The experiments revealed that even for the best students, who excel in programming and in the theory of design patterns, it is still extremely easy for them to unintentionally add extra dependencies, which seriously undermine the intent (and value) of those patterns. We also learned that a DSM, by itself, is not sufficient to aid the students in recognizing and correcting their mistakes. Our qualititative assessment is that the quality of the architectural reviews varied significantly in quality. Sometimes, instructors could not respond quickly and accurately to participants' suggestions for design changes. We therefore learned that architectural reviews require a very high amount of skill and practice to execute effectively. Scaling the technique to a large class is a future research challenge. Automation is likely required.\n \n\n \n\n\t\t\t\t\tLast Modified: 10/04/2015\n\n\t\t\t\t\tSubmitted by: Jonathan Aldrich"
 }
}