{
 "awd_id": "1161916",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Medium: Collaborative Research: Specification and Mathematics Engineering for the Verified Software End-Game",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2012-07-01",
 "awd_exp_date": "2017-06-30",
 "tot_intn_awd_amt": 242144.0,
 "awd_amount": 290144.0,
 "awd_min_amd_letter_date": "2012-06-20",
 "awd_max_amd_letter_date": "2016-04-01",
 "awd_abstract_narration": "Software is remarkably important to modern life.  The correct and secure behavior of software that controls nearly all major machines and communications systems, from aircraft and cars to medical records and financial transactions, is mission-critical and often can be a matter of life and death.  The current industry-standard method for assessing correctness of software, known as \"software testing\", is not foolproof.  This research project will combine the interdisciplinary expertise of the investigators in software engineering and mathematical logic to support a paradigm shift toward \"verified software\": programs that have been entirely and mechanically proved, using formal mathematical logic, to be correct relative to full behavioral specifications of what they are supposed to do and what they are not supposed to do.  Given the broad benefits of correct software to society and its impact on national competitiveness, a strong U.S. presence in verified software research and education must be a national priority.\r\n\r\nWhile transition of research ideas to practice will take time, the idea of a verifying compiler for sequential, object-based software is tantalizingly close to reality.  In what can be properly described as the \"end game\", extensive empirical studies of Verification Conditions (VCs) for correct software already have been undertaken.  VCs are assertions that establish that a program is correct if and only if they can be proved.  It has been observed that when VCs are not provable mechanically, the obstacles lie in proving VCs that are \"obvious\" to mathematicians, and in engineering specifications and supporting mathematics so they lead to VCs that are also \"obvious\" to automated provers.  The expected results of this project are programming language- and tool-independent improvements in automated software verification that will be widely applicable.  Another key project goal is integration of new concepts and tools supporting verified software into undergraduate and graduate Computer Science courses.  These efforts will contribute to development of a superior next-generation software engineering workforce.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Murali",
   "pi_last_name": "Sitaraman",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Murali Sitaraman",
   "pi_email_addr": "murali@clemson.edu",
   "nsf_id": "000269181",
   "pi_start_date": "2012-06-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Clemson University",
  "inst_street_address": "201 SIKES HALL",
  "inst_street_address_2": "",
  "inst_city_name": "CLEMSON",
  "inst_state_code": "SC",
  "inst_state_name": "South Carolina",
  "inst_phone_num": "8646562424",
  "inst_zip_code": "296340001",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "SC03",
  "org_lgl_bus_name": "CLEMSON UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "H2BMNX7DSKU8"
 },
 "perf_inst": {
  "perf_inst_name": "Clemson University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "SC",
  "perf_st_name": "South Carolina",
  "perf_zip_code": "296340001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "SC03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  },
  {
   "pgm_ele_code": "794400",
   "pgm_ele_name": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7925",
   "pgm_ref_txt": "LARGE PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 242144.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 8000.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goal of automated verification of software is to ensure that code correctly meets specifications on all valid inputs, with the understanding that the verification can be only as good as the specifications. The overall project objective is to understand how to engineer software components, their specifications and implementations, and the mathematics employed in the assertions so that verification can be automated.</p>\n<p>The intellectual merit outcomes of this project are the following: For automated verification to scale up, and be widely useable and generally applicable, it must be possible to write the necessary mathematics and specifications using standard logic, without being constrained by limitations of special-purpose solvers, and without requiring software developers to be directly involved in the proof process beyond supplying minimal code annotations. The project has demonstrated this possibility, among others, considering verification of both component-based \"clean\" software where explict aliasing is avoided and where unavoidable aliasing is captured through shared communal concepts. The scalability evaluation continues with a robust case study involving a dozen artifacts.</p>\n<p>For broader impact, the results of the project have been disseminated to research and education communities through publications and presentations. To enable easy access to results, Integrated Development Environments (IDE) backed by a verification engine have been developed. A web-based IDE has been used in graduate and undergraduate classrooms to teach software engineering and verification principles for several years, helping the results reach students at Clemson and elsewhere.&nbsp; The research efforts of students from a diverse background, including those of ten PhD students, two MS thesis students, and a dozen undergraduate REU students, have benefitted from the project.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/24/2017<br>\n\t\t\t\t\tModified by: Murali&nbsp;Sitaraman</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2017/1161916/1161916_10183010_1508700587316_figure_web_ide_2--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2017/1161916/1161916_10183010_1508700587316_figure_web_ide_2--rgov-800width.jpg\" title=\"Verified Component\"><img src=\"/por/images/Reports/POR/2017/1161916/1161916_10183010_1508700587316_figure_web_ide_2--rgov-66x44.jpg\" alt=\"Verified Component\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The illustration shows programmer-supplied code and annotations, and results from the verifier, using specifications (not shown)</div>\n<div class=\"imageCredit\">RESOLVE Software Research Group (RSRG), Clemson University</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Murali&nbsp;Sitaraman</div>\n<div class=\"imageTitle\">Verified Component</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2017/1161916/1161916_10183010_1508700868211_ide-overview2--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2017/1161916/1161916_10183010_1508700868211_ide-overview2--rgov-800width.jpg\" title=\"An F-IDE to Facilitate Verified Software Construction\"><img src=\"/por/images/Reports/POR/2017/1161916/1161916_10183010_1508700868211_ide-overview2--rgov-66x44.jpg\" alt=\"An F-IDE to Facilitate Verified Software Construction\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The illustration shows the interface of a Formalization IDE (Integrated Development Environment) to bring together mathematics and code to build verified software</div>\n<div class=\"imageCredit\">RESOLVE Software Research Group (RSRG), Clemson University</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Murali&nbsp;Sitaraman</div>\n<div class=\"imageTitle\">An F-IDE to Facilitate Verified Software Construction</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nThe goal of automated verification of software is to ensure that code correctly meets specifications on all valid inputs, with the understanding that the verification can be only as good as the specifications. The overall project objective is to understand how to engineer software components, their specifications and implementations, and the mathematics employed in the assertions so that verification can be automated.\n\nThe intellectual merit outcomes of this project are the following: For automated verification to scale up, and be widely useable and generally applicable, it must be possible to write the necessary mathematics and specifications using standard logic, without being constrained by limitations of special-purpose solvers, and without requiring software developers to be directly involved in the proof process beyond supplying minimal code annotations. The project has demonstrated this possibility, among others, considering verification of both component-based \"clean\" software where explict aliasing is avoided and where unavoidable aliasing is captured through shared communal concepts. The scalability evaluation continues with a robust case study involving a dozen artifacts.\n\nFor broader impact, the results of the project have been disseminated to research and education communities through publications and presentations. To enable easy access to results, Integrated Development Environments (IDE) backed by a verification engine have been developed. A web-based IDE has been used in graduate and undergraduate classrooms to teach software engineering and verification principles for several years, helping the results reach students at Clemson and elsewhere.  The research efforts of students from a diverse background, including those of ten PhD students, two MS thesis students, and a dozen undergraduate REU students, have benefitted from the project.\n\n\t\t\t\t\tLast Modified: 10/24/2017\n\n\t\t\t\t\tSubmitted by: Murali Sitaraman"
 }
}