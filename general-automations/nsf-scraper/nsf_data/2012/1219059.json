{
 "awd_id": "1219059",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF:Small: Data Triggered Threads for Removing Redundant Execution and Increasing Parallelism",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2012-06-01",
 "awd_exp_date": "2016-05-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2012-05-16",
 "awd_max_amd_letter_date": "2013-04-26",
 "awd_abstract_narration": "As high-performance general-purpose processors advance further into the chip multiprocessor era, with ever increasing core counts, the industry faces two huge challenges.  The first is how to effectively use that hardware parallelism when much of the available software does not parallelize easily.  The second challenge is managing the power and energy consumed by these processors.  Given constrained power, we can only scale performance if we improve the performance delivered per Watt.  \r\nData-triggered threads (DTT) is a new programming and execution model designed to address both of these issues.  Any conventional architecture that exploits parallelism does so by initiating new parallel computation based on control flow ? that is, execution (i.e., the core?s program counter) reaches a fork instruction or maybe a pthread create call. DTT instead spawns a new thread when data in memory is changed.  The programmer specifies a function that is not attached to a set of call sites (a place in the program where the function is called), but rather is attached to a variable or even a field in a data structure type.  When that variable is modified by the program, a thread in another core (or multithreading context) is automatically spawned to execute the data-triggered thread, containing code that depends on the changed data.\r\nData-triggered threads provide two key advantages over traditional mechanisms for describing parallelism.  The first is that the dependent computation becomes available immediately, as soon as the source data is modified.  The second is that the dependent computation need only be executed if the triggering data is actually modified ? in many cases it is not.  This work exploits a huge new opportunity to eliminate redundant computation. In the C SPEC benchmarks, 78% of loads are redundant (meaning the same load fetches the same value as the last time it went to the same address).  The computation which operates on those values is often also redundant. Researchers in computer architecture and related areas have been working to reduce the power consumed by each instruction, and have made steady progress. It is far preferable, though, to just not execute those instructions ? no power or energy optimization will beat that.\r\nThis research is exploring a number of opportunities to exploit this new execution model, including: (1) Data triggered threads via architectural support, (2) software-only data triggered threads, (3) data triggered threads to complement existing parallel applications, (4) automatic generation of data triggered threads in the compiler, and (5) programming experience with data triggered threads ? how does DTT code written from scratch differ from programs modified to use DTT, what kind of code will novice programmers produce, and how does that impact the architectural and software runtime implementations.\r\nGeneration-to-generation performance scaling of processors is critically important to the national and world economy ? not just to hardware vendors, but also the software industries that sell products every time someone upgrades their system. The data triggered threads programming and execution model represents solutions to the two key barriers to performance scaling. It addresses the parallelism crisis by giving the programmer a new way to express parallelism. It addresses the power problem in the most effective way possible ? by not executing computation that does not need to be done.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Dean",
   "pi_last_name": "Tullsen",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Dean M Tullsen",
   "pi_email_addr": "tullsen@cs.ucsd.edu",
   "nsf_id": "000461702",
   "pi_start_date": "2012-05-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-San Diego",
  "inst_street_address": "9500 GILMAN DR",
  "inst_street_address_2": "",
  "inst_city_name": "LA JOLLA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8585344896",
  "inst_zip_code": "920930021",
  "inst_country_name": "United States",
  "cong_dist_code": "50",
  "st_cong_dist_code": "CA50",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SAN DIEGO",
  "org_prnt_uei_num": "",
  "org_uei_num": "UYTTZT6G9DT1"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-San Diego",
  "perf_str_addr": "9500 Gilman Dr.",
  "perf_city_name": "La Jolla",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "920930404",
  "perf_ctry_code": "US",
  "perf_cong_dist": "50",
  "perf_st_cong_dist": "CA50",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7329",
   "pgm_ref_txt": "COMPILERS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>As the gap between available hardware parallelism and available software parallelism continues to widen (in most environments), the ability to continue to scale performance and increase computational efficiency requires the identification of new sources of parallelism.</p>\n<p>Data Triggered Threads (DTT) is a new programming and execution model which allows the programmer (or even automatic code generator) to express code such that is triggered not by normal control flow, but rather modification to a triggering data location. &nbsp;In this way, computation becomes available for parallel execution at the earliest possible instant, or in many cases the computation is found to be redundant (because the trigger is not changed) and can be safely skipped.</p>\n<p>The particular outcomes of this research demonstrate the utility and effectiveness of DTT, with a variety of research results, demonstration vehicles, and mechanisms for producing DTT code.</p>\n<p>(1) Hardware-supported DTT. &nbsp;With a few minor changes to a processor's instruction set architecture, and relatively small (e.g., hundreds of lines) changes to existing traditional code, the system achieves speedups averaging nearly 50%, and as high as 6X, over traditional serial code (SPEC).</p>\n<p>(2) &nbsp;Software-only DTT. &nbsp;By emulating the hardware support in software, the user can run DTT on existing systems, and often still see strong results. &nbsp;This is because much of our gain is from skipping redundant computation, in which case the higher overheads of our software approach are also skipped. &nbsp;There are moderate gains with SPEC, but averaging 8X (and as high as 100X) speedup over a wider range of applications.</p>\n<p>(3) Automatic Generation of DTT. &nbsp;Traditional code, without being transformed by the programmer, can still take advantage of the benefits of DTT, enabling speedup and energy gains, again often as a result of avoiding redundant computation from the original program. &nbsp;In this work, the compiler automatically generate the DTT code from the original. &nbsp;It demonstrates that the automatic compiler framework comes close to replicating the programmer-generated gains. &nbsp;Of particular interest is that the system is nearly as effective at identifying candidates for DTT triggers and code without any help from profiling to identify redundant code regions.</p>\n<p>(4) DTTs with massive parallelism. &nbsp;To avoid race conditions, the original DTT infrastructure exploited very minimal parallelism. &nbsp;This work redefines the interface, allowing the programmer to express dependences between DTT threads. &nbsp;By expressing even very traditional forms of parallelism in this way, strong advantages can be observed. &nbsp;For example, because the runtime knows the trigger address of every thread, it can create a schedule that balances both load balancing and data locality.</p>\n<p>(5) &nbsp;Delta Triggered Threads. &nbsp;DTT skips unnecessary redundant computation when the triggering data item is unchanged. &nbsp;Delta triggered threads adds to the approximate computing literature, providing a mechanism that can skip recomputation of outputs when an input change is small. &nbsp;Contrary to some forms of approximate computing, this gives the programmer direct control of approximate triggers, which part of the dependent computation can be deemed unnecessary, and specific tolerances that are used to guard the computation.</p>\n<p>This work resulted in a number of papers, an award paper (top picks in computer architecture, recognizing the top research publications from the prior year), a number of invited research and distinguished lecture talks at universities and industry locations, and a software infrastructure made available to other users to write DTT code and experiment with further innovations. &nbsp;Among the students who have worked on the project and been mentored by the PI, several are continuing students at UCSD, but one has gone on to a faculty position at NCSU, one has joined an industry startup, and an undergraduate has been accepted to a PhD program.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/08/2016<br>\n\t\t\t\t\tModified by: Dean&nbsp;M&nbsp;Tullsen</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nAs the gap between available hardware parallelism and available software parallelism continues to widen (in most environments), the ability to continue to scale performance and increase computational efficiency requires the identification of new sources of parallelism.\n\nData Triggered Threads (DTT) is a new programming and execution model which allows the programmer (or even automatic code generator) to express code such that is triggered not by normal control flow, but rather modification to a triggering data location.  In this way, computation becomes available for parallel execution at the earliest possible instant, or in many cases the computation is found to be redundant (because the trigger is not changed) and can be safely skipped.\n\nThe particular outcomes of this research demonstrate the utility and effectiveness of DTT, with a variety of research results, demonstration vehicles, and mechanisms for producing DTT code.\n\n(1) Hardware-supported DTT.  With a few minor changes to a processor's instruction set architecture, and relatively small (e.g., hundreds of lines) changes to existing traditional code, the system achieves speedups averaging nearly 50%, and as high as 6X, over traditional serial code (SPEC).\n\n(2)  Software-only DTT.  By emulating the hardware support in software, the user can run DTT on existing systems, and often still see strong results.  This is because much of our gain is from skipping redundant computation, in which case the higher overheads of our software approach are also skipped.  There are moderate gains with SPEC, but averaging 8X (and as high as 100X) speedup over a wider range of applications.\n\n(3) Automatic Generation of DTT.  Traditional code, without being transformed by the programmer, can still take advantage of the benefits of DTT, enabling speedup and energy gains, again often as a result of avoiding redundant computation from the original program.  In this work, the compiler automatically generate the DTT code from the original.  It demonstrates that the automatic compiler framework comes close to replicating the programmer-generated gains.  Of particular interest is that the system is nearly as effective at identifying candidates for DTT triggers and code without any help from profiling to identify redundant code regions.\n\n(4) DTTs with massive parallelism.  To avoid race conditions, the original DTT infrastructure exploited very minimal parallelism.  This work redefines the interface, allowing the programmer to express dependences between DTT threads.  By expressing even very traditional forms of parallelism in this way, strong advantages can be observed.  For example, because the runtime knows the trigger address of every thread, it can create a schedule that balances both load balancing and data locality.\n\n(5)  Delta Triggered Threads.  DTT skips unnecessary redundant computation when the triggering data item is unchanged.  Delta triggered threads adds to the approximate computing literature, providing a mechanism that can skip recomputation of outputs when an input change is small.  Contrary to some forms of approximate computing, this gives the programmer direct control of approximate triggers, which part of the dependent computation can be deemed unnecessary, and specific tolerances that are used to guard the computation.\n\nThis work resulted in a number of papers, an award paper (top picks in computer architecture, recognizing the top research publications from the prior year), a number of invited research and distinguished lecture talks at universities and industry locations, and a software infrastructure made available to other users to write DTT code and experiment with further innovations.  Among the students who have worked on the project and been mentored by the PI, several are continuing students at UCSD, but one has gone on to a faculty position at NCSU, one has joined an industry startup, and an undergraduate has been accepted to a PhD program.\n\n\t\t\t\t\tLast Modified: 09/08/2016\n\n\t\t\t\t\tSubmitted by: Dean M Tullsen"
 }
}