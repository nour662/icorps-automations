{
 "awd_id": "1219746",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Small: Abstract Semantic Processing for Script Security",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2012-09-01",
 "awd_exp_date": "2015-08-31",
 "tot_intn_awd_amt": 226935.0,
 "awd_amount": 226935.0,
 "awd_min_amd_letter_date": "2012-08-13",
 "awd_max_amd_letter_date": "2012-08-13",
 "awd_abstract_narration": "Much of the internet's business is conducted with dynamically generated documents --- HTML pages, SQL queries, and execution scripts --- that are generated on-the-fly by document-generator scripts written in PHP, Javascript, and JSP.  The situation is a threat to internet security because the document-generator scripts are often faulty, generating malformed documents that are vulnerable to attackers.  To remove this vulnerability, a new approach, abstract parsing, is developed and applied to enforce, in advance of execution, that every dynamically generated document emitted from a script will be grammatically well formed (spelled correctly).  The technique also predicts the range of semantics (intended meanings) of the generated documents, to help prevent attacker exploitation.  The impact of the research lies in its tools and methodologies to help programmers assemble a more secure internet.\r\n\r\nThe technical approach starts from a document-generator script and a context-free reference grammar for the document language and generates an LALR(1)-parser from the grammar, applying it within a data-flow analysis of the script to predict the LALR-grammatical structure of the string-documents to be generated by the script.  The analysis computes abstract LALR-parse stacks that overapproximate the grammatical structure of the string-documents that the script generates.  \r\nAttribute-grammar machinery predicts the context-sensitive and semantical properties of the documents to be generated.  The technology is applied to (i) generate a semantically-aware implementation of taint analysis; (ii) implement automata-defined filters for dynamic string updates; (iii) combine abstract-interpretation technology with abstract parsing to analyze a wider class of program constructions, in particular, dictionary data structures.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "David",
   "pi_last_name": "Schmidt",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "David A Schmidt",
   "pi_email_addr": "das@ksu.edu",
   "nsf_id": "000410449",
   "pi_start_date": "2012-08-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Kansas State University",
  "inst_street_address": "1601 VATTIER STREET",
  "inst_street_address_2": "103 FAIRCHILD HALL",
  "inst_city_name": "MANHATTAN",
  "inst_state_code": "KS",
  "inst_state_name": "Kansas",
  "inst_phone_num": "7855326804",
  "inst_zip_code": "665062504",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "KS01",
  "org_lgl_bus_name": "KANSAS STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "CFMMM5JM7HJ9"
 },
 "perf_inst": {
  "perf_inst_name": "Kansas State University",
  "perf_str_addr": "2 Fairchild Hall",
  "perf_city_name": "Manhattan",
  "perf_st_code": "KS",
  "perf_st_name": "Kansas",
  "perf_zip_code": "665061103",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "KS01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 226935.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project developed and implemented a methodology and a toolset that analyzes and validates, in advance of execution, scripts that dynamically generate HMTL, XML, and SQL documents assembled from strings generated by document-generator scripts.&nbsp; A script validated by the method is guaranteed to generate only grammatically well-formed string-documents. (Document-generating scripts are common to the World Wide Web and are notorious for generating faulty and even dangerous documents that generate server errors or security breaches. Precious little is available for checking these scripts in advance of their deployment.)<br /><br />Given a document-generator script (e.g., written in Javascript, PHP, JSP, etc.) and given the context-free reference grammar for the document language (e.g., a grammar for HTML), the analysis generates an LALR(1)-parser from the reference grammar and partially evaluates it within a data-flow analysis of the script to predict the LALR-grammatical structure of the string-documents to be generated by the script.&nbsp; The analysis does this by computing abstract LALR-parse stacks that overapproximate the structure of the string-documents that the script generates.&nbsp; The stacks encode the context-free structure of the documents, giving more precision than existing techniques.<br /><br />In addition, attribute-grammar machinery is used to predict the context-sensitive and semantical properties of the documents to be generated. Again, the analysis and validation is undertaken on the script itself prior to its deployment.<br /><br />The project improved abstract parsing to  handle attribute grammars, and we applied the improved method to  realistic application scripts written in JSP, a scripting language that  generates dynamically HTML documents.</p>\n<p>The abstract-parsing implementation was improved with a newly written  parser for PHP, the script-writing language that is analyzed.&nbsp; In  addition, the parser was augmented by \"error recovery\" routines that  repair the scripts when they generate faulty HTML output pages.</p>\n<dl class=\"clearing\"><dt>The improved tool was tested on a  standard test suite of PHP-coded, HTML-generating scripts, and the  results showed that the approach is useful in practice. In this way, we<br /></dt><dt>(i) validated the feasibility of abstract parsing extended with semantic-attribute processing, and</dt><dt>(ii) valdiated that abstract parsing was capable of not only   uncovering errors in PHP scripts that generate HTML documents but also   correcting those errors automatically.</dt><dd> </dd></dl>\n<p>The intellectual merit of the work lies in its synthesis of parsing theory, data-flow analysis, and semantic analysis to validate correctness of document-generator scripts in advance of their deployment. Once a script is validated, the documents generated by it must be correct &mdash; run-time monitoring is minimized or even unnecessary.<br /><br />The broader impact of the research lies in (i) making a more secure internet; (ii) constructing a tool that is used like a type checker to raise confidence in the correctness of a script; and (iii) developing a methodology that has potential to transform how practitioners approach dynamic document generation for the World Wide Web.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/20/2015<br>\n\t\t\t\t\tModified by: David&nbsp;A&nbsp;Schmidt</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project developed and implemented a methodology and a toolset that analyzes and validates, in advance of execution, scripts that dynamically generate HMTL, XML, and SQL documents assembled from strings generated by document-generator scripts.  A script validated by the method is guaranteed to generate only grammatically well-formed string-documents. (Document-generating scripts are common to the World Wide Web and are notorious for generating faulty and even dangerous documents that generate server errors or security breaches. Precious little is available for checking these scripts in advance of their deployment.)\n\nGiven a document-generator script (e.g., written in Javascript, PHP, JSP, etc.) and given the context-free reference grammar for the document language (e.g., a grammar for HTML), the analysis generates an LALR(1)-parser from the reference grammar and partially evaluates it within a data-flow analysis of the script to predict the LALR-grammatical structure of the string-documents to be generated by the script.  The analysis does this by computing abstract LALR-parse stacks that overapproximate the structure of the string-documents that the script generates.  The stacks encode the context-free structure of the documents, giving more precision than existing techniques.\n\nIn addition, attribute-grammar machinery is used to predict the context-sensitive and semantical properties of the documents to be generated. Again, the analysis and validation is undertaken on the script itself prior to its deployment.\n\nThe project improved abstract parsing to  handle attribute grammars, and we applied the improved method to  realistic application scripts written in JSP, a scripting language that  generates dynamically HTML documents.\n\nThe abstract-parsing implementation was improved with a newly written  parser for PHP, the script-writing language that is analyzed.  In  addition, the parser was augmented by \"error recovery\" routines that  repair the scripts when they generate faulty HTML output pages.\nThe improved tool was tested on a  standard test suite of PHP-coded, HTML-generating scripts, and the  results showed that the approach is useful in practice. In this way, we\n(i) validated the feasibility of abstract parsing extended with semantic-attribute processing, and(ii) valdiated that abstract parsing was capable of not only   uncovering errors in PHP scripts that generate HTML documents but also   correcting those errors automatically. \n\nThe intellectual merit of the work lies in its synthesis of parsing theory, data-flow analysis, and semantic analysis to validate correctness of document-generator scripts in advance of their deployment. Once a script is validated, the documents generated by it must be correct &mdash; run-time monitoring is minimized or even unnecessary.\n\nThe broader impact of the research lies in (i) making a more secure internet; (ii) constructing a tool that is used like a type checker to raise confidence in the correctness of a script; and (iii) developing a methodology that has potential to transform how practitioners approach dynamic document generation for the World Wide Web.\n\n\t\t\t\t\tLast Modified: 10/20/2015\n\n\t\t\t\t\tSubmitted by: David A Schmidt"
 }
}