{
 "awd_id": "1161775",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: Medium: Collaborative Research: Marrying program analysis and numerical search",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2012-09-01",
 "awd_exp_date": "2016-08-31",
 "tot_intn_awd_amt": 600000.0,
 "awd_amount": 600000.0,
 "awd_min_amd_letter_date": "2012-04-04",
 "awd_max_amd_letter_date": "2015-08-25",
 "awd_abstract_narration": "This research project explores ways to solve optimization problems where the targets of optimization are programs containing general-purpose control and data constructs. Such optimization questions arise often in the everyday practice of software engineering. While it may seem that standard optimization packages could solve these problems, it is often not so. White-box optimization approaches like linear programming are ruled out here because they only permit very restricted classes of objective functions. Black-box optimization techniques like gradient descent and Nelder-Mead search are applicable in principle, but they work well only in relatively smooth search spaces, and due to arbitrarily nested branches and loops, even simple programs can have highly irregular, ill-conditioned behavior.\r\n\r\nThe central insight guiding this project is that program analysis techniques from the field of formal reasoning about programs can work together with blackbox optimization toolkits, and make it possible to solve many more problems of the above sort than are currently possible. Ultimately, the project will produce a unified system for optimizing programs that can leverage flexible combinations of optimization techniques and program analysis strategies. As numerous real-world problems faced in the development of everyday software are optimization problems, this system will offer a new range of capabilities to the end programmer. In addition, the research will foster synergy between two different research areas customarily housed in different academic departments.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Armando",
   "pi_last_name": "Solar-Lezama",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Armando Solar-Lezama",
   "pi_email_addr": "asolar@csail.mit.edu",
   "nsf_id": "000541631",
   "pi_start_date": "2012-04-04",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394301",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 90695.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 377644.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 131661.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goal of this project was to develop techniques that combine discrete logical reasoning with numerical reasoning in order to solve challenging problems in program analysis and synthesis. Many problems arising in program analysis can be framed as optimization problems&mdash;examples include the generation of tests that lead to the worst possible complexity, and instantiation of program parameters so that a specification is followed as closely as possible. Numerical optimization would seem to be a natural approach to such optimization problems. Unfortunately, in practice, numerical methods tend to fare poorly in the setting of program analysis. The reason is fundamental: numerical methods work well only in relatively smooth search spaces, while the search spaces generated by programs tend to be highly discontinuous. To be used productively, numerical methods must be supplemented by insights about program semantics and symbolic reasoning about programs.</p>\n<p>As part of this project, we perfected a technique for smooth numerical search that uses program analysis to create a continuous approximation of an otherwise discontinuous program. Using this technique, we were able to solve parameter synthesis problems that would have been too difficult to solve using numerical search techniques on the original discontinuous program.</p>\n<p>We also developed a technique called smoothed numerical proof search, which uses numerical methods in combination with abstract interpretation in order to find parameters for a probabilistic program that allow it to satisfy a probabilistic guarantee. For example, suppose you want to prove that a thermostat will always keep a room within a given temperature range. In general, this would not be possible, because the temperature outside the room could reach such an extreme that the thermostat would not be able to keep up. However, one would like to be able to at least prove that given what we know about the distribution of possible outside temperatures, the probability that the temperature would fall outside the desired range is arbitrarily small. Our smoothed numerical search would allow you to discover the optimal parameters for the thermostat to ensure the desired bound on this probability of failure.</p>\n<p>A third major result developed under this project was to show that constraint based synthesis techniques could actually be effective in solving certain types of complicated optimization problems that arise in challenging AI problems. In particular, we have been studying the problem of unsupervised learning, where the goal is to synthesize a program that describes a process that can explain a series of observed outcomes. For example, one of the problems we have been studying is the problem of learning language morphology rules, where the goal is to discover, for example, the rule that allows you to produce the plural of a word. This is a challenging optimization problem, because given a finite set of observations, there is an infinite set of programs that could potentially produce those observations, but we are interested in finding the most likely. The inherently discrete structure of the language morphology rules that we are interested in discovering make this problem unsuitable to pure numerical search, but our new techniques proved very effective for this problem.</p>\n<p>Overall, the research supported by this project has led to a set of foundational techniques that could have a significant impact in a variety of fields. The results of this work have already been published at major conferences like POPL and NIPS, and could one day change the way we develop software, particularly for cyber-physical systems, where the combination of numerical and discrete logical reasoning will be essential.</p>\n<p>For further reading:</p>\n<p>Swarat Chaudhuri, Martin Clochard, Armando Solar-Lezama: Bridging boolean and quantitative synthesis using smoothed proof search. POPL 2014: 207-220</p>\n<p>Swarat Chaudhuri, Armando Solar-Lezama: Euler: A System for Numerical Optimization of Programs. CAV 2012: 732-737</p>\n<p>Kevin Ellis, Armando Solar-Lezama, Josh Tenenbaum: Sampling for Bayesian Program Learning. NIPS 2016: 1289-1297</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/09/2017<br>\n\t\t\t\t\tModified by: Armando&nbsp;Solar-Lezama</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goal of this project was to develop techniques that combine discrete logical reasoning with numerical reasoning in order to solve challenging problems in program analysis and synthesis. Many problems arising in program analysis can be framed as optimization problems&mdash;examples include the generation of tests that lead to the worst possible complexity, and instantiation of program parameters so that a specification is followed as closely as possible. Numerical optimization would seem to be a natural approach to such optimization problems. Unfortunately, in practice, numerical methods tend to fare poorly in the setting of program analysis. The reason is fundamental: numerical methods work well only in relatively smooth search spaces, while the search spaces generated by programs tend to be highly discontinuous. To be used productively, numerical methods must be supplemented by insights about program semantics and symbolic reasoning about programs.\n\nAs part of this project, we perfected a technique for smooth numerical search that uses program analysis to create a continuous approximation of an otherwise discontinuous program. Using this technique, we were able to solve parameter synthesis problems that would have been too difficult to solve using numerical search techniques on the original discontinuous program.\n\nWe also developed a technique called smoothed numerical proof search, which uses numerical methods in combination with abstract interpretation in order to find parameters for a probabilistic program that allow it to satisfy a probabilistic guarantee. For example, suppose you want to prove that a thermostat will always keep a room within a given temperature range. In general, this would not be possible, because the temperature outside the room could reach such an extreme that the thermostat would not be able to keep up. However, one would like to be able to at least prove that given what we know about the distribution of possible outside temperatures, the probability that the temperature would fall outside the desired range is arbitrarily small. Our smoothed numerical search would allow you to discover the optimal parameters for the thermostat to ensure the desired bound on this probability of failure.\n\nA third major result developed under this project was to show that constraint based synthesis techniques could actually be effective in solving certain types of complicated optimization problems that arise in challenging AI problems. In particular, we have been studying the problem of unsupervised learning, where the goal is to synthesize a program that describes a process that can explain a series of observed outcomes. For example, one of the problems we have been studying is the problem of learning language morphology rules, where the goal is to discover, for example, the rule that allows you to produce the plural of a word. This is a challenging optimization problem, because given a finite set of observations, there is an infinite set of programs that could potentially produce those observations, but we are interested in finding the most likely. The inherently discrete structure of the language morphology rules that we are interested in discovering make this problem unsuitable to pure numerical search, but our new techniques proved very effective for this problem.\n\nOverall, the research supported by this project has led to a set of foundational techniques that could have a significant impact in a variety of fields. The results of this work have already been published at major conferences like POPL and NIPS, and could one day change the way we develop software, particularly for cyber-physical systems, where the combination of numerical and discrete logical reasoning will be essential.\n\nFor further reading:\n\nSwarat Chaudhuri, Martin Clochard, Armando Solar-Lezama: Bridging boolean and quantitative synthesis using smoothed proof search. POPL 2014: 207-220\n\nSwarat Chaudhuri, Armando Solar-Lezama: Euler: A System for Numerical Optimization of Programs. CAV 2012: 732-737\n\nKevin Ellis, Armando Solar-Lezama, Josh Tenenbaum: Sampling for Bayesian Program Learning. NIPS 2016: 1289-1297\n\n\t\t\t\t\tLast Modified: 02/09/2017\n\n\t\t\t\t\tSubmitted by: Armando Solar-Lezama"
 }
}