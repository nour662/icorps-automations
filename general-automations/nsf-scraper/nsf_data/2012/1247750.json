{
 "awd_id": "1247750",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "BIGDATA: Mid-Scale: DCM: Collaborative Research: Eliminating the Data Ingestion Bottleneck in Big-Data Applications",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": "7032927347",
 "po_email": "sspengle@nsf.gov",
 "po_sign_block_name": "Sylvia Spengler",
 "awd_eff_date": "2013-02-01",
 "awd_exp_date": "2017-01-31",
 "tot_intn_awd_amt": 400000.0,
 "awd_amount": 406000.0,
 "awd_min_amd_letter_date": "2012-09-20",
 "awd_max_amd_letter_date": "2015-07-31",
 "awd_abstract_narration": "Big-data practice suggests that there is a tradeoff between the speed of data ingestion, the ability to answer queries quickly (e.g., via indexing), and the freshness of data.  This perceived tradeoff lies, for example, at the heart of the historic division between OLTP (online transaction processing) and OLAP (online analytical processing). In an OLTP database, data gets ingested quickly and the data available for querying is fresh, but analytical queries run prohibitively slowly. In an OLAP data warehouse, data is buffered for off-line indexing so that analytical queries run quickly, but by the time the data gets indexed, it is stale.   \r\n\r\nThis tradeoff has manifestations in the design of all types of storage systems. For example, some file-systems are optimized for reads and others for writes, but workloads generally involve a mixture of reads and writes.    \r\n\r\nIn this project the PIs show that this is not a fundamental tradeoff, but rather a tradeoff imposed by the choice of data structure. The PIs use write-optimized structures, an alternative to traditional indexing methodologies, to build storage systems in which this tradeoff is significantly mitigated or alleviated altogether.  The performance promise of such indexing schemes follows from the PIs previous work establishing that write-optimized data structures can speed up both inserts and queries.\r\n\r\nThis project addresses the remaining obstacles in the deployment of write-optimized indexes within big-data file-systems and databases.  Big data imposes a new set of constraints on any storage system, and the PIs will show how write-optimized indexing can yield order-of-magnitude performance improvements at scale.  In particular, this project will show that such techniques are not only applicable today but that they will scale with hardware trends, including the widespread adoption of solid-state disks (SSDs).",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Martin",
   "pi_last_name": "Farach-Colton",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Martin Farach-Colton",
   "pi_email_addr": "mlf9579@nyu.edu",
   "nsf_id": "000255442",
   "pi_start_date": "2012-09-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rutgers University New Brunswick",
  "inst_street_address": "3 RUTGERS PLZ",
  "inst_street_address_2": "",
  "inst_city_name": "NEW BRUNSWICK",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "8489320150",
  "inst_zip_code": "089018559",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "RUTGERS, THE STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "M1LVPE5GLSD9"
 },
 "perf_inst": {
  "perf_inst_name": "Rutgers University New Brunswick",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "089018559",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "NJ12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  },
  {
   "pgm_ele_code": "808300",
   "pgm_ele_name": "Big Data Science &Engineering"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7926",
   "pgm_ref_txt": "ALGORITHMS"
  },
  {
   "pgm_ref_code": "8083",
   "pgm_ref_txt": "Big Data Science &Engineering"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 400000.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 6000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-86d734ad-9472-894c-1fef-76bc8a46960c\"><span>In big data applications, records often arrive faster than they can be organized&nbsp;<span id=\"docs-internal-guid-86d734ad-9472-b43b-19bb-0c0a1df2d468\"><span>by traditional methods. &nbsp;Two recent technological&nbsp;<span id=\"docs-internal-guid-86d734ad-9473-13f2-6992-95c9842cfca9\"><span>developments show great promise in helping big data applications deal with high-bandwidth data streams: new algorithms and solid state disks. &nbsp;However, many challenges remain in using these technologies to their full potential.</span></span></span></span></span></span></p>\n<p>In this grant, we were able to show how to use these new technologies to achieve substantial performance gains in file systems and databases. &nbsp;We were also able to prove that these technologies are not a panacea: some performance improvements are beyond the research of what we now know, and substantial further improvements in our algorihtmic understanding and in our hardware will be necessary to make further progress.</p>\n<p>Specifically, we have built a file system called BetrFS. &nbsp;It is faster for many basic operations than traditional file systems. &nbsp;Recently, we showed that all but one major categories of file systems age, which means that their performance drops as they are used. &nbsp;The one class that does not age is the so-called write-optimized file systems, and in particular BetrFS.</p>\n<p>Bloom filters are a space-economial way to filter out search keys that do not appear in a set. &nbsp;They have been the subject on intensive research. &nbsp;We have shown that it is possible to make Bloom-filter alternatives that are both smaller (by 40%) and that interact mroe efficiently with the memory subsystem of the CPU.</p>\n<p>Querying a database is slower than updating it in most cases. &nbsp;We have shown how to piggy back queries onto insertions, in cases where the deadline for answering the query is not immediate. &nbsp;We call our approach lazy analytics.</p>\n<p>Finally, we have shown lower bounds in maintaining so-called compoud dictionaries. &nbsp;Consider the case of a (physical) library, where books may be organized by author in one index, by title in another, by call number in a third, etc. &nbsp;We have shown that fast deletions are not achievable in a system that simultaneously supports optimal queries.</p>\n<p>In short, we have achieved a wide range of improvements in the performance of basic infrastructure for large data, and we have shown that some performance in not achievable.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/03/2017<br>\n\t\t\t\t\tModified by: Martin&nbsp;Farach-Colton</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIn big data applications, records often arrive faster than they can be organized by traditional methods.  Two recent technological developments show great promise in helping big data applications deal with high-bandwidth data streams: new algorithms and solid state disks.  However, many challenges remain in using these technologies to their full potential.\n\nIn this grant, we were able to show how to use these new technologies to achieve substantial performance gains in file systems and databases.  We were also able to prove that these technologies are not a panacea: some performance improvements are beyond the research of what we now know, and substantial further improvements in our algorihtmic understanding and in our hardware will be necessary to make further progress.\n\nSpecifically, we have built a file system called BetrFS.  It is faster for many basic operations than traditional file systems.  Recently, we showed that all but one major categories of file systems age, which means that their performance drops as they are used.  The one class that does not age is the so-called write-optimized file systems, and in particular BetrFS.\n\nBloom filters are a space-economial way to filter out search keys that do not appear in a set.  They have been the subject on intensive research.  We have shown that it is possible to make Bloom-filter alternatives that are both smaller (by 40%) and that interact mroe efficiently with the memory subsystem of the CPU.\n\nQuerying a database is slower than updating it in most cases.  We have shown how to piggy back queries onto insertions, in cases where the deadline for answering the query is not immediate.  We call our approach lazy analytics.\n\nFinally, we have shown lower bounds in maintaining so-called compoud dictionaries.  Consider the case of a (physical) library, where books may be organized by author in one index, by title in another, by call number in a third, etc.  We have shown that fast deletions are not achievable in a system that simultaneously supports optimal queries.\n\nIn short, we have achieved a wide range of improvements in the performance of basic infrastructure for large data, and we have shown that some performance in not achievable.\n\n\t\t\t\t\tLast Modified: 03/03/2017\n\n\t\t\t\t\tSubmitted by: Martin Farach-Colton"
 }
}