{
 "awd_id": "1217582",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: A Framework for Self-Healing Multi-Threaded Software",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2012-08-01",
 "awd_exp_date": "2017-07-31",
 "tot_intn_awd_amt": 499999.0,
 "awd_amount": 499999.0,
 "awd_min_amd_letter_date": "2012-07-30",
 "awd_max_amd_letter_date": "2014-06-20",
 "awd_abstract_narration": "Bug fixing is time-consuming and error-prone. In the current multi-core era, widespread multi-threaded software and concurrency bugs make things even worse. Developers struggle to release correct patches for concurrency bugs on time. Much progress has been made in detecting concurrency bugs. Unfortunately, software reliability does not improve until the detected bugs are actually fixed.\r\n\r\nThis project aims to build an automated bug-fixing framework that enables self-healing multi-threaded software by combining the strengths of concurrency-bug detection, static analysis, and multi-threaded software testing. Specifically, the proposed framework will include four automated components: (1) a testing and bug-detection component that helps understand concurrency bugs and designs fix strategies; (2) a static analysis and code transformation component that inserts synchronization into software and generates high-quality patches; (3) a component that evaluates and refines patches; (4) a component that provides ad-hoc patches for bugs with incomplete information. This research will help lower the costs of software development, failure diagnosis, and bug repair. It will also improve software users everyday experience through faster and more reliable software on a wide spectrum of platforms.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Benjamin",
   "pi_last_name": "Liblit",
   "pi_mid_init": "R",
   "pi_sufx_name": "",
   "pi_full_name": "Benjamin R Liblit",
   "pi_email_addr": "liblit@cs.wisc.edu",
   "nsf_id": "000203014",
   "pi_start_date": "2014-06-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Shan",
   "pi_last_name": "Lu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Shan Lu",
   "pi_email_addr": "shanlu@cs.uchicago.edu",
   "nsf_id": "000552962",
   "pi_start_date": "2012-07-30",
   "pi_end_date": "2014-06-20"
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Benjamin",
   "pi_last_name": "Liblit",
   "pi_mid_init": "R",
   "pi_sufx_name": "",
   "pi_full_name": "Benjamin R Liblit",
   "pi_email_addr": "liblit@cs.wisc.edu",
   "nsf_id": "000203014",
   "pi_start_date": "2012-07-30",
   "pi_end_date": "2014-06-20"
  }
 ],
 "inst": {
  "inst_name": "University of Wisconsin-Madison",
  "inst_street_address": "21 N PARK ST STE 6301",
  "inst_street_address_2": "",
  "inst_city_name": "MADISON",
  "inst_state_code": "WI",
  "inst_state_name": "Wisconsin",
  "inst_phone_num": "6082623822",
  "inst_zip_code": "537151218",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "WI02",
  "org_lgl_bus_name": "UNIVERSITY OF WISCONSIN SYSTEM",
  "org_prnt_uei_num": "",
  "org_uei_num": "LCLSJAGTNZQ7"
 },
 "perf_inst": {
  "perf_inst_name": "University of Wisconsin-Madison",
  "perf_str_addr": "21 North Park Street",
  "perf_city_name": "Madison",
  "perf_st_code": "WI",
  "perf_st_name": "Wisconsin",
  "perf_zip_code": "537151218",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "WI02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 499999.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Computer technology is rapidly permeating all spheres of society. The work supported by this grant explored how to fix a particularly pernicious class of computer defects: <em>software concurrency bugs</em>. These elusive bugs arise when a computer system is performing multiple tasks simultaneously, and some of those tasks interfere with each other in destructive, unpredictable ways. Concurrency is becoming a ubiquitous feature of modern computer systems; unfortunately this means that concurrency bugs are ubiquitous as well. Our work aimed to help developers create reliable concurrent software, and especially to help them fix concurrency bugs quickly and correctly.</p>\n<p>Much prior work has looked at automatically <em>finding</em> concurrency bugs, and that&rsquo;s certainly a fine start. However, recognizing that a bug exists is only half of the battle. Someone still needs to <em>fix</em> the problem&rsquo;s root cause. This debugging task is difficult in general; it is especially slow and error-prone for concurrency bugs. With NSF&rsquo;s generous support, we created a series of tools that recognize and fix specific types of concurrency bug: <em>AFix</em> to repair atomicity violations, <em>OFix</em> to repair order violations, etc. Our work culminated in <em>CFix</em>, a complete, integrated system that automates repair of a wide variety of concurrency bugs. CFix works with a wide variety of concurrency-bug detectors. For each failure-inducing interleaving reported by a bug detector, CFix first identifies a combination of concurrency restrictions that, once enforced, can prevent the buggy interleaving. CFix then uses static analysis and testing to determine where to insert specific synchronization operations to force these restrictions, with a best effort to avoid deadlocks and excessive performance losses. CFix also simplifies its own patches by merging fixes for related bugs.</p>\n<p>Evaluation using four different types of bug detectors and thirteen real-world concurrency-bug cases shows that CFix can successfully patch these cases without causing deadlocks or excessive performance degradation. Patches automatically generated by CFix are of similar quality to those manually written by developers. An award nomination for part of this work cited it as &ldquo;one of the first papers to attack the problem of automated bug fixing&rdquo; of any kind. Thus, this represents a major step forward not only for concurrent software but also for reliable computing in general.</p>\n<p>Concurrency is the future: of this there is no doubt. Our ability to maintain software quality in that concurrent future is, however, very much in doubt. The scientific and technical advances sponsored by this research grant will help safeguard that future.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/30/2017<br>\n\t\t\t\t\tModified by: Benjamin&nbsp;R&nbsp;Liblit</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nComputer technology is rapidly permeating all spheres of society. The work supported by this grant explored how to fix a particularly pernicious class of computer defects: software concurrency bugs. These elusive bugs arise when a computer system is performing multiple tasks simultaneously, and some of those tasks interfere with each other in destructive, unpredictable ways. Concurrency is becoming a ubiquitous feature of modern computer systems; unfortunately this means that concurrency bugs are ubiquitous as well. Our work aimed to help developers create reliable concurrent software, and especially to help them fix concurrency bugs quickly and correctly.\n\nMuch prior work has looked at automatically finding concurrency bugs, and that?s certainly a fine start. However, recognizing that a bug exists is only half of the battle. Someone still needs to fix the problem?s root cause. This debugging task is difficult in general; it is especially slow and error-prone for concurrency bugs. With NSF?s generous support, we created a series of tools that recognize and fix specific types of concurrency bug: AFix to repair atomicity violations, OFix to repair order violations, etc. Our work culminated in CFix, a complete, integrated system that automates repair of a wide variety of concurrency bugs. CFix works with a wide variety of concurrency-bug detectors. For each failure-inducing interleaving reported by a bug detector, CFix first identifies a combination of concurrency restrictions that, once enforced, can prevent the buggy interleaving. CFix then uses static analysis and testing to determine where to insert specific synchronization operations to force these restrictions, with a best effort to avoid deadlocks and excessive performance losses. CFix also simplifies its own patches by merging fixes for related bugs.\n\nEvaluation using four different types of bug detectors and thirteen real-world concurrency-bug cases shows that CFix can successfully patch these cases without causing deadlocks or excessive performance degradation. Patches automatically generated by CFix are of similar quality to those manually written by developers. An award nomination for part of this work cited it as \"one of the first papers to attack the problem of automated bug fixing\" of any kind. Thus, this represents a major step forward not only for concurrent software but also for reliable computing in general.\n\nConcurrency is the future: of this there is no doubt. Our ability to maintain software quality in that concurrent future is, however, very much in doubt. The scientific and technical advances sponsored by this research grant will help safeguard that future.\n\n\t\t\t\t\tLast Modified: 10/30/2017\n\n\t\t\t\t\tSubmitted by: Benjamin R Liblit"
 }
}