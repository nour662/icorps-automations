{
 "awd_id": "1251312",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER:  A Study of the Limitations of Program Analysis for Autovectorization",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2012-09-15",
 "awd_exp_date": "2014-08-31",
 "tot_intn_awd_amt": 61227.0,
 "awd_amount": 61227.0,
 "awd_min_amd_letter_date": "2012-09-12",
 "awd_max_amd_letter_date": "2012-09-12",
 "awd_abstract_narration": "Most modern microprocessors support some form of vector operations that allow the same operation to be applied to small vectors of arguments simultaneously.  Studies have shown that use of these instructions can improve the performance of many scientific codes by a factor of 2 or more.  Unfortunately, the state of the art in autovectorization falls far short of this goal, only achieving improvements of 20-30% on the same codes.\r\n\r\nWhile studies have shown that current autovectorizing compilers do not identify all of the opportunities for vectorization, little is known about why they fail to do so.  Specifically, the project will focus on identifying weaknesses in compiler analyses that cause failures to vectorize.  The goal of this research is to identify a list of causes that are responsible for the vast majority of these failures.  This research will make it possible to develop better compiler analysis algorithms that will result in better autovectorizing compilers.  The performance benefits of such compilers will improve the performance of applications ranging from multimedia software to scientific computing.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "David",
   "pi_last_name": "Padua",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "David A Padua",
   "pi_email_addr": "padua@uiuc.edu",
   "nsf_id": "000317715",
   "pi_start_date": "2012-09-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Illinois at Urbana-Champaign",
  "inst_street_address": "506 S WRIGHT ST",
  "inst_street_address_2": "",
  "inst_city_name": "URBANA",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "2173332187",
  "inst_zip_code": "618013620",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "IL13",
  "org_lgl_bus_name": "UNIVERSITY OF ILLINOIS",
  "org_prnt_uei_num": "V2PHZ2CSCH63",
  "org_uei_num": "Y8CWNJRCNN91"
 },
 "perf_inst": {
  "perf_inst_name": "University of Illinois at Urbana-Champaign",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "618207473",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "IL13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7329",
   "pgm_ref_txt": "COMPILERS"
  },
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 61227.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Our objective in this project was to develop strategies to overcome the limitations of compilers when carrying out a translation known as vectorization. Compilers are the computer system components that translate high level languages, such as C or Fortran, onto machine language, the language that machines execute. The way compilers are implemented is of great importance since, when they do a good job, the machine code generated is faster, more efficient. For today&rsquo;s machines, an important part of this process of translation is vectorization, which is the agglomeration of operations to create vector instructions that execute a single operations on multiple pairs of operands. Generating, whenever possible, these vector instructions, instead of a single instruction for each operation, not only makes programs faster but also save energy.</p>\n<p>Although techniques for vectorization have been studied since the 1970s, recent studies show that compilers today still miss many opportunities to agglomerate operations. It is therefore important to work on improving compilers. In this project, we developed a tool, called VectorSeeker, to analyze programs looking for vectorization opportunities missed by compilers. The tool works by creating a trace (a list of the memory locations accessed by the program) and then analyze the trace seeking sets of operations that could be agglomerated. We expect VectorSeeker to help not only in the study of the effectiveness of compilers but also make it easier for programmers to overcome the limitations of compilers by manually translating their codes.</p>\n<p>Work on VectorSeeker continues under the sponsorship from the Department of Energy. Furthermore, what was learned in this project helped us put together an NSF proposal to the XPS program which was recently submitted.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/30/2015<br>\n\t\t\t\t\tModified by: David&nbsp;A&nbsp;Padua</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nOur objective in this project was to develop strategies to overcome the limitations of compilers when carrying out a translation known as vectorization. Compilers are the computer system components that translate high level languages, such as C or Fortran, onto machine language, the language that machines execute. The way compilers are implemented is of great importance since, when they do a good job, the machine code generated is faster, more efficient. For today\u00c6s machines, an important part of this process of translation is vectorization, which is the agglomeration of operations to create vector instructions that execute a single operations on multiple pairs of operands. Generating, whenever possible, these vector instructions, instead of a single instruction for each operation, not only makes programs faster but also save energy.\n\nAlthough techniques for vectorization have been studied since the 1970s, recent studies show that compilers today still miss many opportunities to agglomerate operations. It is therefore important to work on improving compilers. In this project, we developed a tool, called VectorSeeker, to analyze programs looking for vectorization opportunities missed by compilers. The tool works by creating a trace (a list of the memory locations accessed by the program) and then analyze the trace seeking sets of operations that could be agglomerated. We expect VectorSeeker to help not only in the study of the effectiveness of compilers but also make it easier for programmers to overcome the limitations of compilers by manually translating their codes.\n\nWork on VectorSeeker continues under the sponsorship from the Department of Energy. Furthermore, what was learned in this project helped us put together an NSF proposal to the XPS program which was recently submitted.\n\n \n\n\t\t\t\t\tLast Modified: 01/30/2015\n\n\t\t\t\t\tSubmitted by: David A Padua"
 }
}