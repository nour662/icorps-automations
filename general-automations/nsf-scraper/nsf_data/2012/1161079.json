{
 "awd_id": "1161079",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: MEDIUM: Achieving Software Reliability without True Test Oracles",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2012-09-01",
 "awd_exp_date": "2016-08-31",
 "tot_intn_awd_amt": 894582.0,
 "awd_amount": 894582.0,
 "awd_min_amd_letter_date": "2012-03-26",
 "awd_max_amd_letter_date": "2014-07-08",
 "awd_abstract_narration": "Conventional software testing checks whether each output is correct for the set of test inputs. But for some software, it is not known what the correct output should be for some inputs -- yet it is still important to detect coding errors in that software, so they can be fixed. This dilemma arises frequently for machine learning, simulation and optimization applications, often \"Programs which were written in order to determine the answer in the first place. There would be no need to write such programs, if the correct answer were known.\" As these kinds of applications are frequently used in public infrastructure and biomedical research (domains targeted in this research), it is critical to detect and fix errors before a calamity occurs.\r\n \r\nFortunately, many such applications reflect 'metamorphic properties' that define a relationship between pairs of inputs and outputs, such that for any previous input i with its already known output o, one can easily derive a test input i' and predict the expected output o'. If the actual output o'' is different from o', then there must be an error in the code. This project investigates methodology for determining the metamorphic properties of software and for devising good test cases from which the secondary tests can be derived. The project extends the inputs/outputs considered in previous work on metamorphic testing to focus on application state, before and after, rather than just functional parameters and results. The research also extends the pairwise relations implied by metamorphic properties to 'semantic similarity' for nondeterministic applications, applied to profiles from numerous executions, since an exact relation cannot be expected to hold for a single pair of test executions. These extensions enable treatment of more sophisticated properties that preliminary experiments have shown to reveal defects that were not detected otherwise.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Gail",
   "pi_last_name": "Kaiser",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Gail E Kaiser",
   "pi_email_addr": "kaiser@cs.columbia.edu",
   "nsf_id": "000094973",
   "pi_start_date": "2012-03-26",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Columbia University",
  "inst_street_address": "615 W 131ST ST",
  "inst_street_address_2": "MC 8741",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "2128546851",
  "inst_zip_code": "100277922",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "NY13",
  "org_lgl_bus_name": "THE TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK",
  "org_prnt_uei_num": "",
  "org_uei_num": "F4N1QNPB95M4"
 },
 "perf_inst": {
  "perf_inst_name": "Columbia University",
  "perf_str_addr": "1214 Amsterdam Avenue",
  "perf_city_name": "New York",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "100277003",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "NY13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 289247.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 298100.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 307235.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>It is well-known that most if not all software contains defects or flaws, often called \"bugs\". &nbsp;Some bugs are mild nuisances and can be ignored or worked around, but others can result in catastrophic and expensive failures. &nbsp;Software testing is the primary means by which software engineers seek to reduce the number of bugs, particularly the most severe bugs, by detecting them in advance so they can be fixed. &nbsp;The basic mechanism for testing is to choose a set of inputs deemed likely to trigger typical programming errors, run the software with those inputs safely in the development lab, and check that the results are correct. &nbsp;Unfortunately, this approach does not work very well for some kinds of software, where we do not always know what the result should be. &nbsp;One popular class of such software is known as \"machine learning\". &nbsp;We need a better approach to testing for bugs in such software.</p>\n<p>One approach, originally suggested by others, is to use technical knowledge called the \"metamorphic properties\" of the application, or of the domain, because it is often possible to check the metamorphic properties even when we cannot check the result. &nbsp;Metamorphic properties describe the relationship between pairs of executions, one test case with a known input and a known output (which we may not know is correct or incorrect), with a way to create a new test case where the new input is derived from the original input and the expected output is derived from the original output. &nbsp;If the actual output when we run the new test case does not match its expected output, we know there is a bug in the software, even though we do not know whether either output is correct (and they might both be wrong).</p>\n<p>But although it may be possible to determine the metamorphic properties of the software, so they can be checked during software testing, it is not always easy. &nbsp;Thus we investigated three ways to improve metamorphic testing and make it more practical. &nbsp;First, we developed techniques to automatically determine likely metamorphic properties for the software engineer to consider. &nbsp;Second, since it is often simpler to determine the metamorphic properties of small functional elements of a software application than the application as a whole, and because sometimes the full application does not even have usable metamorphic properties, we investigated how to check the metamorphic properties of individual functions as well as of the full application. Finally, we broadened the range of metamorphic properties that can be specified and checked to consider the application's internal state, since sometimes its hard or impossible to define a useful metamorphic property only considering the inputs and outputs. &nbsp;</p>\n<p>These improvements to metamorphic testing can also find bugs in conventional software, where software engineers can indeed check the outputs for correctness, but that are still not caught by conventional test cases. &nbsp;For example, sometimes errors build up in the internal state of an application, without being evident in the outputs until later.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/03/2016<br>\n\t\t\t\t\tModified by: Gail&nbsp;E&nbsp;Kaiser</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIt is well-known that most if not all software contains defects or flaws, often called \"bugs\".  Some bugs are mild nuisances and can be ignored or worked around, but others can result in catastrophic and expensive failures.  Software testing is the primary means by which software engineers seek to reduce the number of bugs, particularly the most severe bugs, by detecting them in advance so they can be fixed.  The basic mechanism for testing is to choose a set of inputs deemed likely to trigger typical programming errors, run the software with those inputs safely in the development lab, and check that the results are correct.  Unfortunately, this approach does not work very well for some kinds of software, where we do not always know what the result should be.  One popular class of such software is known as \"machine learning\".  We need a better approach to testing for bugs in such software.\n\nOne approach, originally suggested by others, is to use technical knowledge called the \"metamorphic properties\" of the application, or of the domain, because it is often possible to check the metamorphic properties even when we cannot check the result.  Metamorphic properties describe the relationship between pairs of executions, one test case with a known input and a known output (which we may not know is correct or incorrect), with a way to create a new test case where the new input is derived from the original input and the expected output is derived from the original output.  If the actual output when we run the new test case does not match its expected output, we know there is a bug in the software, even though we do not know whether either output is correct (and they might both be wrong).\n\nBut although it may be possible to determine the metamorphic properties of the software, so they can be checked during software testing, it is not always easy.  Thus we investigated three ways to improve metamorphic testing and make it more practical.  First, we developed techniques to automatically determine likely metamorphic properties for the software engineer to consider.  Second, since it is often simpler to determine the metamorphic properties of small functional elements of a software application than the application as a whole, and because sometimes the full application does not even have usable metamorphic properties, we investigated how to check the metamorphic properties of individual functions as well as of the full application. Finally, we broadened the range of metamorphic properties that can be specified and checked to consider the application's internal state, since sometimes its hard or impossible to define a useful metamorphic property only considering the inputs and outputs.  \n\nThese improvements to metamorphic testing can also find bugs in conventional software, where software engineers can indeed check the outputs for correctness, but that are still not caught by conventional test cases.  For example, sometimes errors build up in the internal state of an application, without being evident in the outputs until later.\n\n \n\n\t\t\t\t\tLast Modified: 10/03/2016\n\n\t\t\t\t\tSubmitted by: Gail E Kaiser"
 }
}