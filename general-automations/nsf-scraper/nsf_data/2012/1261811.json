{
 "awd_id": "1261811",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER:   Multilayer Code Synthesis For Correctness and Performance",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2012-08-13",
 "awd_exp_date": "2017-07-31",
 "tot_intn_awd_amt": 219571.0,
 "awd_amount": 219571.0,
 "awd_min_amd_letter_date": "2012-09-09",
 "awd_max_amd_letter_date": "2016-02-23",
 "awd_abstract_narration": "Correctness and performance are two of the most fundamental concerns in\r\nsoftware development. In particular,  the increasing complexity of modern \r\ncomputing environment has made it extremely difficult for software applications to be both correct and efficient. Software programs are frequently found to be flawed, and existing technology has fallen behind in providing the necessary programming language and tool support to ensure high quality software  development.  This research develops programming language as well as compiler analysis and optimization techniques to support the automated  translation of software from high-level design to low-level efficient implementations. \r\n\r\nThis research develops a multilayer code synthesis framework that systematically produces high-quality software by effectively combining software verification techniques with program analysis and compiler optimization in a three-phase translation process. First, starting from the software design phase,  the framework automatically translates formal software semantic specifications into object-oriented  or procedural implementations based on strategies selected by programmers. Then, based on knowledge from the software-design phase, a sequence of domain-specific optimizations is applied to the implementation to improve algorithm efficiency. Finally, architecture-specific optimizations are applied to performance-critical routines, and the optimized routines are empirically tuned as the application is ported to different machines. Different design and programming languages may be used in each translation phase, and software verification technology will be used to ensure the correctness of each translation. The research focuses on scientific computing and system software applications,  where both correctness and performance are of critical concern. The integrated research is expected to significantly improve both the trustworthiness and performance of existing software development.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Qing",
   "pi_last_name": "Yi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Qing Yi",
   "pi_email_addr": "yi7@llnl.gov",
   "nsf_id": "000492904",
   "pi_start_date": "2012-09-09",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Colorado at Colorado Springs",
  "inst_street_address": "1420 AUSTIN BLUFFS PKWY",
  "inst_street_address_2": "",
  "inst_city_name": "COLORADO SPRINGS",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "7192553153",
  "inst_zip_code": "809183733",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "CO05",
  "org_lgl_bus_name": "THE REGENTS OF THE UNIVERSITY OF COLORADO",
  "org_prnt_uei_num": "",
  "org_uei_num": "RH87YDXC1AY5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Colorado at Colorado Springs",
  "perf_str_addr": "1420 Austin Bluffs Parkway",
  "perf_city_name": "Colorado Springs",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "809183733",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "CO05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "732900",
   "pgm_ele_name": "COMPILERS"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "1187",
   "pgm_ref_txt": "PECASE- eligible"
  },
  {
   "pgm_ref_code": "9218",
   "pgm_ref_txt": "BASIC RESEARCH & HUMAN RESORCS"
  },
  {
   "pgm_ref_code": "HPCC",
   "pgm_ref_txt": "HIGH PERFORMANCE COMPUTING & COMM"
  }
 ],
 "app_fund": [
  {
   "app_code": "0110",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001011DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2010,
   "fund_oblg_amt": 43222.0
  },
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 95650.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 80699.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>For each of the major project goals, The outcocome is summarized in the following.</p>\n<p>1. Automatically translate software semantic specifications&nbsp;into object-oriented or procedural implementations based on strategies selected by programmers.</p>\n<p>Dr. Yi and her team have investigated using finite-state-machines to specify the control logics of object-oriented abstractions, using higher-level operations to specify the semantics of abstract data types, &nbsp;and runtime parameters to specify their use cases, and using higher-level operations to specify the synchronization strategies of concurrent data abstractions. The main outcome includes a preliminary design of an iFSM language which collectively specifies the control logic and implementation of an OO abstraction &nbsp;(published in ICSoft'2011), &nbsp;and a prototype compiler which automatically translates sequential implementations of data abstractions into concurrent ones based on user-specified synchronization strategies (work submitted for publication).</p>\n<p>2. Based on knowledge from the software-design phase, apply&nbsp;domain-specific optimizations to the implementation to improve algorithm efficiency.</p>\n<p>Research on this topic has mostly focused on pattern-driven specification of compiler optimizations to automatically generate highly efficient implementations of various computational kernels, annotation-driven of compiler analysis and optimizations, and&nbsp;&nbsp;automatic deployment of alternative data abstraction mplementations in multi-threaded applications. The main outcome includes several highly specialized compile-time optimizers dense matrix computations (published in SC'13 and MICRO'14) and stencil kernels (published in LCPC'16), extension of existing compilation techniques to better optimization scientific applications (published in ICPP'11, PACT'13, ICPP'13,Cluster'16), &nbsp;and a protytype compiler that semi-automatically replaces data abstraction implementations in multi-threaded applictions with additional support to optimize their surrounding synchronizations. (being revised for publication).</p>\n<p>3. Apply architecture-specific optimizations to&nbsp;performance-critical routines, with the optimized routines&nbsp;empirically tuned as the application is ported to different machines.</p>\n<p>Research on this topic has focused on developing an environment that provides to developers programmable control of parameterized compiler optimizations, automatic tuning of these optimizations for different architectures, and understanding of the performance implementations of various kernels. An infrastructure for programmable control of compiler optimizations have been developed (CGO'11, SPE'11, and LCPC'15), with a number of user-configuration strategies for tuning their configurations (HIPEAC'11,iWapt'11, NPC'10, SMART'10, ICMLA'16), and publications about the results of various performance studies (CF'11, CF'12, SPLASH'13, IPDPS'14, CF'15, IPDPD'16).</p>\n<p>4. Automatic verification of program correctness and discovery of design or implementation errors.</p>\n<p>Research on this topic includes the attempt of using model checking to automatically verify the control logics of object-oriented abstractions, using extended program analysis to automatically detect software vulnerabilities, and using Promela to automatically verify the correctness of synchronizations in concurrent data abstractions. Prelminary outcome includes a design of an iFSM language which collectively specifies the control logics of an anbstract and its implementation (ICSoft'11), static program analysis techniques to automatically detect information leakage in Javascript web extensions (WWW'2015), and a preliminary design of a small language for specifying synchronization strategies (not yet ready for publication). &nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/04/2017<br>\n\t\t\t\t\tModified by: Qing&nbsp;Yi</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nFor each of the major project goals, The outcocome is summarized in the following.\n\n1. Automatically translate software semantic specifications into object-oriented or procedural implementations based on strategies selected by programmers.\n\nDr. Yi and her team have investigated using finite-state-machines to specify the control logics of object-oriented abstractions, using higher-level operations to specify the semantics of abstract data types,  and runtime parameters to specify their use cases, and using higher-level operations to specify the synchronization strategies of concurrent data abstractions. The main outcome includes a preliminary design of an iFSM language which collectively specifies the control logic and implementation of an OO abstraction  (published in ICSoft'2011),  and a prototype compiler which automatically translates sequential implementations of data abstractions into concurrent ones based on user-specified synchronization strategies (work submitted for publication).\n\n2. Based on knowledge from the software-design phase, apply domain-specific optimizations to the implementation to improve algorithm efficiency.\n\nResearch on this topic has mostly focused on pattern-driven specification of compiler optimizations to automatically generate highly efficient implementations of various computational kernels, annotation-driven of compiler analysis and optimizations, and  automatic deployment of alternative data abstraction mplementations in multi-threaded applications. The main outcome includes several highly specialized compile-time optimizers dense matrix computations (published in SC'13 and MICRO'14) and stencil kernels (published in LCPC'16), extension of existing compilation techniques to better optimization scientific applications (published in ICPP'11, PACT'13, ICPP'13,Cluster'16),  and a protytype compiler that semi-automatically replaces data abstraction implementations in multi-threaded applictions with additional support to optimize their surrounding synchronizations. (being revised for publication).\n\n3. Apply architecture-specific optimizations to performance-critical routines, with the optimized routines empirically tuned as the application is ported to different machines.\n\nResearch on this topic has focused on developing an environment that provides to developers programmable control of parameterized compiler optimizations, automatic tuning of these optimizations for different architectures, and understanding of the performance implementations of various kernels. An infrastructure for programmable control of compiler optimizations have been developed (CGO'11, SPE'11, and LCPC'15), with a number of user-configuration strategies for tuning their configurations (HIPEAC'11,iWapt'11, NPC'10, SMART'10, ICMLA'16), and publications about the results of various performance studies (CF'11, CF'12, SPLASH'13, IPDPS'14, CF'15, IPDPD'16).\n\n4. Automatic verification of program correctness and discovery of design or implementation errors.\n\nResearch on this topic includes the attempt of using model checking to automatically verify the control logics of object-oriented abstractions, using extended program analysis to automatically detect software vulnerabilities, and using Promela to automatically verify the correctness of synchronizations in concurrent data abstractions. Prelminary outcome includes a design of an iFSM language which collectively specifies the control logics of an anbstract and its implementation (ICSoft'11), static program analysis techniques to automatically detect information leakage in Javascript web extensions (WWW'2015), and a preliminary design of a small language for specifying synchronization strategies (not yet ready for publication).  \n\n \n\n \n\n\t\t\t\t\tLast Modified: 09/04/2017\n\n\t\t\t\t\tSubmitted by: Qing Yi"
 }
}