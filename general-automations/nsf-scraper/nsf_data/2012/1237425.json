{
 "awd_id": "1237425",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Collaborative Research: Compiler and Architecture Support for Avoiding Writes to Memory-Preliminary Study",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2012-06-01",
 "awd_exp_date": "2014-05-31",
 "tot_intn_awd_amt": 74700.0,
 "awd_amount": 74700.0,
 "awd_min_amd_letter_date": "2012-05-01",
 "awd_max_amd_letter_date": "2012-05-01",
 "awd_abstract_narration": "The cost of writing data from a computer's processor to its storage components remains a bottleneck for modern computing systems.  The speed of the processor continues to improve, more processing units are packed into a computer chip, but these advances only cause more data to be written to storage per second.  The speed of storage subsystems has not kept pace with the processor?s ability to produce data for storage, and this difference in performance is likely to continue. Moreover, the trend in building storage subsystems for computers is to utilize technologies such as flash memories whose contents can be changed a relatively small number of times before the memory wears out.   These technologies are cheaper and pack more storage into a given area, but care must be taken to avoid writing to memories made from such technologies at rates usually seen from a processor to memory.\r\n\r\nThis EAGER project aims to discover mechanisms that reduce or eliminate traffic from a processor to the storage subsystem.  Elimination of such traffic increases the speed of the overall system and saves wear on storage components.  This research finds data that would otherwise be sent to storage from the processor and eliminates such writes to memory.  This technique is based on finding that such data cannot subsequently be referenced by an application.  This effort focuses on a preliminary study to validate the technical approach, namely investigating the consequences of eliminating stores of data that has been explicitly deallocated by an application.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ron",
   "pi_last_name": "Cytron",
   "pi_mid_init": "K",
   "pi_sufx_name": "",
   "pi_full_name": "Ron K Cytron",
   "pi_email_addr": "cytron@cs.wustl.edu",
   "nsf_id": "000374266",
   "pi_start_date": "2012-05-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Washington University",
  "inst_street_address": "1 BROOKINGS DR",
  "inst_street_address_2": "",
  "inst_city_name": "SAINT LOUIS",
  "inst_state_code": "MO",
  "inst_state_name": "Missouri",
  "inst_phone_num": "3147474134",
  "inst_zip_code": "631304862",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "MO01",
  "org_lgl_bus_name": "WASHINGTON UNIVERSITY, THE",
  "org_prnt_uei_num": "",
  "org_uei_num": "L6NFUM28LQM5"
 },
 "perf_inst": {
  "perf_inst_name": "Washington University",
  "perf_str_addr": "One Brookings Drive",
  "perf_city_name": "St Louis",
  "perf_st_code": "MO",
  "perf_st_name": "Missouri",
  "perf_zip_code": "631304862",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "MO01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7329",
   "pgm_ref_txt": "COMPILERS"
  },
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 74700.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Computers spend time and energy storing information to their memories.&nbsp;&nbsp; Researchers have tried several methods to eliminate these stores.&nbsp; Our research explored a new technique, namely discovering data that, even if written to memory, would never again be referenced by the program.&nbsp; We call such data \"dead by dirty\".&nbsp; It is <em>dead</em> in the sense that a program will never reference it again;&nbsp; because it is <em>dirty</em>, the computer platform would normally write such data out to its memory.</p>\n<p>The first image shows the fraction of writes that we can supress by our technique.&nbsp; The larger the cache memory, the more time we have to discover that data is dead before the space it occupies in the cache memory is needed for other data.&nbsp;&nbsp; Because the results trend upwards as the cache memory size increases, we show in the second image the resulst we obtain applying our technique to a much larger memory.&nbsp; A significant fraction of the write to memory can be saved.</p>\n<p><strong>Intellectual impact:&nbsp; </strong>We have investigated an entirely new approach to suppressing writes to memory and have shown that is effective.&nbsp; While the specific savings of energy and power are yet to be explored, a significant fraction of writes can be suppressed.&nbsp; For memory devices that wear out from use, such as popular flash memories, our technique can extend their life by 60%.</p>\n<p>&nbsp;</p>\n<p><strong>Broader impact:&nbsp; </strong>As a new techinque, it is likely that others will pick up on our approach and improve it using their own ideas.&nbsp;&nbsp; Also, this research has formed the basis of one doctoral student's dissertation.&nbsp; Two undergraduates participated in this research through a supplemental program that funds undergraduates to experience research.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/07/2014<br>\n\t\t\t\t\tModified by: Ron&nbsp;K&nbsp;Cytron</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2014/1237425/1237425_10169224_1412699628368_squashl1--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2014/1237425/1237425_10169224_1412699628368_squashl1--rgov-800width.jpg\" title=\"Fraction of writes squashed in L1\"><img src=\"/por/images/Reports/POR/2014/1237425/1237425_10169224_1412699628368_squashl1--rgov-66x44.jpg\" alt=\"Fraction of writes squashed in L1\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The improvement due to our technique in the cache memory closest to the processor</div>\n<div class=\"imageCredit\">MSPC 2014</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Ron&nbsp;K&nbsp;Cytron</div>\n<div class=\"imageTitle\">Fraction of writes squashed in L1</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2014/1237425/1237425_10169224_1412699680206_squashl2--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2014/1237425/1237425_10169224_1412699680206_squashl2--rgov-800width.jpg\" title=\"Fraction of writes squashed in L2\"><img src=\"/por/images/Reports/POR/2014/1237425/1237425_10169224_1412699680206_squashl2--rgov-66x44.jpg\" alt=\"Fraction of writes squashed in L2\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The potential savings using our approach in larger cache memories</div>\n<div class=\"imageCredit\">MSPC 2014</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Ron&nbsp;K&nbsp;Cytron</div>\n<div class=\"im...",
  "por_txt_cntn": "\nComputers spend time and energy storing information to their memories.   Researchers have tried several methods to eliminate these stores.  Our research explored a new technique, namely discovering data that, even if written to memory, would never again be referenced by the program.  We call such data \"dead by dirty\".  It is dead in the sense that a program will never reference it again;  because it is dirty, the computer platform would normally write such data out to its memory.\n\nThe first image shows the fraction of writes that we can supress by our technique.  The larger the cache memory, the more time we have to discover that data is dead before the space it occupies in the cache memory is needed for other data.   Because the results trend upwards as the cache memory size increases, we show in the second image the resulst we obtain applying our technique to a much larger memory.  A significant fraction of the write to memory can be saved.\n\nIntellectual impact:  We have investigated an entirely new approach to suppressing writes to memory and have shown that is effective.  While the specific savings of energy and power are yet to be explored, a significant fraction of writes can be suppressed.  For memory devices that wear out from use, such as popular flash memories, our technique can extend their life by 60%.\n\n \n\nBroader impact:  As a new techinque, it is likely that others will pick up on our approach and improve it using their own ideas.   Also, this research has formed the basis of one doctoral student's dissertation.  Two undergraduates participated in this research through a supplemental program that funds undergraduates to experience research.\n\n\t\t\t\t\tLast Modified: 10/07/2014\n\n\t\t\t\t\tSubmitted by: Ron K Cytron"
 }
}