{
 "awd_id": "1252358",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Dynamic Data Path Management for Asynchronous Vertical Storage Hierarchy",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": "7032927347",
 "po_email": "sspengle@nsf.gov",
 "po_sign_block_name": "Sylvia Spengler",
 "awd_eff_date": "2012-06-01",
 "awd_exp_date": "2014-08-31",
 "tot_intn_awd_amt": 248130.0,
 "awd_amount": 248130.0,
 "awd_min_amd_letter_date": "2012-09-19",
 "awd_max_amd_letter_date": "2012-09-19",
 "awd_abstract_narration": "Humankind's knowledge of the world and its ability to manipulate it for the betterment of quality of life and understanding through science, technology, engineering, and mathematics (STEM) is increasingly dependent on the ability to store, access, and manage extremely large persistent data sets representing scientific and process measurements, results from science and engineering simulations, and long-term knowledge. Supercomputers conventionally operate in dual or separate modes: one to do the computations in their temporary (ephemeral)-main memory-and the other to supervise the use of large persistent data storage. As supercomputers get larger, perhaps to the scale of an Exaflops by the end of this decade, the comparable scale and ease of use of mass storage is severely challenged. This research will address the problems of efficiency and scalability of data migration through the vertical memory hierarchy and will unify the way both main memory data objects and persistent storage data are named creating a single, easy to use programming. This will revolutionize data intensive supercomputing and establish a new path towards future Exascale system design and programming. This research is in collaboration with Clemson University to provide a proof-of-concept system to evaluate the new concepts.\r\n\r\nThe semantic and performance barriers between computing in main memory and manipulation of mass storage for persistent data have imposed significant limitations to performance and programmability. Because of uncertainties of access latency times combined with overheads and the need to exploit data access parallelism for high throughput, a new relationship between ephemeral storage and persistent objects is needed to unify their association and manage the asynchrony of operation while achieving high efficiency. This research is deriving an innovative execution model and developing a proof-of-concept experimental system to test and evaluate its underlying concepts for a new generation of persistent mass storage at extreme scale. It will address the challenges and provide the means for the unification of the semantics of ephemeral and mass storage through a single abstraction of data manipulation and the integration of meta-data and synchronization to manage asynchrony and uncertainty of response time as well as logical conflicting accesses while automatically hiding latency. The new model will support dynamic data path management for the asynchronous vertical storage hierarchy, exploiting adaptive runtime event-driven techniques for enhanced efficiency and scalability including management of vertical transport of data, which demands an innovative strategy of dynamic control of the entire data path.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Maciej",
   "pi_last_name": "Brodowicz",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Maciej Brodowicz",
   "pi_email_addr": "simultac@gmail.com",
   "nsf_id": "000492001",
   "pi_start_date": "2012-09-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Indiana University",
  "inst_street_address": "107 S INDIANA AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BLOOMINGTON",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "3172783473",
  "inst_zip_code": "474057000",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "IN09",
  "org_lgl_bus_name": "TRUSTEES OF INDIANA UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "YH86RTW2YVJ4"
 },
 "perf_inst": {
  "perf_inst_name": "Indiana University",
  "perf_str_addr": "509 E 3rd St.",
  "perf_city_name": "Bloomington",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "474013654",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "IN09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "170E",
   "pgm_ref_txt": "Interagency Agreements"
  },
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112RB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 248129.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The outcomes of the project fall into three primary categories: development of the foundational concepts governing the definition and manipulation of persistent objects, their implementation in the HPX (High-Performance ParalleX) runtime system layer, and performance evaluation using both synthetic and actual scientific applications. Below we briefly discuss each of them.</p>\n<p><br />1.&nbsp;&nbsp;&nbsp; Principal Concepts<br />IU has developed innovative concepts to guide the unification of main memory and mass storage through the introduction of persistent storage objects and the software technologies to implement them. PXFS is a proof-of-concept system that unifies the name spaces and semantics of information manipulation in both main memory and disk mass storage to provide a single information storage framework. An object of persistent storage is conceived to incorporate three critical properties: 1) structured naming is consistent with that of regular variables for similar access, 2) different elements of persistent objects may be distributed vertically across the storage layers, and 3) metadata integrating control constructs for event-driven management of computation to mitigate asynchronous behavior. Migration of persistent object elements across vertical layers is declarative in terms of defined behavior properties rather than imperative under programmer control, eliminating programmer burden and exploiting runtime information for efficiency of lateral and vertical distribution. This framework adds significant enhancements to the ParalleX execution model and their implementation within an HPX-3 runtime system and the OrangeFS mass storage management system.</p>\n<p>Unification of name space is one of the two major contributions of this research. Access to objects in main memory and those in secondary storage is achieved through the same semantic constructs. The reason for this is productivity and portability. Productivity is achieved by the user not having to micromanage the intimate details of data movement. Portability is achieved by the meaning of effect being asserted across system scales, system types, and system generations.</p>\n<p>The use of mass storage imposes three or more orders of magnitude of latency on to access of data. Worse, it creates uncertainty about what that latency is going to be because previously used data may be cached in main memory buffers or in an arbitrary layer of storage hierarchy below it. This results in a level of asynchrony that is comparable to that of a large distributed system (cloud). The concept of persistent storage being developed addresses this asynchrony transparently.&nbsp; Access requests presume the automatic use of the futures construct. A future, as opposed to the variable value for which it is a surrogate, upon incidence of an access immediately returns the equivalent of an IOU to the requesting agent. One of three things happens: 1) the value of the persistent variable is already in main memory and so is delivered, 2) the reference link is available to be used such as in the creation of metadata for complex data structures where the value itself is not to be immediately operated upon, or 3) the value is needed and the calling sequence is suspended. In the last case, the future behaves as a Local Control Object whose state can be altered by external incident events and under certain circumstances result in the creation, or renewal of a thread. In the case of a persistent object, the future restarts the requesting thread when the value of the accessed variable has become available from the mass storage subsystem.</p>\n<p><br />2.&nbsp;&nbsp;&nbsp; Implementation<br />The architecture of the implemented I/O subsystem is shown in Figure 1. This approach is fully integrated with the HPX runtime system and enables usage of multiple file storage backends, in particular, OrangeFS. The implementation permits issue o...",
  "por_txt_cntn": "\nThe outcomes of the project fall into three primary categories: development of the foundational concepts governing the definition and manipulation of persistent objects, their implementation in the HPX (High-Performance ParalleX) runtime system layer, and performance evaluation using both synthetic and actual scientific applications. Below we briefly discuss each of them.\n\n\n1.    Principal Concepts\nIU has developed innovative concepts to guide the unification of main memory and mass storage through the introduction of persistent storage objects and the software technologies to implement them. PXFS is a proof-of-concept system that unifies the name spaces and semantics of information manipulation in both main memory and disk mass storage to provide a single information storage framework. An object of persistent storage is conceived to incorporate three critical properties: 1) structured naming is consistent with that of regular variables for similar access, 2) different elements of persistent objects may be distributed vertically across the storage layers, and 3) metadata integrating control constructs for event-driven management of computation to mitigate asynchronous behavior. Migration of persistent object elements across vertical layers is declarative in terms of defined behavior properties rather than imperative under programmer control, eliminating programmer burden and exploiting runtime information for efficiency of lateral and vertical distribution. This framework adds significant enhancements to the ParalleX execution model and their implementation within an HPX-3 runtime system and the OrangeFS mass storage management system.\n\nUnification of name space is one of the two major contributions of this research. Access to objects in main memory and those in secondary storage is achieved through the same semantic constructs. The reason for this is productivity and portability. Productivity is achieved by the user not having to micromanage the intimate details of data movement. Portability is achieved by the meaning of effect being asserted across system scales, system types, and system generations.\n\nThe use of mass storage imposes three or more orders of magnitude of latency on to access of data. Worse, it creates uncertainty about what that latency is going to be because previously used data may be cached in main memory buffers or in an arbitrary layer of storage hierarchy below it. This results in a level of asynchrony that is comparable to that of a large distributed system (cloud). The concept of persistent storage being developed addresses this asynchrony transparently.  Access requests presume the automatic use of the futures construct. A future, as opposed to the variable value for which it is a surrogate, upon incidence of an access immediately returns the equivalent of an IOU to the requesting agent. One of three things happens: 1) the value of the persistent variable is already in main memory and so is delivered, 2) the reference link is available to be used such as in the creation of metadata for complex data structures where the value itself is not to be immediately operated upon, or 3) the value is needed and the calling sequence is suspended. In the last case, the future behaves as a Local Control Object whose state can be altered by external incident events and under certain circumstances result in the creation, or renewal of a thread. In the case of a persistent object, the future restarts the requesting thread when the value of the accessed variable has become available from the mass storage subsystem.\n\n\n2.    Implementation\nThe architecture of the implemented I/O subsystem is shown in Figure 1. This approach is fully integrated with the HPX runtime system and enables usage of multiple file storage backends, in particular, OrangeFS. The implementation permits issue of typically blocking I/O calls by user-level threads, however, the blocking is avoided by offloading the processing of the requests to dedica..."
 }
}