{
 "awd_id": "1247726",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "BIGDATA: Mid-Scale: DCM: Collaborative Research: Eliminating the Data Ingestion Bottleneck in Big Data Applications",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": "7032927347",
 "po_email": "sspengle@nsf.gov",
 "po_sign_block_name": "Sylvia Spengler",
 "awd_eff_date": "2013-02-01",
 "awd_exp_date": "2019-01-31",
 "tot_intn_awd_amt": 800000.0,
 "awd_amount": 812000.0,
 "awd_min_amd_letter_date": "2012-09-20",
 "awd_max_amd_letter_date": "2015-08-04",
 "awd_abstract_narration": "Big-data practice suggests that there is a tradeoff between the speed of data ingestion, the ability to answer queries quickly (e.g., via indexing), and the freshness of data. This perceived tradeoff lies, for example, at the heart of the historic division between OLTP (online transaction processing) and OLAP (online analytical processing). In an OLTP database, data gets ingested quickly and the data available for querying is fresh, but analytical queries run prohibitively slowly. In an OLAP data warehouse, data is buffered for off-line indexing so that analytical queries run quickly, but by the time the data gets indexed, it is stale. \r\n\r\nThis tradeoff has manifestations in the design of all types of storage systems. For example, some file-systems are optimized for reads and others for writes, but workloads generally involve a mixture of reads and writes. \r\n\r\nIn this project the PIs show that this is not a fundamental tradeoff, but rather a tradeoff imposed by the choice of data structure. The PIs use write-optimized structures, an alternative to traditional indexing methodologies, to build storage systems in which this tradeoff is significantly mitigated or alleviated altogether. The performance promise of such indexing schemes follows from the PIs previous work establishing that write-optimized data structures can speed up both inserts and queries. \r\n\r\nThis project addresses the remaining obstacles in the deployment of write-optimized indexes within big-data file-systems and databases. Big data imposes a new set of constraints on any storage system, and the PIs will show how write-optimized indexing can yield order-of-magnitude performance improvements at scale. In particular, this project will show that such techniques are not only applicable today but that they will scale with hardware trends, including the widespread adoption of solid-state disks (SSDs).",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Bender",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Michael A Bender",
   "pi_email_addr": "bender@cs.stonybrook.edu",
   "nsf_id": "000092778",
   "pi_start_date": "2012-09-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Rob",
   "pi_last_name": "Johnson",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Rob Johnson",
   "pi_email_addr": "rob@cs.stonybrook.edu",
   "nsf_id": "000252323",
   "pi_start_date": "2012-09-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "SUNY at Stony Brook",
  "inst_street_address": "W5510 FRANKS MELVILLE MEMORIAL LIBRARY",
  "inst_street_address_2": "",
  "inst_city_name": "STONY BROOK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6316329949",
  "inst_zip_code": "117940001",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "NY01",
  "org_lgl_bus_name": "THE RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK",
  "org_prnt_uei_num": "M746VC6XMNH9",
  "org_uei_num": "M746VC6XMNH9"
 },
 "perf_inst": {
  "perf_inst_name": "SUNY at Stony Brook",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "117944400",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "NY01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  },
  {
   "pgm_ele_code": "808300",
   "pgm_ele_name": "Big Data Science &Engineering"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7926",
   "pgm_ref_txt": "ALGORITHMS"
  },
  {
   "pgm_ref_code": "8083",
   "pgm_ref_txt": "Big Data Science &Engineering"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 800000.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 12000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<p><br />The PIs helped developed a foundational theory for designing and optimizing write-optimized data structures.&nbsp; Write-optimized data structures enable indexing schemes that support insertions two orders-of-magnitude faster than B-trees, the standard data structure used in storage systems for over four decades.&nbsp;<br /><br />Such data structures are now used in production in databases and are starting to appear in file systems. The PIs also played a significant role in the deployment of these data structures in both file systems and databases.<br />The foundational work in this project establishes that it is possible to optimize simultaneously for reads and writes in a general&shy;-purpose file system or data structure. Moreover, write&shy;-optimized storage need not \"age\" or fragment.<br /><br />To help write-optimized data structures, the PIs developed the foundational theory and implementations of the quotient filter, a fast, space-efficient, operation-rich, SSD-friendly, adaptive alternative to the Bloom filter.&nbsp; The quotient filter work already has third&shy;-party implementations, with applications to file systems, databases, and computational biology (e.g., DNA sequencing).&nbsp;<br /><br />The results in this project help other data&shy;-driven disciplines by improving the theoretical bounds and practical performance of I/O-intensive applications. The research in this project helps explain how to build more efficient storage systems, which themselves serve as the underlying software supporting other areas of science and engineering.<br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/01/2019<br>\n\t\t\t\t\tModified by: Michael&nbsp;A&nbsp;Bender</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \n\n\nThe PIs helped developed a foundational theory for designing and optimizing write-optimized data structures.  Write-optimized data structures enable indexing schemes that support insertions two orders-of-magnitude faster than B-trees, the standard data structure used in storage systems for over four decades. \n\nSuch data structures are now used in production in databases and are starting to appear in file systems. The PIs also played a significant role in the deployment of these data structures in both file systems and databases.\nThe foundational work in this project establishes that it is possible to optimize simultaneously for reads and writes in a general&shy;-purpose file system or data structure. Moreover, write&shy;-optimized storage need not \"age\" or fragment.\n\nTo help write-optimized data structures, the PIs developed the foundational theory and implementations of the quotient filter, a fast, space-efficient, operation-rich, SSD-friendly, adaptive alternative to the Bloom filter.  The quotient filter work already has third&shy;-party implementations, with applications to file systems, databases, and computational biology (e.g., DNA sequencing). \n\nThe results in this project help other data&shy;-driven disciplines by improving the theoretical bounds and practical performance of I/O-intensive applications. The research in this project helps explain how to build more efficient storage systems, which themselves serve as the underlying software supporting other areas of science and engineering.\n\n\n\n\t\t\t\t\tLast Modified: 05/01/2019\n\n\t\t\t\t\tSubmitted by: Michael A Bender"
 }
}