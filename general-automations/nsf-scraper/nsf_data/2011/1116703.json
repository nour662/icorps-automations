{
 "awd_id": "1116703",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Foundations and Applications of Higher-Dimensional Directed Type Theory",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2015-07-31",
 "tot_intn_awd_amt": 499965.0,
 "awd_amount": 542965.0,
 "awd_min_amd_letter_date": "2011-07-18",
 "awd_max_amd_letter_date": "2014-06-06",
 "awd_abstract_narration": "A central objective for computer science is to develop methods for building\r\nreliable and maintainable software.  The most important technique for ensuring\r\nthese properties is abstraction, the decomposition of a system into separable\r\nand reusable components.  The theory of abstraction in programming is called\r\ntype theory.  A type is a specification of the behavior of a software component;\r\ntype checking ensures that programs obey these specifications.  This ensures\r\nthat components can be modified or replaced without fear of disrupting the\r\nbehavior of other components.  By supporting the expression and enforcement of\r\ncomponent behaviors, type theory integrates programming with verification, the\r\nprocess of ensuring compliance with specifications.  All modern programming\r\nlanguages and development methodologies are based on, or draw inspiration from,\r\ntype theory.  The broad goal of this project is to extend the capabilities of\r\ntype theory to a wider range of properties, and to use type theory to facilitate\r\nthe development of reliable software.\r\n\r\nSpecifically, the research will develop the theory of higher-dimensional type\r\ntheory, and explore its application to generic programming, a technique\r\nfor generating programs from their specifications.  Higher-dimensional\r\ntype theory draws on recent advances in category theory and algebraic\r\ntopology that emphasize the algebraic structure of relations between\r\nprograms, and relations between such relations, in direct analogy with\r\nthe higher-dimensional structure of topological spaces.  In this setting\r\ndependent families of types must respect the algebraic structure of such\r\nrelations, and in doing so, they implicitly provide transformations that\r\ncorrespond to generic programs whose behavior is determined by their\r\ntype.  More broadly, the project will apply ideas from category theory\r\nand topology to improve software development, and apply ideas from type\r\ntheory to facilitate computer-verified proofs of mathematical theorems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Robert",
   "pi_last_name": "Harper",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Robert Harper",
   "pi_email_addr": "rwh@cs.cmu.edu",
   "nsf_id": "000113062",
   "pi_start_date": "2011-07-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie-Mellon University",
  "perf_str_addr": "5000 FORBES AVE",
  "perf_city_name": "PITTSBURGH",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133815",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 499965.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 35000.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project is an investigation of type theory, a unified language for expressing&nbsp;programs and proofs. The language of type theory provides the means to specify&nbsp;and verify the behavior of programs, an important aspect of ensuring software&nbsp;correctness, and to state and prove theorems in various areas of mathematics.&nbsp;By unifying the concepts of program and proof, on the one hand, and&nbsp;specification and theorem, on the other, type theory integrates computer science&nbsp;and mathematics in a manner not achieved by other approaches to formal&nbsp;verification of programs or mechanical checking of mathematical proofs. &nbsp;Moreover, there are three principal implementations of type theory (NuPRL, Agda,&nbsp;and Coq) that support the practical mechanization of program and proof&nbsp;development. Thus, type theory is not only a theoretical formalism, but also a&nbsp;practical tool that extends the capabilities of computer scientists and&nbsp;mathematicians to include convenient computer assistance.</p>\n<p>The focus of this project is on the extension of type theory to account for the<br />higher-dimensional structure of types, which reflects a \"geometric\" or<br />\"topological\" aspect of types that has only recently been recognized and<br />developed by the present project. This recognition established connections with&nbsp;a branch of mathematics, called homotopy theory, that has led to exciting new&nbsp;developments that continue to be pursued. The emphasis of the present project&nbsp;is on the application of this newly discovered connection to practical<br />programming problems. In particular it has contributed to the mechanization of<br />a body of homotopy theory using the Agda proof assistant, and has applied<br />concepts of higher-dimensional type theory to the practical problem of revision<br />control in software development.</p>\n<p>The project has supported the education and research of three Ph.D students, two undergraduate students, including one master's thesis, and two post-doctoral fellows.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/03/2015<br>\n\t\t\t\t\tModified by: Robert&nbsp;W&nbsp;Harper</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project is an investigation of type theory, a unified language for expressing programs and proofs. The language of type theory provides the means to specify and verify the behavior of programs, an important aspect of ensuring software correctness, and to state and prove theorems in various areas of mathematics. By unifying the concepts of program and proof, on the one hand, and specification and theorem, on the other, type theory integrates computer science and mathematics in a manner not achieved by other approaches to formal verification of programs or mechanical checking of mathematical proofs.  Moreover, there are three principal implementations of type theory (NuPRL, Agda, and Coq) that support the practical mechanization of program and proof development. Thus, type theory is not only a theoretical formalism, but also a practical tool that extends the capabilities of computer scientists and mathematicians to include convenient computer assistance.\n\nThe focus of this project is on the extension of type theory to account for the\nhigher-dimensional structure of types, which reflects a \"geometric\" or\n\"topological\" aspect of types that has only recently been recognized and\ndeveloped by the present project. This recognition established connections with a branch of mathematics, called homotopy theory, that has led to exciting new developments that continue to be pursued. The emphasis of the present project is on the application of this newly discovered connection to practical\nprogramming problems. In particular it has contributed to the mechanization of\na body of homotopy theory using the Agda proof assistant, and has applied\nconcepts of higher-dimensional type theory to the practical problem of revision\ncontrol in software development.\n\nThe project has supported the education and research of three Ph.D students, two undergraduate students, including one master's thesis, and two post-doctoral fellows.\n\n \n\n\t\t\t\t\tLast Modified: 08/03/2015\n\n\t\t\t\t\tSubmitted by: Robert W Harper"
 }
}