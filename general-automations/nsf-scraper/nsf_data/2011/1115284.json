{
 "awd_id": "1115284",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CSR: Small: A Comprehensive Framework for Real-Time Multiprocessor Synchronization",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2011-08-15",
 "awd_exp_date": "2015-07-31",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 450000.0,
 "awd_min_amd_letter_date": "2011-08-08",
 "awd_max_amd_letter_date": "2012-08-20",
 "awd_abstract_narration": "The advent of multicore technologies has fueled much recent work on methods for designing, deploying, and verifying multiprocessor implementations of real-time applications.  Such methods must necessarily be rooted in resource allocation techniques that facilitate predictable system designs.  In work on such techniques, scheduling algorithms, which allocate processor time, have received the greatest attention.  Synchronization algorithms, which coordinate access to other resources, have received much less attention.\r\n\r\nThe current state-of-the-art regarding real-time multiprocessor synchronization is that simple locking protocols can be supported, but not much else.  This is a serious impediment that is limiting the evolution of real-time applications to \"multicore-ready\" versions.  Driven by this, a rich set of multiprocessor real-time synchronization mechanisms is being developed in this project.  These mechanisms are motivated by real application needs, as have arisen in joint work involving the investigators and industry colleagues at AT&T and Northrop Grumman.  Such mechanisms are being designed for use within several system models, also motivated by real needs.  These include models wherein various complexities exist, such as having tasks of differing criticalities, multiple subsystems that must be \"isolated\" from one another, heterogeneous hardware components, dynamic task behaviors, etc.  In all of this work, the design of optimal synchronization protocols is being emphasized.  These protocols are being prototyped and evaluated within a open-source UNC-produced real-time Linux extension called LITMUS^RT.  Broader impacts will include continued joint research with industry colleagues, and the development of publicly-available open-source software that can be used by other institutions for research and teaching purposes.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "James",
   "pi_last_name": "Anderson",
   "pi_mid_init": "H",
   "pi_sufx_name": "",
   "pi_full_name": "James H Anderson",
   "pi_email_addr": "anderson@cs.unc.edu",
   "nsf_id": "000481767",
   "pi_start_date": "2011-08-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Sanjoy",
   "pi_last_name": "Baruah",
   "pi_mid_init": "K",
   "pi_sufx_name": "",
   "pi_full_name": "Sanjoy K Baruah",
   "pi_email_addr": "Baruah@wustl.edu",
   "nsf_id": "000762080",
   "pi_start_date": "2011-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of North Carolina at Chapel Hill",
  "inst_street_address": "104 AIRPORT DR STE 2200",
  "inst_street_address_2": "",
  "inst_city_name": "CHAPEL HILL",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9199663411",
  "inst_zip_code": "275995023",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "NC04",
  "org_lgl_bus_name": "UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL",
  "org_prnt_uei_num": "D3LHU66KBLD5",
  "org_uei_num": "D3LHU66KBLD5"
 },
 "perf_inst": {
  "perf_inst_name": "University of North Carolina at Chapel Hill",
  "perf_str_addr": "104 AIRPORT DR STE 2200",
  "perf_city_name": "CHAPEL HILL",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "275995023",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "NC04",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 130000.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 320000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Real-time systems are systems in which some computations have deadline constraints. &nbsp;For example, when the brake pedal of a car is depressed, the car should begin to slow within a specified number of milliseconds. &nbsp;The computations that must be supported within a real-time system are usually called \"tasks.\" &nbsp;(A task is essentially just a computer program.) &nbsp;To save on hardware costs, it is often the case that many tasks with separate deadline requirements have to be supported on the same hardware platform. &nbsp;To ensure that each task meets its deadline requirements, a real-time scheduler must be used within the operating system that is cognizant of task deadlines and schedules tasks accordingly.</p>\n<p><br />Complicating matters further, tasks often interact with each other by sharing data and even hardware devices. &nbsp;When such sharing occurs, locking protocols must also be used. &nbsp;Such protocols coordinate accesses to shared resources, usually be requiring that each such resource is accessed by only one task at a time. &nbsp;The term \"locking protocol\" derives from the fact that such protocols enable tasks to \"lock\" shared resources for exclusive use. &nbsp;(In some cases, several tasks may together lock shared resources for coordinated use.) &nbsp;In the case of real-time systems, any locking protocol that is used must be cognizant of task deadline requirements, just like the scheduler. &nbsp;Also, for the given locking-protocol/scheduler combination employed, analysis must be obtained that can be used to mathematically prove that tasks will meet their deadlines.</p>\n<p><br />From the perspective of designing and realizing real-time systems, one of the most profound recent developments in the computing arena is the advent of multicore computers. &nbsp;Such computers actually consist of multiple processors. &nbsp;Thus, a multicore computer can execute many tasks in parallel, i.e., at the same time. &nbsp;The introduction of parallelism greatly complicates the design of real-time schedulers, real-time locking protocols, and the analysis for validating deadline requirements that underlies their use.</p>\n<p><br />This project was directed at the design of real-time locking protocols for multicore computers. &nbsp;The specific objective was to develop protocols that are both flexible and optimal. &nbsp;The term \"flexible\" means that protocols are desired that can be applied with few restrictions. &nbsp;For example, most previously developed real-time multicore locking protocols require that a task can lock only one resource at a time. &nbsp;This is a limiting assumption in many real-world scenarios where tasks need access to multiple resources simultaneously. &nbsp;The term \"optimal\" means that protocols are desired that are provably the \"best possible\" in a certain mathematical sense. &nbsp;The stated objective was met by designing and analyzing a number of new optimal real-time locking protocols for multicore computers. &nbsp;Additionally, various related issues involving the integration of such protocols within real-time schedulers were investigated. &nbsp;This locking/scheduling-oriented work was the main intellectual contribution of this project.</p>\n<p><br />In terms of broader impacts, the investigators presented talks on this work at numerous institutions, conferences, workshops, etc. &nbsp;Additionally, the results of this project formed the basis of the dissertations of two graduate students. &nbsp;These results have also fundamentally altered how the topic of real-time locking is taught at the investigators' institution.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/12/2015<br>\n\t\t\t\t\tModified by: Sanjoy&nbsp;K&nbsp;Baruah</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nReal-time systems are systems in which some computations have deadline constraints.  For example, when the brake pedal of a car is depressed, the car should begin to slow within a specified number of milliseconds.  The computations that must be supported within a real-time system are usually called \"tasks.\"  (A task is essentially just a computer program.)  To save on hardware costs, it is often the case that many tasks with separate deadline requirements have to be supported on the same hardware platform.  To ensure that each task meets its deadline requirements, a real-time scheduler must be used within the operating system that is cognizant of task deadlines and schedules tasks accordingly.\n\n\nComplicating matters further, tasks often interact with each other by sharing data and even hardware devices.  When such sharing occurs, locking protocols must also be used.  Such protocols coordinate accesses to shared resources, usually be requiring that each such resource is accessed by only one task at a time.  The term \"locking protocol\" derives from the fact that such protocols enable tasks to \"lock\" shared resources for exclusive use.  (In some cases, several tasks may together lock shared resources for coordinated use.)  In the case of real-time systems, any locking protocol that is used must be cognizant of task deadline requirements, just like the scheduler.  Also, for the given locking-protocol/scheduler combination employed, analysis must be obtained that can be used to mathematically prove that tasks will meet their deadlines.\n\n\nFrom the perspective of designing and realizing real-time systems, one of the most profound recent developments in the computing arena is the advent of multicore computers.  Such computers actually consist of multiple processors.  Thus, a multicore computer can execute many tasks in parallel, i.e., at the same time.  The introduction of parallelism greatly complicates the design of real-time schedulers, real-time locking protocols, and the analysis for validating deadline requirements that underlies their use.\n\n\nThis project was directed at the design of real-time locking protocols for multicore computers.  The specific objective was to develop protocols that are both flexible and optimal.  The term \"flexible\" means that protocols are desired that can be applied with few restrictions.  For example, most previously developed real-time multicore locking protocols require that a task can lock only one resource at a time.  This is a limiting assumption in many real-world scenarios where tasks need access to multiple resources simultaneously.  The term \"optimal\" means that protocols are desired that are provably the \"best possible\" in a certain mathematical sense.  The stated objective was met by designing and analyzing a number of new optimal real-time locking protocols for multicore computers.  Additionally, various related issues involving the integration of such protocols within real-time schedulers were investigated.  This locking/scheduling-oriented work was the main intellectual contribution of this project.\n\n\nIn terms of broader impacts, the investigators presented talks on this work at numerous institutions, conferences, workshops, etc.  Additionally, the results of this project formed the basis of the dissertations of two graduate students.  These results have also fundamentally altered how the topic of real-time locking is taught at the investigators' institution.\n\n \n\n\t\t\t\t\tLast Modified: 08/12/2015\n\n\t\t\t\t\tSubmitted by: Sanjoy K Baruah"
 }
}