{
 "awd_id": "1116673",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: ShapeShifting and PubSub for Tailoring Memory Access and Communication in Heterogeneous Multiprocessors",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Tao Li",
 "awd_eff_date": "2011-09-01",
 "awd_exp_date": "2016-08-31",
 "tot_intn_awd_amt": 225000.0,
 "awd_amount": 270000.0,
 "awd_min_amd_letter_date": "2011-06-21",
 "awd_max_amd_letter_date": "2013-09-10",
 "awd_abstract_narration": "Over the past decade or more, microprocessors have faced increasing challenges in achieving high-performance for current and emerging software applications while abiding by severe power and thermal limits. In response, industry has turned to approaches that use specialized graphics and computational hardware and complex memory organizations.  The end result is that computer systems have become more heterogeneous and complex, in ways that make it difficult for programmers to write efficient and high-performance software.  Software tuned to run on one implementation will often not run at all or will perform poorly or unpredictably when ported to even a different implementation in the same chip family. The objective of this research effort is to design and evaluate system and hardware support that tailors memory and data access/movements to improve performance and power efficiency, while also easing the issues of programmability and of tuning software for individual chip characteristics.\r\nThe two key themes of this work are ShapeShifting and PubSub data abstractions.  ShapeShifting refers to optimizations and hardware support structures that allow data to be transformed in layout, in order to support faster access, more efficient use of memory, and other attributes that improve power and performance.  In some preliminary experiments, even a software-only implementation of ShapeShifting improves performance by 15%-2.8X. PubSub data abstractions offer methods for individual processors to indicate interest (or disinterest) in updates regarding other program variables.  These abstractions form the underpinning for memory optimizations that are tailored to the application?s memory usage patterns. By mitigating false sharing, encouraging coarse-grained fetches, and reducing coherence broadcasts to uninterested cores, PubSub has the potential to improve the power and performance efficiency of multi-core implementations by a factor of 2X or more.\r\nThe research program is targeting several types of broad impact.  First, the simulators and tools developed by this project will be released as free, open-source software. Second, the results can enhance performance and energy efficiency of future parallel hardware.  Energy-efficiency is of particular concern from a national economic and strategic standpoint, given the growing electricity consumption of computer systems and the important role of the memory hierarchy in influencing computer power consumption.\r\n\r\n",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Kevin",
   "pi_last_name": "Skadron",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Kevin Skadron",
   "pi_email_addr": "skadron@cs.virginia.edu",
   "nsf_id": "000393383",
   "pi_start_date": "2011-06-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Virginia Main Campus",
  "inst_street_address": "1001 EMMET ST N",
  "inst_street_address_2": "",
  "inst_city_name": "CHARLOTTESVILLE",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "4349244270",
  "inst_zip_code": "229034833",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "VA05",
  "org_lgl_bus_name": "RECTOR & VISITORS OF THE UNIVERSITY OF VIRGINIA",
  "org_prnt_uei_num": "",
  "org_uei_num": "JJG6HU8PA4S5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Virginia Main Campus",
  "perf_str_addr": "1001 EMMET ST N",
  "perf_city_name": "CHARLOTTESVILLE",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "229034833",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "VA05",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7941",
   "pgm_ref_txt": "COMPUTER ARCHITECTURE"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 225000.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 45000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Over the past ten years, the computing industry has seen a trend toward new microprocessor architectures that differ dramatically from the classic CPU. Most prominent among these has been the graphics processor (GPU), which evolved from 3D graphics processing into a general-purpose architecture for high-performance computing for applications with high parallelism.&nbsp; Another major platform has been the field-programmable gate array (FPGA), which provides a matrix of processing elements that can be interconnected in customized ways to create specialized processing engines.&nbsp; Various other accelerators have been introduced, including the AP, an accelerator for automata processing, a class of applications relying on inexact, symbolic pattern matching.&nbsp;</p>\n<p>All of these processing architectures have different execution models and memory organizations. The goal of this project was to develop methods that abstract away these differences, allowing the programmer to write a single program that is portable across these diverse platforms and that achieves high performance across these platforms. This project developed a set of novel methods to achieve these goals, and released a variety of open-source software tools to make these methods broadly accessible. This project also developed a range of benchmark applications to drive the research, evaluate the benefits of these methods, serve as benchmarks for other research, and also serve as case studies and examples for researchers and programmers. These applications were released in the form of two open-source benchmark suites. In all cases, the open-source license was chosen to enable broad commercial and non-commercial use.</p>\n<p>For the GPU, this project developed two programming languages to allow the user to define <em>what</em> they wanted to achieve without needing to express the details of how the program should execute. This provides both the information and the flexibility for the compiler and language runtime to map the program in the most efficient way.&nbsp; Trellis asks the programmer to provide hints about the relationship among tasks, so that maximum parallelism can be extracted. Dymaxion++ asks the programmer to specify a general access pattern (such as row-major vs. column-major, diagonal, etc.) to allow the compiler and runtime to obtain the most efficient memory-access pattern.&nbsp; In the process of developing, these approaches, new compiler analysis techniques were developed.</p>\n<p>A variety of applications with diverse memory and parallelism characteristics were developed for diverse computing platforms as a way to drive the research, and facilitate other research and development, by exposing challenging use cases. These applications were added to the existing Rodinia benchmark suite, which is now up to version 3.1, with version 4.0 forthcoming soon.&nbsp;</p>\n<p>In the course of developing a range of applications to drive the research, this project observed the importance of automata processing. Finite automata are a computing paradigm for inexact, symbolic pattern matching, which is prominent in a range of application domains such as network processing, data mining, and bioinformatics. This project found that various application domains that had never previously been formulated using automata-based algorithms could in fact be executed with high performance by developing new algorithms for automata-based processing. This achieves unprecedented performance on several computing platforms, and even on the CPU, it was shown that some of these new application domains achieve higher performance than the previous state-of-the-art algorithms. This project developed and released a separate benchmark suite for these automata applications. &nbsp;</p>\n<p>In this study of automata processing, this project extended its work to include FPGAs and the recently-announced Automata Processor (AP), as well as GPU and CPU.&nbsp; A variety of applications were evaluated across these platforms, and new methods were developed to achieve faster automata processing on the GPU and FPGA.&nbsp; Benchmarking showed the high potential of &ldquo;spatial architectures&rdquo; such as the AP and FPGA, which map the application in space across a pool of resources and achieve very high parallelism as a result.</p>\n<p>To support efficient and <em>convenient </em>automata processing across a range of current and future heterogeneous platforms, this project developed an end-to-end suite of open-source tools to allow convenient programming of applications involving symbolic pattern-matching tasks and efficient, portable execution across the CPU, GPU, FPGA, and AP.&nbsp; These tools include VASim, an automata optimization engine; RAPID, a highly portable programming language; MNRL, a new specification language for automata and finite-state machines; iNFAnt2, a new automata execution engine for GPUs; REAPR, a new automata execution engine for FPGAs; and more tools growing out of this research are being prepared for release.</p>\n<p>Overall, the intellectual contributions are in new methods for portable, high-performance execution across diverse, heterogeneous computing resources.&nbsp; The broader impacts are in the release of a set of tools and benchmarks to enable further research as well as enabling everyday programmers to more easily use the capabilities of these heterogeneous platforms.&nbsp; Further broader impacts were realized in training of students in research methods and robust, portable software development, and a variety of outreach activities.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/20/2017<br>\n\t\t\t\t\tModified by: Kevin&nbsp;Skadron</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nOver the past ten years, the computing industry has seen a trend toward new microprocessor architectures that differ dramatically from the classic CPU. Most prominent among these has been the graphics processor (GPU), which evolved from 3D graphics processing into a general-purpose architecture for high-performance computing for applications with high parallelism.  Another major platform has been the field-programmable gate array (FPGA), which provides a matrix of processing elements that can be interconnected in customized ways to create specialized processing engines.  Various other accelerators have been introduced, including the AP, an accelerator for automata processing, a class of applications relying on inexact, symbolic pattern matching. \n\nAll of these processing architectures have different execution models and memory organizations. The goal of this project was to develop methods that abstract away these differences, allowing the programmer to write a single program that is portable across these diverse platforms and that achieves high performance across these platforms. This project developed a set of novel methods to achieve these goals, and released a variety of open-source software tools to make these methods broadly accessible. This project also developed a range of benchmark applications to drive the research, evaluate the benefits of these methods, serve as benchmarks for other research, and also serve as case studies and examples for researchers and programmers. These applications were released in the form of two open-source benchmark suites. In all cases, the open-source license was chosen to enable broad commercial and non-commercial use.\n\nFor the GPU, this project developed two programming languages to allow the user to define what they wanted to achieve without needing to express the details of how the program should execute. This provides both the information and the flexibility for the compiler and language runtime to map the program in the most efficient way.  Trellis asks the programmer to provide hints about the relationship among tasks, so that maximum parallelism can be extracted. Dymaxion++ asks the programmer to specify a general access pattern (such as row-major vs. column-major, diagonal, etc.) to allow the compiler and runtime to obtain the most efficient memory-access pattern.  In the process of developing, these approaches, new compiler analysis techniques were developed.\n\nA variety of applications with diverse memory and parallelism characteristics were developed for diverse computing platforms as a way to drive the research, and facilitate other research and development, by exposing challenging use cases. These applications were added to the existing Rodinia benchmark suite, which is now up to version 3.1, with version 4.0 forthcoming soon. \n\nIn the course of developing a range of applications to drive the research, this project observed the importance of automata processing. Finite automata are a computing paradigm for inexact, symbolic pattern matching, which is prominent in a range of application domains such as network processing, data mining, and bioinformatics. This project found that various application domains that had never previously been formulated using automata-based algorithms could in fact be executed with high performance by developing new algorithms for automata-based processing. This achieves unprecedented performance on several computing platforms, and even on the CPU, it was shown that some of these new application domains achieve higher performance than the previous state-of-the-art algorithms. This project developed and released a separate benchmark suite for these automata applications.  \n\nIn this study of automata processing, this project extended its work to include FPGAs and the recently-announced Automata Processor (AP), as well as GPU and CPU.  A variety of applications were evaluated across these platforms, and new methods were developed to achieve faster automata processing on the GPU and FPGA.  Benchmarking showed the high potential of \"spatial architectures\" such as the AP and FPGA, which map the application in space across a pool of resources and achieve very high parallelism as a result.\n\nTo support efficient and convenient automata processing across a range of current and future heterogeneous platforms, this project developed an end-to-end suite of open-source tools to allow convenient programming of applications involving symbolic pattern-matching tasks and efficient, portable execution across the CPU, GPU, FPGA, and AP.  These tools include VASim, an automata optimization engine; RAPID, a highly portable programming language; MNRL, a new specification language for automata and finite-state machines; iNFAnt2, a new automata execution engine for GPUs; REAPR, a new automata execution engine for FPGAs; and more tools growing out of this research are being prepared for release.\n\nOverall, the intellectual contributions are in new methods for portable, high-performance execution across diverse, heterogeneous computing resources.  The broader impacts are in the release of a set of tools and benchmarks to enable further research as well as enabling everyday programmers to more easily use the capabilities of these heterogeneous platforms.  Further broader impacts were realized in training of students in research methods and robust, portable software development, and a variety of outreach activities.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 05/20/2017\n\n\t\t\t\t\tSubmitted by: Kevin Skadron"
 }
}