{
 "awd_id": "1117058",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: PAPI-V Hardware Performance Monitoring for Virtualized Environments",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2011-09-01",
 "awd_exp_date": "2014-08-31",
 "tot_intn_awd_amt": 425000.0,
 "awd_amount": 425000.0,
 "awd_min_amd_letter_date": "2011-09-09",
 "awd_max_amd_letter_date": "2014-08-28",
 "awd_abstract_narration": "Cloud computing involves use of a hosted computational environment that can provide elastic compute and storage services on demand. Virtualization is a technology that allows multiple virtual machines (VMs) to run on a single physical machine and share its resources. Virtualization is increasingly being used in cloud computing to provide economies of scale, customized environments, fault isolation, and reliability.  To address performance concerns with the use of cloud computing for scientific computing, the PAPI-V project is developing a system for hardware performance monitoring in virtualized environments to enable software developers to understand and optimize system and application performance and adapt to changing conditions.  To accomplish this goal, the project is extending the widely used Performance API (PAPI) cross-platform library for accessing hardware performance counters.\r\n\r\nThe PAPI-V project is addressing the following aspects: \r\n1. Timing: The PAPI timing routines are being extended to provide standard real and virtual timers across different Virtual Machine Monitors (VMMs). \r\n2. Component measurements: The existing PAPI I/O, network, and other shared resource components are being extended to provide relevant information in virtualized environments. \r\n3. Virtualization of selected processor hardware counters: A selected set of processor counters considered being most relevant for application performance analysis and tuning in virtualized environments is being implemented across VMMs. \r\n4. Interpretation of data:  A mechanism for defining metrics that correctly quantify the contributions of various factors to overall performance is under development.\r\n\r\nThe research results will be implemented in the publically available and widely used PAPI library. The PAPI-V extension will allow application and tool developers to use a familiar interface to obtain relevant information for achieving the best possible performance in cloud computing environments.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Shirley",
   "pi_last_name": "Moore",
   "pi_mid_init": "V",
   "pi_sufx_name": "",
   "pi_full_name": "Shirley V Moore",
   "pi_email_addr": "svmoore@utep.edu",
   "nsf_id": "000317583",
   "pi_start_date": "2011-09-09",
   "pi_end_date": "2012-06-04"
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Daniel",
   "pi_last_name": "Terpstra",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Daniel Terpstra",
   "pi_email_addr": "terpstra@eecs.utk.edu",
   "nsf_id": "000584120",
   "pi_start_date": "2012-06-04",
   "pi_end_date": "2014-08-28"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Heike",
   "pi_last_name": "Jagode",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Heike Jagode",
   "pi_email_addr": "jagode@icl.utk.edu",
   "nsf_id": "000673781",
   "pi_start_date": "2014-08-28",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Daniel",
   "pi_last_name": "Terpstra",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Daniel Terpstra",
   "pi_email_addr": "terpstra@eecs.utk.edu",
   "nsf_id": "000584120",
   "pi_start_date": "2011-09-09",
   "pi_end_date": "2012-06-04"
  }
 ],
 "inst": {
  "inst_name": "University of Tennessee Knoxville",
  "inst_street_address": "201 ANDY HOLT TOWER",
  "inst_street_address_2": "",
  "inst_city_name": "KNOXVILLE",
  "inst_state_code": "TN",
  "inst_state_name": "Tennessee",
  "inst_phone_num": "8659743466",
  "inst_zip_code": "379960001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "TN02",
  "org_lgl_bus_name": "UNIVERSITY OF TENNESSEE",
  "org_prnt_uei_num": "LXG4F9K8YZK5",
  "org_uei_num": "FN2YCS2YAUW3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Tennessee Knoxville",
  "perf_str_addr": "201 ANDY HOLT TOWER",
  "perf_city_name": "KNOXVILLE",
  "perf_st_code": "TN",
  "perf_st_name": "Tennessee",
  "perf_zip_code": "379960001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "TN02",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 425000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The concept of cloud computing involves use of a hosted computational environment that can provide elastic compute and storage services on demand. Virtualization is a technology that allows multiple virtual machines (VMs) to run on a single physical machine and share its resources. Different VMs can run different operating systems and applications. Virtualization is increasingly being used in cloud computing to provide economies of scale, customized environments, fault isolation, and reliability. Although continuing advances in hardware support for virtualization have been closing the gap between native and virtualized performance, performance concerns have inhibited widespread adoption of cloud computing for scientific computing. A challenging problem is how to combine and interpret measurements obtained from different software layers in a virtualized environment, so as to be able to understand and optimize system and application performance and adapt to changing conditions.</p>\n<p>A common approach to observing performance on non-virtualized (i.e., native) systems is to use the hardware performance counters available on modern microprocessors. The counters can be accessed using the portable Performance Application Programming Interface (PAPI). Widely deployed and widely used, PAPI provides a consistent interface and methodology for accessing hardware performance counters on CPUs and other system components of interest (e.g., network, I/O, power/energy, GPUs). While PAPI can be used as a stand-alone tool, it is more commonly applied as a middleware by third-party profiling, tracing, sampling, and even auto-tuning tools, such as TAU, Scalasca, Vampir, HPCToolkit, CrayPat, Active Harmony, and others. The counters provide a wide range of information about processor, cache, and memory performance. PAPI components for off-processor counters provide additional performance information about other components of the system, such as the file system, network, temperature and power consumption, and GPUs. In virtualized systems, however, access to hardware performance counters has been limited.</p>\n<p>With the migration of computing workloads to virtual environments becoming more common, cloud-based performance analysis has become increasingly important. This project addressed<em> </em> the following aspects of the problem of hardware performance monitoring in virtualized environments:</p>\n<ol>\n<li><strong>Timing:</strong>&nbsp; The PAPI timing routines have been extended to support standard real and virtual timers across different Virtual Machine Monitors (VMMs). Standardization allows the same timing code to be used, regardless of the environment in which the application is being run. </li>\n<li><strong>Component measurements:</strong>&nbsp; A variety of PAPI I/O, network, and other shared resource components are being deployed or developed to provide relevant information in virtualized environments. Competition for shared resources can have a significant impact on performance in virtualized environments, and having this information allows applications to adapt and compensate.</li>\n<li><strong>Virtualization of selected processor hardware counters:</strong>&nbsp; A selected set of processor counters considered relevant for application performance analysis and tuning in virtualized environments have been analyzed across VMMs and implemented in a portable manner. </li>\n<li><strong>Interpretation of data:</strong>&nbsp; Hardware counter data needs to be interpreted differently in virtualized environments. Mechanisms for evaluating metrics for a particular environment that correctly quantify the contributions of various factors to the overall performance have been developed.</li>\n</ol>\n<p>Additionally, PAPI offers capabilities for virtual environments; specifically, it includes components that report VMware statistics and \"steal-time\" measurements, i.e., data on the time used by ...",
  "por_txt_cntn": "\nThe concept of cloud computing involves use of a hosted computational environment that can provide elastic compute and storage services on demand. Virtualization is a technology that allows multiple virtual machines (VMs) to run on a single physical machine and share its resources. Different VMs can run different operating systems and applications. Virtualization is increasingly being used in cloud computing to provide economies of scale, customized environments, fault isolation, and reliability. Although continuing advances in hardware support for virtualization have been closing the gap between native and virtualized performance, performance concerns have inhibited widespread adoption of cloud computing for scientific computing. A challenging problem is how to combine and interpret measurements obtained from different software layers in a virtualized environment, so as to be able to understand and optimize system and application performance and adapt to changing conditions.\n\nA common approach to observing performance on non-virtualized (i.e., native) systems is to use the hardware performance counters available on modern microprocessors. The counters can be accessed using the portable Performance Application Programming Interface (PAPI). Widely deployed and widely used, PAPI provides a consistent interface and methodology for accessing hardware performance counters on CPUs and other system components of interest (e.g., network, I/O, power/energy, GPUs). While PAPI can be used as a stand-alone tool, it is more commonly applied as a middleware by third-party profiling, tracing, sampling, and even auto-tuning tools, such as TAU, Scalasca, Vampir, HPCToolkit, CrayPat, Active Harmony, and others. The counters provide a wide range of information about processor, cache, and memory performance. PAPI components for off-processor counters provide additional performance information about other components of the system, such as the file system, network, temperature and power consumption, and GPUs. In virtualized systems, however, access to hardware performance counters has been limited.\n\nWith the migration of computing workloads to virtual environments becoming more common, cloud-based performance analysis has become increasingly important. This project addressed  the following aspects of the problem of hardware performance monitoring in virtualized environments:\n\nTiming:  The PAPI timing routines have been extended to support standard real and virtual timers across different Virtual Machine Monitors (VMMs). Standardization allows the same timing code to be used, regardless of the environment in which the application is being run. \nComponent measurements:  A variety of PAPI I/O, network, and other shared resource components are being deployed or developed to provide relevant information in virtualized environments. Competition for shared resources can have a significant impact on performance in virtualized environments, and having this information allows applications to adapt and compensate.\nVirtualization of selected processor hardware counters:  A selected set of processor counters considered relevant for application performance analysis and tuning in virtualized environments have been analyzed across VMMs and implemented in a portable manner. \nInterpretation of data:  Hardware counter data needs to be interpreted differently in virtualized environments. Mechanisms for evaluating metrics for a particular environment that correctly quantify the contributions of various factors to the overall performance have been developed.\n\n\nAdditionally, PAPI offers capabilities for virtual environments; specifically, it includes components that report VMware statistics and \"steal-time\" measurements, i.e., data on the time used by other VMs in an oversubscribed system. Steam-time measurements can be included in per-process timing results and can be used to adjust timing measurement to compensate for time stolen by other jobs.  Reporting to the user ..."
 }
}