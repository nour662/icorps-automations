{
 "awd_id": "1065451",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TC: Medium: Making OS Kernels Crash-Proof by Design and Certification",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Deborah Shands",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2016-07-31",
 "tot_intn_awd_amt": 1116262.0,
 "awd_amount": 1116262.0,
 "awd_min_amd_letter_date": "2011-08-09",
 "awd_max_amd_letter_date": "2015-11-12",
 "awd_abstract_narration": "Operating System (OS) kernels form the bedrock of all system software---they can have the greatest impact on the resilience, security, and extensibility of today's computing hosts.  A single kernel bug can easily wreck the entire system's integrity and protection. The PIs are applying new advances in certified software to the design and development of novel kernel structures that generalize and unify traditional OS abstractions in microkernels, recursive virtual machines, and hypervisors.  By replacing the traditional \"red line\" (between the kernel and user code) with customized safety policies, the PIs show how to support different isolation and kernel extension mechanisms (e.g., type-safe languages, software-fault isolation, or address space protection) in a single framework. The PIs are also building a new framework for certified kernel programming and a set of domain-specific variants of C-like languages. They are applying them to certify different components at different abstraction layers (ranging from scheduler, virtual memory manager, file system, to information flow control), and then linking everything together to build end-to-end certified OS kernels. Certified kernels built under this project will offer safe and application-specific extensibility, provable security properties with information flow control, and accountability and recovery from hardware or application failures. They will help improve the reliability and security of many key components in the world's critical infrastructure, and advance human knowledge on what is possible in building trustworthy systems on top of a reliable core.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Zhong",
   "pi_last_name": "Shao",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zhong Shao",
   "pi_email_addr": "zhong.shao@yale.edu",
   "nsf_id": "000201856",
   "pi_start_date": "2011-08-09",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Bryan",
   "pi_last_name": "Ford",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Bryan A Ford",
   "pi_email_addr": "bryan.ford@yale.edu",
   "nsf_id": "000518149",
   "pi_start_date": "2011-08-09",
   "pi_end_date": "2015-11-12"
  }
 ],
 "inst": {
  "inst_name": "Yale University",
  "inst_street_address": "150 MUNSON ST",
  "inst_street_address_2": "",
  "inst_city_name": "NEW HAVEN",
  "inst_state_code": "CT",
  "inst_state_name": "Connecticut",
  "inst_phone_num": "2037854689",
  "inst_zip_code": "065113572",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "CT03",
  "org_lgl_bus_name": "YALE UNIV",
  "org_prnt_uei_num": "FL6GV84CKN57",
  "org_uei_num": "FL6GV84CKN57"
 },
 "perf_inst": {
  "perf_inst_name": "Yale University",
  "perf_str_addr": "150 MUNSON ST",
  "perf_city_name": "NEW HAVEN",
  "perf_st_code": "CT",
  "perf_st_name": "Connecticut",
  "perf_zip_code": "065113572",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "CT03",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779500",
   "pgm_ele_name": "TRUSTWORTHY COMPUTING"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7795",
   "pgm_ref_txt": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 1116262.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Operating System (OS) kernels form the bedrock of all system software---they can have the greatest impact on the resilience, security, and extensibility of today's computing hosts (e.g., phones, workstations, clouds, self-driving cars, drones, IoTs) . &nbsp;A single kernel bug can easily wreck the entire system's integrity and protection. It is thus highly desirable to build hacker-proof OS kernels that strictly adhere to their formal functional specification under all circumstances.</p>\n<p><br />Building certifiably hacker-proof OS kernels is widely considered a grand challenge. Many people believe that the combination of concurrency and the OS kernels' functional complexity makes formal verification of functional correctness intractable, and even if it is possible, its cost would be prohibitive.</p>\n<p><br />Under this research grant, PI Shao and his team at Yale University have successfully made multiple breakthroughs showing that building hacker-proof operating systems is not only feasible but also practical.</p>\n<p><br />In their paper on Deep Specifications and Certified Abstraction Layers (appeared in the Proceedings of the 42nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2015), they developed a novel language-based account of certified abstraction layers and advocated abstraction over a particularly rich class of specification which they call deep specifications. They then developed new methodologies and tools for formally specifying, programming, verifying, and composing abstraction layers. Using these new languages and tools, they have successfully developed multiple certified sequential OS kernels in the Coq proof assistant, the most realistic of which consists of 37 abstraction layers, took less than one person year to develop, and can boot a version of Linux as a guest.</p>\n<p><br />In two other research papers (published in the Proceedings of 2016 ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2016), they showed that their layered compositional framework can be extended to support interruptible OS kernels and device drivers; they have also successfully developed a novel methodology for formally verifying end-to-end security of a software system that consists of both C and assembly programs. &nbsp;Using these new methodologies, they have successfully constructed an end-to-end security proof of their CertiKOS kernel (running on an extended x86 assembly machine model).</p>\n<p><br />In their latest paper (to be published in the Proceedings of 2016 USENIX Symposium on Operating Systems Design and Implementation, OSDI 2016), PI Shao and his team developed another highly novel compositional approach for building certified hacker-proof concurrent OS kernels. Concurrency allows interleaved execution of kernel/user modules across different layers of abstraction. Each such layer can have a different set of observable events. They insist on formally specifying these layers and their observable events, and then verifying each kernel module at its proper abstraction level. To support certified linking with other CPUs or threads, they prove a strong contextual refinement property for every kernel function, which states that the implementation of each such function will behave like its specification under any kernel/user context with any valid interleaving. They have successfully developed a practical concurrent OS kernel and verified its (contextual) functional correctness in Coq. Their certified kernel is written in 6500 lines of C and x86 assembly and runs on stock x86 multicore machines. This is the world's first proof of functional correctness of a complete, general-purpose concurrent OS kernel with fine-grained locking.</p>\n<p>On the education side, PI Shao has developed a new course on operating system design and implementation at Yale. This is a hard core kernel programming course, known notoriously for its extremely heavy programming load---as a result, normally less than 15 students took this course at Yale each year. PI Shao redesigned this course and used the multi-layered CertiKOS OS kernel as the programming labs. &nbsp;Because CertiKOS was constructed with an extremely clean specification and a set of well-organized abstraction layers; students get to focus on the OS related issues rather than be bogged down by low-level debugging. As a result, 44 students successfully finished the course in the fall term of 2015. The course received very good reviews. This project also helped train many research and teaching skills to a large number of post-doctoral research associates, graduate students, and undergraduate students at Yale.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/17/2016<br>\n\t\t\t\t\tModified by: Zhong&nbsp;Shao</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2016/1065451/1065451_10119739_1476711661532_certikos1--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2016/1065451/1065451_10119739_1476711661532_certikos1--rgov-800width.jpg\" title=\"CertiKOS Methodologies\"><img src=\"/por/images/Reports/POR/2016/1065451/1065451_10119739_1476711661532_certikos1--rgov-66x44.jpg\" alt=\"CertiKOS Methodologies\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The CertiKOS team developed a certified hacker-proof concurrent OS kernel by carefully decomposing the complex kernel into a stack of carefully designed certified abstraction layers. Each kernel module is formally specified in Coq and verified at its proper abstraction level.</div>\n<div class=\"imageCredit\">Zhong Shao, Yale University</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Zhong&nbsp;Shao</div>\n<div class=\"imageTitle\">CertiKOS Methodologies</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2016/1065451/1065451_10119739_1476711911963_certikos2--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2016/1065451/1065451_10119739_1476711911963_certikos2--rgov-800width.jpg\" title=\"Verifying the Page Fault Handler\"><img src=\"/por/images/Reports/POR/2016/1065451/1065451_10119739_1476711911963_certikos2--rgov-66x44.jpg\" alt=\"Verifying the Page Fault Handler\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The page fault handler is verified in layers; its call graph includes all functions called both directly and indirectly. Circles indicate functions, solid arrows mean primitive invocations, and faint dashed lines are primitives that are translated by all the layers they pass through.</div>\n<div class=\"imageCredit\">Zhong Shao, Yale University</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Zhong&nbsp;Shao</div>\n<div class=\"imageTitle\">Verifying the Page Fault Handler</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nOperating System (OS) kernels form the bedrock of all system software---they can have the greatest impact on the resilience, security, and extensibility of today's computing hosts (e.g., phones, workstations, clouds, self-driving cars, drones, IoTs) .  A single kernel bug can easily wreck the entire system's integrity and protection. It is thus highly desirable to build hacker-proof OS kernels that strictly adhere to their formal functional specification under all circumstances.\n\n\nBuilding certifiably hacker-proof OS kernels is widely considered a grand challenge. Many people believe that the combination of concurrency and the OS kernels' functional complexity makes formal verification of functional correctness intractable, and even if it is possible, its cost would be prohibitive.\n\n\nUnder this research grant, PI Shao and his team at Yale University have successfully made multiple breakthroughs showing that building hacker-proof operating systems is not only feasible but also practical.\n\n\nIn their paper on Deep Specifications and Certified Abstraction Layers (appeared in the Proceedings of the 42nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2015), they developed a novel language-based account of certified abstraction layers and advocated abstraction over a particularly rich class of specification which they call deep specifications. They then developed new methodologies and tools for formally specifying, programming, verifying, and composing abstraction layers. Using these new languages and tools, they have successfully developed multiple certified sequential OS kernels in the Coq proof assistant, the most realistic of which consists of 37 abstraction layers, took less than one person year to develop, and can boot a version of Linux as a guest.\n\n\nIn two other research papers (published in the Proceedings of 2016 ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2016), they showed that their layered compositional framework can be extended to support interruptible OS kernels and device drivers; they have also successfully developed a novel methodology for formally verifying end-to-end security of a software system that consists of both C and assembly programs.  Using these new methodologies, they have successfully constructed an end-to-end security proof of their CertiKOS kernel (running on an extended x86 assembly machine model).\n\n\nIn their latest paper (to be published in the Proceedings of 2016 USENIX Symposium on Operating Systems Design and Implementation, OSDI 2016), PI Shao and his team developed another highly novel compositional approach for building certified hacker-proof concurrent OS kernels. Concurrency allows interleaved execution of kernel/user modules across different layers of abstraction. Each such layer can have a different set of observable events. They insist on formally specifying these layers and their observable events, and then verifying each kernel module at its proper abstraction level. To support certified linking with other CPUs or threads, they prove a strong contextual refinement property for every kernel function, which states that the implementation of each such function will behave like its specification under any kernel/user context with any valid interleaving. They have successfully developed a practical concurrent OS kernel and verified its (contextual) functional correctness in Coq. Their certified kernel is written in 6500 lines of C and x86 assembly and runs on stock x86 multicore machines. This is the world's first proof of functional correctness of a complete, general-purpose concurrent OS kernel with fine-grained locking.\n\nOn the education side, PI Shao has developed a new course on operating system design and implementation at Yale. This is a hard core kernel programming course, known notoriously for its extremely heavy programming load---as a result, normally less than 15 students took this course at Yale each year. PI Shao redesigned this course and used the multi-layered CertiKOS OS kernel as the programming labs.  Because CertiKOS was constructed with an extremely clean specification and a set of well-organized abstraction layers; students get to focus on the OS related issues rather than be bogged down by low-level debugging. As a result, 44 students successfully finished the course in the fall term of 2015. The course received very good reviews. This project also helped train many research and teaching skills to a large number of post-doctoral research associates, graduate students, and undergraduate students at Yale.\n\n\t\t\t\t\tLast Modified: 10/17/2016\n\n\t\t\t\t\tSubmitted by: Zhong Shao"
 }
}