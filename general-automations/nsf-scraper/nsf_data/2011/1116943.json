{
 "awd_id": "1116943",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Promoting Efficient Debugging and High-Quality Software through Contextual Understanding of Faults",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2015-07-31",
 "tot_intn_awd_amt": 499600.0,
 "awd_amount": 499600.0,
 "awd_min_amd_letter_date": "2011-07-20",
 "awd_max_amd_letter_date": "2011-07-20",
 "awd_abstract_narration": "Software defects, or bugs, are a significant issue in software development and society.  The cost of dealing with the faults caused by these defects is significant.  Once a software fault has been identified, either by a failing test case or due to a failure in use, it can be difficult and time consuming to identify the defect responsible for the fault and how to repair it.  This research will combine information from analysis of the program and the failing run to help understand the context of the fault, and provide a developer with visualizations and other information to help them understand the fault and repair the software.\r\n\r\nThe technical focus of this work consists of novel software analyses, software models, and software-development interfaces and visualizations to support software development, comprehension, and fault repair.  These techniques capture and utilize static and dynamic information about the program and its execution to model relations among software elements and their functionality.  These hybrid static/dynamic models can be used as the basis for the exploration of a program when attempting to understand the nature and context of software faults so that they may be effectively and efficiently repaired.  These software models utilize lightweight and commonplace dynamic information, thus making them practical and ready for near-term adoption.  The interfaces and visualizations present the program to software developers in a way to reveal interactions within software, thus allowing them to comprehend larger and more complex systems than is currently possible.  As such, the research will enable software-development industry to better understand and repair software faults, thus producing higher quality software, which will benefit society at large.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "James",
   "pi_last_name": "Jones",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "James A Jones",
   "pi_email_addr": "jajones@ics.uci.edu",
   "nsf_id": "000511099",
   "pi_start_date": "2011-07-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Irvine",
  "inst_street_address": "160 ALDRICH HALL",
  "inst_street_address_2": "",
  "inst_city_name": "IRVINE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9498247295",
  "inst_zip_code": "926970001",
  "inst_country_name": "United States",
  "cong_dist_code": "47",
  "st_cong_dist_code": "CA47",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA IRVINE",
  "org_prnt_uei_num": "MJC5FCYQTPE6",
  "org_uei_num": "MJC5FCYQTPE6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Irvine",
  "perf_str_addr": "160 ALDRICH HALL",
  "perf_city_name": "IRVINE",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "926970001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "47",
  "perf_st_cong_dist": "CA47",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 499600.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Largely facilitated by the support of this grant, we have made significant and substantive advances in the science of software engineering, and specifically in the areas of software debugging and comprehension. These advances, taken together, promote the development and maintenance of higher quality software and more efficient maintenance.&nbsp;</p>\n<p>The outcomes of this grant are numerable: we made several scientific advances; published several top-tier scientific articles and papers; supported and trained Ph.D., Masters, and undergraduate students to become our next generation leaders and scientists; openly published several software artifacts upon which other practitioners and scientists can build; disseminated our work to the public with talks and various websites; and produced two Ph.D. dissertations.<br />In terms of scientific advances:</p>\n<ul>\n<li>We have created new theory, models, and analyses to support source-code history querying, analysis, and exploration. Upon these, we have created client techniques that support automatic developer recommendations for debugging tasks, and that support flexible and powerful user querying of history (i.e., \"history slicing\").</li>\n<li>We have performed empirical studies of fault behavior, interaction, and effects on automated software maintenance techniques. These empirical studies inform how future studies should be performed by researchers (both by us and others) because they reveal that certain effects are prevalent and cannot be ignored. Moreover, the findings show that popular beliefs about the effectiveness of a popular class of fault localization techniques (i.e., spectra-based fault localization) were likely incorrect.</li>\n<li>We have created new theory, models, and analyses to provide lightweight and weighted influence of dynamic dependencies among source-code instructions. Upon these, we have created a visualization that reveals the cohesiveness of fault-related code and other cross-cutting features.</li>\n<li>We have created new techniques to better locate bugs in the database-interaction routines and in database schema. We have created a technique to automatically describe faults in a program that are causing failures.</li>\n<li>We have created a technique to perform deep analysis of interactions that occur in software, as well as ways to make such analysis much more efficient and practical for software developers. These analyses will enable powerful mechanisms to quickly find the root cause of many problems in software.</li>\n<li>We have created a visualization and interactive tool, called Chronos, that provides a zoomable user interface, global and local timeline visualizations, detailed semantic source-code change information and development meta-data, and interaction mechanisms to support software-development tasks that require understanding of complex change-history events.</li>\n<li>We have created a novel visualization that reveals clusters of source code that co-execute to produce behavioral features of the program throughout and within executions. We created a clustered visualization of source-code that is informed by dynamic control flow of multiple executions; each cluster represents commonly interacting logic that composes software features.</li>\n<li>We have created novel foundational analyses to compute runtime dependency summaries, dynamically, to improve the efficiency of dynamic analyses and to provide precise dependence metadata.</li>\n<li>We have empirically investigated and evaluated the ways in which fault quantity and fault type influence coverage-based fault-localization techniques. These findings contribute to the knowledge of all software engineers and software- engineering researchers.</li>\n</ul>\n<p><br />In terms of publications, we published 14 top-tier, peer-reviewed, conference papers; two top-tier, peer-reviewed journal articles; one peer-reviewed workshop paper; and two comple...",
  "por_txt_cntn": "\nLargely facilitated by the support of this grant, we have made significant and substantive advances in the science of software engineering, and specifically in the areas of software debugging and comprehension. These advances, taken together, promote the development and maintenance of higher quality software and more efficient maintenance. \n\nThe outcomes of this grant are numerable: we made several scientific advances; published several top-tier scientific articles and papers; supported and trained Ph.D., Masters, and undergraduate students to become our next generation leaders and scientists; openly published several software artifacts upon which other practitioners and scientists can build; disseminated our work to the public with talks and various websites; and produced two Ph.D. dissertations.\nIn terms of scientific advances:\n\nWe have created new theory, models, and analyses to support source-code history querying, analysis, and exploration. Upon these, we have created client techniques that support automatic developer recommendations for debugging tasks, and that support flexible and powerful user querying of history (i.e., \"history slicing\").\nWe have performed empirical studies of fault behavior, interaction, and effects on automated software maintenance techniques. These empirical studies inform how future studies should be performed by researchers (both by us and others) because they reveal that certain effects are prevalent and cannot be ignored. Moreover, the findings show that popular beliefs about the effectiveness of a popular class of fault localization techniques (i.e., spectra-based fault localization) were likely incorrect.\nWe have created new theory, models, and analyses to provide lightweight and weighted influence of dynamic dependencies among source-code instructions. Upon these, we have created a visualization that reveals the cohesiveness of fault-related code and other cross-cutting features.\nWe have created new techniques to better locate bugs in the database-interaction routines and in database schema. We have created a technique to automatically describe faults in a program that are causing failures.\nWe have created a technique to perform deep analysis of interactions that occur in software, as well as ways to make such analysis much more efficient and practical for software developers. These analyses will enable powerful mechanisms to quickly find the root cause of many problems in software.\nWe have created a visualization and interactive tool, called Chronos, that provides a zoomable user interface, global and local timeline visualizations, detailed semantic source-code change information and development meta-data, and interaction mechanisms to support software-development tasks that require understanding of complex change-history events.\nWe have created a novel visualization that reveals clusters of source code that co-execute to produce behavioral features of the program throughout and within executions. We created a clustered visualization of source-code that is informed by dynamic control flow of multiple executions; each cluster represents commonly interacting logic that composes software features.\nWe have created novel foundational analyses to compute runtime dependency summaries, dynamically, to improve the efficiency of dynamic analyses and to provide precise dependence metadata.\nWe have empirically investigated and evaluated the ways in which fault quantity and fault type influence coverage-based fault-localization techniques. These findings contribute to the knowledge of all software engineers and software- engineering researchers.\n\n\n\nIn terms of publications, we published 14 top-tier, peer-reviewed, conference papers; two top-tier, peer-reviewed journal articles; one peer-reviewed workshop paper; and two complete Ph.D. dissertations. Additionally, we have two journal papers still under review resulting from the supported research. All publications acknowledge the crucial support from th..."
 }
}