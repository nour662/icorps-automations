{
 "awd_id": "1116055",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Ordering-Based Semantics for Emerging Models of Parallel Computing",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2015-07-31",
 "tot_intn_awd_amt": 497530.0,
 "awd_amount": 497530.0,
 "awd_min_amd_letter_date": "2011-07-19",
 "awd_max_amd_letter_date": "2011-07-19",
 "awd_abstract_narration": "With the proliferation of multicore processors has come resurgence\r\nof interest in parallel programming languages and models,\r\nparticularly those intended to make it easier for non-expert\r\nprogrammers to correctly implement important classes of parallel\r\napplications.  Unfortunately, most such languages and models are \r\ninformally -- and thus imprecisely -- defined.  The aim of the \r\nsponsored research is to develop more formal definitions, which will\r\nbe needed in order to truly understand and reason about programs,\r\nguide language implementations, and verify implementation\r\ncorrectness.  Within computer science and allied fields, formal\r\ndefinitions will facilitate the transition to ubiquitous parallel\r\ncomputing.  For society at large, this transition will be essential\r\nto maintain the momentum of the IT revolution, across government,\r\nindustry, science, the arts, and entertainment.\r\n\r\nThe technical core of the sponsored research is the use of\r\nhistory-based executions to capture both the behavior of individual\r\nthreads of control and the interactions among those threads.  In a\r\ndeparture from previous work, the interactions are always expressed\r\nin terms of atomic blocks, which can capture arbitrary\r\nlanguage-level synchronization mechanisms.  Specific topics being\r\naddressed include transactional memory (including the concepts of\r\npublication and privatization), explicit speculation, and \r\ndeterminism.  The notion of determinism, in particular, is central\r\nto several emerging languages and models specifically intended for \r\nnon-expert programmers.  A formal framework for the definition of\r\ndeterminism will allow alternative definitions to be compared,\r\ncontrasted, and correctly implemented.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Scott",
   "pi_mid_init": "L",
   "pi_sufx_name": "",
   "pi_full_name": "Michael L Scott",
   "pi_email_addr": "scott@cs.rochester.edu",
   "nsf_id": "000343030",
   "pi_start_date": "2011-07-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Rochester",
  "inst_street_address": "910 GENESEE ST",
  "inst_street_address_2": "STE 200",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5852754031",
  "inst_zip_code": "146113847",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "UNIVERSITY OF ROCHESTER",
  "org_prnt_uei_num": "",
  "org_uei_num": "F27KDXZMF9Y8"
 },
 "perf_inst": {
  "perf_inst_name": "University of Rochester",
  "perf_str_addr": "910 GENESEE ST",
  "perf_city_name": "ROCHESTER",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146113847",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 497530.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Much of the complexity of parallel computing stems from the need to reason about the many possible orderings of operations performed in different threads of control. &nbsp;This complexity impacts both language designers, who must formally specify the semantics (meaning) of their notation, and application programmers, who must write programs that run correctly.</p>\n<p>Work supported by this grant has advanced our understanding of ordering for two of today's most important programming models&mdash;namely, transactional and deterministic parallelism. &nbsp;For both of these models, we distinguish sharply between the orderings visible at the level of the application program and the orderings visible in the underlying language implementation. &nbsp;The former are simpler, but more abstract. &nbsp;The latter enable optimizations that are hidden from the typical programmer.</p>\n<p>With transactional parallelism, the application programmer writes code blocks that appear to execute atomically&mdash;as indivisible operations. &nbsp;The language implementation achieves atomicity by aborting and restarting a code block whenever two or more values read by that block could not (because of an intervening write by some other block) have been valid at the same time. &nbsp;Past models of transactional ordering have required inconsistent reads to cause <em>immediate</em>&nbsp;aborts, but implementations can often be faster if \"zombie\" blocks&mdash;those that are doomed to abort eventually&mdash;can continue to run for a while. &nbsp;We developed the first transactional semantics that permit such implementations, and allow them to be proven correct. &nbsp;These semantics pave the way for entirely new classes of high-performance transactional parallelism.</p>\n<p>With deterministic parallelism, program behavior is supposed to depend only on the code of the program and its inputs. &nbsp;This stands in sharp contrast to most models of parallelism (including transactional ones), in which program behavior often depends on how the underlying system schedules (interleaves) the operations of different threads. &nbsp;The exact meaning of \"determinism,\" however, has proven surprisingly difficult to formalize. &nbsp;We have addressed the problem by noting that every execution of a program at the implementation level corresponds to (i.e., implements) some abstract execution at the application level. &nbsp;We define a language implementation to be correct if any two observable executions at the implementation level correspond to abstract (application-level) executions that are considered to be <em>equivalent</em>. &nbsp;The definition of determinism then amounts to defining a notion of equivalence for abstract executions. &nbsp;We identified definitions corresponding to a wide variety of informal notions of determinism found in prior studies. &nbsp;Building on a favorite definition, we also designed and implemented a deterministic parallel scripting language language&mdash;Deterministic Parallel Ruby (DPR). &nbsp;Unlike previous notations, DPR introduces performance-enhancing parallelism without sacrificing the simplicity of programming that is the principal strength of scripting.</p>\n<p>In other work, we developed a general technique for software implementations of transactional parallelism that improves performance while preserving application-level semantics by allowing code blocks at the implementation level to read old values of recently overwritten locations (after which they may be able to \"commit in the past\"). &nbsp;We also developed techniques that allow the programmer to provide a transactional system with hints about the likely sources of conflicts. &nbsp;Implementation-level software can then use these hints to significantly reduce the abort rates of hardware-supported transactions such as those found on recent processors from Intel and IBM.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/30/...",
  "por_txt_cntn": "\nMuch of the complexity of parallel computing stems from the need to reason about the many possible orderings of operations performed in different threads of control.  This complexity impacts both language designers, who must formally specify the semantics (meaning) of their notation, and application programmers, who must write programs that run correctly.\n\nWork supported by this grant has advanced our understanding of ordering for two of today's most important programming models&mdash;namely, transactional and deterministic parallelism.  For both of these models, we distinguish sharply between the orderings visible at the level of the application program and the orderings visible in the underlying language implementation.  The former are simpler, but more abstract.  The latter enable optimizations that are hidden from the typical programmer.\n\nWith transactional parallelism, the application programmer writes code blocks that appear to execute atomically&mdash;as indivisible operations.  The language implementation achieves atomicity by aborting and restarting a code block whenever two or more values read by that block could not (because of an intervening write by some other block) have been valid at the same time.  Past models of transactional ordering have required inconsistent reads to cause immediate aborts, but implementations can often be faster if \"zombie\" blocks&mdash;those that are doomed to abort eventually&mdash;can continue to run for a while.  We developed the first transactional semantics that permit such implementations, and allow them to be proven correct.  These semantics pave the way for entirely new classes of high-performance transactional parallelism.\n\nWith deterministic parallelism, program behavior is supposed to depend only on the code of the program and its inputs.  This stands in sharp contrast to most models of parallelism (including transactional ones), in which program behavior often depends on how the underlying system schedules (interleaves) the operations of different threads.  The exact meaning of \"determinism,\" however, has proven surprisingly difficult to formalize.  We have addressed the problem by noting that every execution of a program at the implementation level corresponds to (i.e., implements) some abstract execution at the application level.  We define a language implementation to be correct if any two observable executions at the implementation level correspond to abstract (application-level) executions that are considered to be equivalent.  The definition of determinism then amounts to defining a notion of equivalence for abstract executions.  We identified definitions corresponding to a wide variety of informal notions of determinism found in prior studies.  Building on a favorite definition, we also designed and implemented a deterministic parallel scripting language language&mdash;Deterministic Parallel Ruby (DPR).  Unlike previous notations, DPR introduces performance-enhancing parallelism without sacrificing the simplicity of programming that is the principal strength of scripting.\n\nIn other work, we developed a general technique for software implementations of transactional parallelism that improves performance while preserving application-level semantics by allowing code blocks at the implementation level to read old values of recently overwritten locations (after which they may be able to \"commit in the past\").  We also developed techniques that allow the programmer to provide a transactional system with hints about the likely sources of conflicts.  Implementation-level software can then use these hints to significantly reduce the abort rates of hardware-supported transactions such as those found on recent processors from Intel and IBM.\n\n\t\t\t\t\tLast Modified: 10/30/2015\n\n\t\t\t\t\tSubmitted by: Michael L Scott"
 }
}