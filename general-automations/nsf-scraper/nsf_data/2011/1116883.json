{
 "awd_id": "1116883",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: Static and Dynamic Analysis for Cooperative Concurrency",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2011-07-01",
 "awd_exp_date": "2015-06-30",
 "tot_intn_awd_amt": 359509.0,
 "awd_amount": 359509.0,
 "awd_min_amd_letter_date": "2011-06-27",
 "awd_max_amd_letter_date": "2011-06-27",
 "awd_abstract_narration": "The widespread adoption of multicore processors requires multithreaded\r\nsoftware to exploit these hardware resources.  Unfortunately, the\r\nconstruction and validation of reliable concurrent software currently\r\nrequires extraordinary effort, due to unanticipated interactions\r\nbetween concurrent threads.  Thus, developing better programming\r\ntechniques and tools for concurrent programming is essential.  This\r\nresearch develops a cooperative programming methodology for\r\nmultithreaded software, based on the philosophy that all thread\r\ninterference must be explicitly documented via source-level \"yield\"\r\nannotations by the programmer.\r\n\r\nThe project will investigate both static and dynamic checking\r\ntechniques to verify the correctness of yield annotations.  Once\r\nverified, these annotations guarantee that code executed between\r\nsuccessive yields is serializable and thus amenable to sequential\r\nreasoning.  Moreover, yield-free code is deterministic.  Despite\r\nprovided these strong safety guarantees, this methodology does not\r\nimpact program performance.  The cooperative methodology provides a\r\nrobust foundation for multithreaded software and can potentially\r\ntransform the principles and practices of multithreaded software\r\nengineering.  This work on cooperability will also provide research\r\nopportunities for graduate and undergraduate students, and it will\r\nsupport endeavors to provide access to science education for all\r\nstudents.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Cormac",
   "pi_last_name": "Flanagan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Cormac Flanagan",
   "pi_email_addr": "cormac@ucsc.edu",
   "nsf_id": "000492363",
   "pi_start_date": "2011-06-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Santa Cruz",
  "inst_street_address": "1156 HIGH ST",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA CRUZ",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8314595278",
  "inst_zip_code": "950641077",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "CA19",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA SANTA CRUZ",
  "org_prnt_uei_num": "",
  "org_uei_num": "VXUFPE4MCZH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Santa Cruz",
  "perf_str_addr": "1156 HIGH ST",
  "perf_city_name": "SANTA CRUZ",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "950641077",
  "perf_ctry_code": "US",
  "perf_cong_dist": "19",
  "perf_st_cong_dist": "CA19",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 359509.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The nation's computing infrastructure plays a central role in all aspects of our society. Despite the prominence and importance of this infrastructure, constructing reliable software remains extremely challenging. Faulty software can have an enormous damaging effect on the economy, security, privacy, and even personal safety.</p>\n<p>Most computing systems now use multicore or multiprocessor architectures capable of performing multiple tasks at the same time. This ability to run concurrent threads of control has enabled computations at scales previously unimaginable. However, threads may interfere with each other in subtle ways if the programmer does not properly coordinate their behavior. Errors caused by such unanticipated interactions are a particularly pernicious type of defect. They are difficult to discover during testing since they typically happen only intermittently and are discovered long after the damaging interference occurs.</p>\n<p>This grant explored a programming methodology to support more reliable multithreaded software development. Specifically, we investigated a cooperative programming methodology based on the philosophy that all thread interference must be explicitly documented by the programmer via source-level 'yield' annotations. If a program contains yield annotations at all possible interference points, it is much easier to reason about the program's behavior and to validate its correctness since those annotations mark all possible places where interference may occur.&nbsp;</p>\n<p>As part of this work, we developed specification techniques for 'yield' annotations and designed programming tools to help programmers ensure that the cooperative programming methodology is safely followed. These programming tools include both static and dynamic analyses, with an emphasis on ensuring their reasoning is precise enough to be useful and scalable to large pieces of software.</p>\n<p>The intellectual merit and scientific contributions of this work include the development of a programming methodology supporting more reliable software construction together with analysis tools to enforce that methodology. It also pushes forward the state-of-the-art in program analysis techniques for concurrent systems. The techniques studied are able to identify and document thread interference and enforce noninterference in yield-free code fragments.</p>\n<p>This work has supported numerous undergraduate research students who received valuable training in performing scientific research. Several of the students are now pursuing advanced degrees. In addition, we have participated in a number of curricular efforts and tutorials to improve and broaden the dissemination of our work on concurrent programming and program analysis.</p>\n<p>The greatest broader impact of our work on cooperative programming is improving the reliability and robustness of the nation's software infrastructure. This methodology and associated checkers can prevent common, but potentially highly damaging, defects due to improper coordination among threads. By integrating new methodologies like cooperative programming into computer science curricula, our work may also lead to wide adoption of improved software engineering practices.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/01/2015<br>\n\t\t\t\t\tModified by: Cormac&nbsp;Flanagan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe nation's computing infrastructure plays a central role in all aspects of our society. Despite the prominence and importance of this infrastructure, constructing reliable software remains extremely challenging. Faulty software can have an enormous damaging effect on the economy, security, privacy, and even personal safety.\n\nMost computing systems now use multicore or multiprocessor architectures capable of performing multiple tasks at the same time. This ability to run concurrent threads of control has enabled computations at scales previously unimaginable. However, threads may interfere with each other in subtle ways if the programmer does not properly coordinate their behavior. Errors caused by such unanticipated interactions are a particularly pernicious type of defect. They are difficult to discover during testing since they typically happen only intermittently and are discovered long after the damaging interference occurs.\n\nThis grant explored a programming methodology to support more reliable multithreaded software development. Specifically, we investigated a cooperative programming methodology based on the philosophy that all thread interference must be explicitly documented by the programmer via source-level 'yield' annotations. If a program contains yield annotations at all possible interference points, it is much easier to reason about the program's behavior and to validate its correctness since those annotations mark all possible places where interference may occur. \n\nAs part of this work, we developed specification techniques for 'yield' annotations and designed programming tools to help programmers ensure that the cooperative programming methodology is safely followed. These programming tools include both static and dynamic analyses, with an emphasis on ensuring their reasoning is precise enough to be useful and scalable to large pieces of software.\n\nThe intellectual merit and scientific contributions of this work include the development of a programming methodology supporting more reliable software construction together with analysis tools to enforce that methodology. It also pushes forward the state-of-the-art in program analysis techniques for concurrent systems. The techniques studied are able to identify and document thread interference and enforce noninterference in yield-free code fragments.\n\nThis work has supported numerous undergraduate research students who received valuable training in performing scientific research. Several of the students are now pursuing advanced degrees. In addition, we have participated in a number of curricular efforts and tutorials to improve and broaden the dissemination of our work on concurrent programming and program analysis.\n\nThe greatest broader impact of our work on cooperative programming is improving the reliability and robustness of the nation's software infrastructure. This methodology and associated checkers can prevent common, but potentially highly damaging, defects due to improper coordination among threads. By integrating new methodologies like cooperative programming into computer science curricula, our work may also lead to wide adoption of improved software engineering practices.\n\n \n\n\t\t\t\t\tLast Modified: 09/01/2015\n\n\t\t\t\t\tSubmitted by: Cormac Flanagan"
 }
}