{
 "awd_id": "1116907",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF :Small: Foundations of Permission-Based Object-Oriented Languages",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2015-07-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2011-07-27",
 "awd_max_amd_letter_date": "2011-07-27",
 "awd_abstract_narration": "This research project is exploring a new way of writing computer\r\nprograms, based on a new programming language Plaid.  Plaid is the first\r\nprogramming language to incorporate \"permissions\" natively into the\r\nlanguage.  These permissions allow the programming language to more\r\naccurately model things that change--for example, a connection to a web\r\nsite that might be interrupted and then later reconnected.  Such a\r\npermission-based language helps engineers coordinate on a software\r\nproject, making engineers more productive, and reducing bugs that\r\nend-users see.\r\n\r\nOn a technical level, the project integrates permissions such as\r\n\"unique,\" \"immutable,\" and \"shared\" into the language via a new kind of\r\ntype system, based on linear logic.  These permissions express aliasing\r\ninformation, and this aliasing information can be leveraged to do many\r\nthings, including safely changing the representation of objects at run\r\ntime and automatically parallelizing code.  The project is investigating\r\nthe design of a single permission system that can address multiple such\r\nconcerns; investigating how models of inheritance, composition,\r\nsub typing, casts, and polymorphism must be adapted to handle\r\npermissions; and what design choices can best make such a language\r\npractical for writing programs of significant scale and design complexity.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jonathan",
   "pi_last_name": "Aldrich",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jonathan Aldrich",
   "pi_email_addr": "jonathan.aldrich@cs.cmu.edu",
   "nsf_id": "000426894",
   "pi_start_date": "2011-07-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie-Mellon University",
  "perf_str_addr": "5000 FORBES AVE",
  "perf_city_name": "PITTSBURGH",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133815",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>We developed a theory of permissions that supports delegation-based reuse, as opposed to the inheritance-based reuse present in earlier versions of Plaid. This model is both cleaner and more flexible. The model was published in FTfJP '15.</p>\n<p>We developed a model of statically-typed object-oriented languages that support dynamic creation of class hierarchies, including mixin composition, along with a match construct that generalizes instanceof checks and casts. We started with an extensible tag construct motivated by type theory, and adapted it to support static reasoning about class hierarchy and the tags supported by each object. The implementation of the Wyvern language leverages this theory. This work was published in ECOOP '15.&nbsp;</p>\n<p>We carried out a series of three studies evaluating the concrete benefits of the documentation and checking that is enabled by that paradigm. One study appeared in ECOOP '14 and the other's are in ICPC '15. The results strongly suggest that protocols represent significant barriers in real-world developer tasks, and that interventions related to Plaid's typestate checking system and supporting documentation can significantly improve performance on these tasks.</p>\n<p>We revised our Gradual Typestate paper (ECOOP '11) for journal publication and it has been published in ACM TOPLAS. This work investigates a theory that provides run-time support for typestate and permissions, allowing a flexible mix of static and dynamic checks to ensure that the program is safe. Our revision work has focused on refining the core model of the language, more cleanly separating out the core static theory from the extensions necessary to provide gradual typechecking. This should solidify the foundations of permission-based languages (especially Plaid) while also opening the door to more general future research mixing static and dynamic checking for permissions.</p>\n<p>We published a description of &AElig;MINIUM, the concurrent-by-default extension of Plaid, at ACM TOPLAS. &AElig;MINIUM expresses dependencies using permissions, which are used by the type system to automatically parallelize the application. The &AElig;MINIUM approach provides a modular and composable mechanism for writing concurrent applications, preventing data races in a provable way.</p>\n<p>We developed a substructural type system outfitted with a novel lightweight interference control mechanism, rely-guarantee protocols, that enables controlled aliasing of shared resources. By assigning each alias separate roles, encoded in a novel protocol abstraction in the spirit of rely-guarantee reasoning, our type system ensures that challenging uses of shared state will never interfere in an unsafe fashion. In particular, rely-guarantee protocols ensure that each alias will never observe an unexpected value, or type, when inspecting shared memory regardless of how the changes to that shared state (originating from potentially unknown program contexts) are interleaved at run-time. This work was published at ECOOP '14.<br />We developed a modular verification approach based on the novel abstraction of object propositions, which combine predicates and information about object aliasing. In our methodology, even if shared data is modified, we know that an object invariant specified by a client holds. Our permission system allows verification using a mixture of linear and nonlinear reasoning. We thus offer an alternative to separation logic verification approaches. Object propositions can be more modular in some cases than separation logic because they can more effectively hide the exact aliasing relationships within a module. We validate the practicality of our approach by verifying an instance of the composite pattern. We implement our methodology in the intermediate verification language Boogie (of Microsoft Research), for the composite pattern example. This work was published in the Inte...",
  "por_txt_cntn": "\nWe developed a theory of permissions that supports delegation-based reuse, as opposed to the inheritance-based reuse present in earlier versions of Plaid. This model is both cleaner and more flexible. The model was published in FTfJP '15.\n\nWe developed a model of statically-typed object-oriented languages that support dynamic creation of class hierarchies, including mixin composition, along with a match construct that generalizes instanceof checks and casts. We started with an extensible tag construct motivated by type theory, and adapted it to support static reasoning about class hierarchy and the tags supported by each object. The implementation of the Wyvern language leverages this theory. This work was published in ECOOP '15. \n\nWe carried out a series of three studies evaluating the concrete benefits of the documentation and checking that is enabled by that paradigm. One study appeared in ECOOP '14 and the other's are in ICPC '15. The results strongly suggest that protocols represent significant barriers in real-world developer tasks, and that interventions related to Plaid's typestate checking system and supporting documentation can significantly improve performance on these tasks.\n\nWe revised our Gradual Typestate paper (ECOOP '11) for journal publication and it has been published in ACM TOPLAS. This work investigates a theory that provides run-time support for typestate and permissions, allowing a flexible mix of static and dynamic checks to ensure that the program is safe. Our revision work has focused on refining the core model of the language, more cleanly separating out the core static theory from the extensions necessary to provide gradual typechecking. This should solidify the foundations of permission-based languages (especially Plaid) while also opening the door to more general future research mixing static and dynamic checking for permissions.\n\nWe published a description of &AElig;MINIUM, the concurrent-by-default extension of Plaid, at ACM TOPLAS. &AElig;MINIUM expresses dependencies using permissions, which are used by the type system to automatically parallelize the application. The &AElig;MINIUM approach provides a modular and composable mechanism for writing concurrent applications, preventing data races in a provable way.\n\nWe developed a substructural type system outfitted with a novel lightweight interference control mechanism, rely-guarantee protocols, that enables controlled aliasing of shared resources. By assigning each alias separate roles, encoded in a novel protocol abstraction in the spirit of rely-guarantee reasoning, our type system ensures that challenging uses of shared state will never interfere in an unsafe fashion. In particular, rely-guarantee protocols ensure that each alias will never observe an unexpected value, or type, when inspecting shared memory regardless of how the changes to that shared state (originating from potentially unknown program contexts) are interleaved at run-time. This work was published at ECOOP '14.\nWe developed a modular verification approach based on the novel abstraction of object propositions, which combine predicates and information about object aliasing. In our methodology, even if shared data is modified, we know that an object invariant specified by a client holds. Our permission system allows verification using a mixture of linear and nonlinear reasoning. We thus offer an alternative to separation logic verification approaches. Object propositions can be more modular in some cases than separation logic because they can more effectively hide the exact aliasing relationships within a module. We validate the practicality of our approach by verifying an instance of the composite pattern. We implement our methodology in the intermediate verification language Boogie (of Microsoft Research), for the composite pattern example. This work was published in the Internation Symposium on Formal Methods (FM '14).\n\nWe carried out a case study verifying snapshotable tree..."
 }
}