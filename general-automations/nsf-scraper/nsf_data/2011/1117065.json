{
 "awd_id": "1117065",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TC: Small: Least Privilege Enforcement through Secure Memory Views",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2011-08-15",
 "awd_exp_date": "2017-07-31",
 "tot_intn_awd_amt": 499902.0,
 "awd_amount": 499902.0,
 "awd_min_amd_letter_date": "2011-08-08",
 "awd_max_amd_letter_date": "2017-02-01",
 "awd_abstract_narration": "The goal of this project is to provide protection against exploits through untrusted third-party software components and against malicious application manipulation. These problems constitute an important class of vulnerabilities in current software, and are tied to a common denominator -- the lack of ability to divide a program and the data manipulated by it in a fine-grained manner and to control the interactions between the resulting constituents. \r\n   \r\nThis project proposes practical fine-grained ``least privilege'' enforcement through a computation model where the heap can be divided into a dynamic number of memory domains. Security contexts --- called secure memory views (SMVs) --- can be defined that map privileges of code executing within them onto memory domains. Threads are allowed to dynamically switch their set of privileges (i.e., switch which SMVs they are bound to) in a secure and controlled fashion, termed security context switching. These ideas are realized through three core contributions. (1) A programming model is devised to allow the application programmer to easily apply the proposed techniques, while also providing enough structure to reason about the resulting properties and to secure these. (2) The new concepts are reified within a modern mainstream programming language through development of a compiler supporting the language extensions, as well as modifications of the language runtime. (3) An efficient implementation of security context switching is proposed, involving both the language runtime and the operating system kernel itself. To validate the research, a popular web browser as well as a web server are enhanced to use SMVs. By using widely employed open-source software for implementing and validating the proposed support our concepts become available to a large community for use as well as further research and development.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Patrick",
   "pi_last_name": "Eugster",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Patrick T Eugster",
   "pi_email_addr": "peugster@cs.purdue.edu",
   "nsf_id": "000233715",
   "pi_start_date": "2011-08-08",
   "pi_end_date": "2017-02-01"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Aniket",
   "pi_last_name": "Kate",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Aniket Kate",
   "pi_email_addr": "aniket@purdue.edu",
   "nsf_id": "000705066",
   "pi_start_date": "2017-02-01",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Patrick",
   "pi_last_name": "Eugster",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Patrick T Eugster",
   "pi_email_addr": "peugster@cs.purdue.edu",
   "nsf_id": "000233715",
   "pi_start_date": "2017-02-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Purdue University",
  "inst_street_address": "2550 NORTHWESTERN AVE # 1100",
  "inst_street_address_2": "",
  "inst_city_name": "WEST LAFAYETTE",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "7654941055",
  "inst_zip_code": "479061332",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IN04",
  "org_lgl_bus_name": "PURDUE UNIVERSITY",
  "org_prnt_uei_num": "YRXVL4JYCEF5",
  "org_uei_num": "YRXVL4JYCEF5"
 },
 "perf_inst": {
  "perf_inst_name": "Purdue University",
  "perf_str_addr": "2550 NORTHWESTERN AVE # 1100",
  "perf_city_name": "WEST LAFAYETTE",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "479061332",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "IN04",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779500",
   "pgm_ele_name": "TRUSTWORTHY COMPUTING"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7795",
   "pgm_ref_txt": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 499902.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project has investigated the feasibility of pure software-based, yet strong, protection against malicious exploits by untrusted third-party software components. Such exploits namely constitute an important class of vulnerabilities in current software due the common scenario of execution of third-party software components for instance in web browsers, and the inability to currently divide a program and the data manipulated by it in a fine-grained manner and to control the interactions between the different components.&nbsp;<br />The project has proposed practical fine-grained ``least privilege'' enforcement through a computation model where the heap can be divided into a dynamic number of memory domains. More precisely, the project has investigated (1) programming abstractions, corresponding (2) low-level as well as (3) high-level programming (language) support, with a close focus on empirical evaluation to demonstrate low performance overheads. Some of the key findings and outcomes in these categories are as follows:</p>\n<p>(1) We have introduced a notion of security contexts --- called secure memory views (SMVs) --- that can be defined by programmers. These map privileges of code executing within them onto memory domains.&nbsp;</p>\n<p>(2) Concretely we have implemented this model through a C library in a way extending and generalizing conventional thread and process handling in the kernel of the mainstream Linux operating system.&nbsp;</p>\n<p>(3) An extension of the higher-level Java programming language and its runtime environment, implemented respectively with the JastAdd extensible compiler and the Jikes research virtual machine, facilitate the use of this model.&nbsp;</p>\n<p>(4) We have shown the practical performance of our approach on several benchmark programs including web browsers, web servers, as well as generic parallel programming benchmarks such as PARSEC. With our C library overheads consisted typically of around only 5% increase in execution time only despite the strong isolation properties achieved, whilst only few lines of code had to be modified to leverage our SMVs in such existing software.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/17/2017<br>\n\t\t\t\t\tModified by: Patrick&nbsp;T&nbsp;Eugster</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project has investigated the feasibility of pure software-based, yet strong, protection against malicious exploits by untrusted third-party software components. Such exploits namely constitute an important class of vulnerabilities in current software due the common scenario of execution of third-party software components for instance in web browsers, and the inability to currently divide a program and the data manipulated by it in a fine-grained manner and to control the interactions between the different components. \nThe project has proposed practical fine-grained ``least privilege'' enforcement through a computation model where the heap can be divided into a dynamic number of memory domains. More precisely, the project has investigated (1) programming abstractions, corresponding (2) low-level as well as (3) high-level programming (language) support, with a close focus on empirical evaluation to demonstrate low performance overheads. Some of the key findings and outcomes in these categories are as follows:\n\n(1) We have introduced a notion of security contexts --- called secure memory views (SMVs) --- that can be defined by programmers. These map privileges of code executing within them onto memory domains. \n\n(2) Concretely we have implemented this model through a C library in a way extending and generalizing conventional thread and process handling in the kernel of the mainstream Linux operating system. \n\n(3) An extension of the higher-level Java programming language and its runtime environment, implemented respectively with the JastAdd extensible compiler and the Jikes research virtual machine, facilitate the use of this model. \n\n(4) We have shown the practical performance of our approach on several benchmark programs including web browsers, web servers, as well as generic parallel programming benchmarks such as PARSEC. With our C library overheads consisted typically of around only 5% increase in execution time only despite the strong isolation properties achieved, whilst only few lines of code had to be modified to leverage our SMVs in such existing software.\n\n\t\t\t\t\tLast Modified: 08/17/2017\n\n\t\t\t\t\tSubmitted by: Patrick T Eugster"
 }
}