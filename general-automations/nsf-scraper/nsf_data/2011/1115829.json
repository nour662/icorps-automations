{
 "awd_id": "1115829",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TC: Small: Simplification of Obfuscated Executables",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2011-09-01",
 "awd_exp_date": "2015-11-30",
 "tot_intn_awd_amt": 369268.0,
 "awd_amount": 401252.0,
 "awd_min_amd_letter_date": "2011-08-19",
 "awd_max_amd_letter_date": "2013-05-03",
 "awd_abstract_narration": "Programs with potentially malicious content are becoming increasingly common. Such programs are usually highly obfuscated, using a variety of techniques that make it difficult to analyze the code, figure out its internal logic, and develop countermeasures.  Existing tools for reverse engineering such programs are primitive and require a great deal of tedious and time-consuming manual intervention, which hampers the timely development of defenses against newly discovered malware.  This project aims to devise automatic techniques to simplify away these obfuscations and thereby make it significantly faster and easier to understand the internal logic of obfuscated code with potentially malicious content.  \r\n\r\nThe project uses dynamic program analysis techniques to identify instructions that affect the program's observable behavior; these instructions are then extracted and, where appropriate, simplified using equational techniques.   Key research questions investigated include simplification in the face of arbitrary obfuscations and combinations of obfuscations, including (possibly multiple layers of) self-modification and emulation. The main impact of this project will be to make it easier and quicker for security researchers to figure out the internal logic of malware programs.  This, in turn, will make it possible to respond more quickly to new malware and develop countermeasures to them faster and with less manual intervention.  The effect will be to reduce the damage done by malware before they can be neutralized.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Saumya",
   "pi_last_name": "Debray",
   "pi_mid_init": "K",
   "pi_sufx_name": "",
   "pi_full_name": "Saumya K Debray",
   "pi_email_addr": "debray@cs.arizona.edu",
   "nsf_id": "000120753",
   "pi_start_date": "2011-08-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Arizona",
  "inst_street_address": "845 N PARK AVE RM 538",
  "inst_street_address_2": "",
  "inst_city_name": "TUCSON",
  "inst_state_code": "AZ",
  "inst_state_name": "Arizona",
  "inst_phone_num": "5206266000",
  "inst_zip_code": "85721",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "AZ07",
  "org_lgl_bus_name": "UNIVERSITY OF ARIZONA",
  "org_prnt_uei_num": "",
  "org_uei_num": "ED44Y3W6P7B9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Arizona",
  "perf_str_addr": "845 N PARK AVE RM 538",
  "perf_city_name": "TUCSON",
  "perf_st_code": "AZ",
  "perf_st_name": "Arizona",
  "perf_zip_code": "85721",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "AZ07",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "779500",
   "pgm_ele_name": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7795",
   "pgm_ref_txt": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 369268.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 15984.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Computer security is a crucially important problem for all of us. &nbsp;When any new malicious software (malware) is found, security analysts have to quickly figure out its internal logic in order to understand what does and is capable of doing, from which they can work out how best to defend against it. &nbsp;Authors of malicious software understand this and deliberately use a variety of techniques, collectively called \"code obfuscation,\" to make it difficult to understand what malware is doing. &nbsp;Current techniques for dealing with such obfuscations are either&nbsp;tailored closely to specific approaches to obfuscation, which make them relatively easy to sidestep, or else rely on manual analysis, which is slow and cumbersome. &nbsp;This project aimed to develop generic automated techniques for \"deobfuscation,\" i.e., penetrating code obfuscations and uncovering the internal logic of obfuscated software. &nbsp;An important criterion was to make as few assumptions about the obfuscations as possible, so that the techniques would be applicable to obfuscations of the future, including those that we have not even encountered at this time and know nothing about.</p>\n<p>The project has made a great deal of progress in meeting its objectives. &nbsp;The most significant achievement is the development of an automated deobfuscation technique that makes few assumptions about what sorts of obfuscations have been applied,but which is nevertheless effective in exposing the internal logic of the software. &nbsp;The project developed deobfuscation techniques both for ordinary executable software and also for malicious software that is embedded in infected web pages. A second significant outcome was the development of improved techniques for reasoning about the behavior of obfuscated software so as to figure out what other behaviors the obfuscated code might be capable of. &nbsp;This makes it easier to understand the behavior of malicious software that try to make their defenses harder to penetrate by displaying the malicious behavior only under some specific situations---say, on some particulardate or for some specific Internet address. &nbsp;</p>\n<p>Underlying both these outcomes is the development of a very precise mechanism,called taint analysis, for tracking the flow of values through the instructions of the program. &nbsp;Previous work on such analyses was too coarse-grained for some kinds of obfuscations and so resulted in a lot of imprecision. &nbsp;This project devised a way to work at a much finer granularity, at the level of individual bits, so as to produce a much more precise analysis, without increasing the cost of analysis too much. &nbsp;</p>\n<p>The project also partially supported research on speeding up database systems software by customizing the software, as it executes, to the data it is operating on.This work is currently being commercialized through a Tucson, Arizona-based startup company.</p>\n<p>The project has contributed to the development of a skilled workforce with advanced computational skills. &nbsp;It supported the research of four PhD students and over a dozen undergraduate students, including several under-represented minorities. &nbsp;These students were trained in advanced techniques in low-level program analysis, software protection, and reverse engineering, which they would not otherwise have seen in the regular university curiculum. &nbsp;It resulted in two doctoral dissertations, with a third PhD dissertation currently in preparation. Results from the research were also incorporated into instructional material for classroom lectures in graduate and undergraduate courses.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/30/2015<br>\n\t\t\t\t\tModified by: Saumya&nbsp;K&nbsp;Debray</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t...",
  "por_txt_cntn": "\nComputer security is a crucially important problem for all of us.  When any new malicious software (malware) is found, security analysts have to quickly figure out its internal logic in order to understand what does and is capable of doing, from which they can work out how best to defend against it.  Authors of malicious software understand this and deliberately use a variety of techniques, collectively called \"code obfuscation,\" to make it difficult to understand what malware is doing.  Current techniques for dealing with such obfuscations are either tailored closely to specific approaches to obfuscation, which make them relatively easy to sidestep, or else rely on manual analysis, which is slow and cumbersome.  This project aimed to develop generic automated techniques for \"deobfuscation,\" i.e., penetrating code obfuscations and uncovering the internal logic of obfuscated software.  An important criterion was to make as few assumptions about the obfuscations as possible, so that the techniques would be applicable to obfuscations of the future, including those that we have not even encountered at this time and know nothing about.\n\nThe project has made a great deal of progress in meeting its objectives.  The most significant achievement is the development of an automated deobfuscation technique that makes few assumptions about what sorts of obfuscations have been applied,but which is nevertheless effective in exposing the internal logic of the software.  The project developed deobfuscation techniques both for ordinary executable software and also for malicious software that is embedded in infected web pages. A second significant outcome was the development of improved techniques for reasoning about the behavior of obfuscated software so as to figure out what other behaviors the obfuscated code might be capable of.  This makes it easier to understand the behavior of malicious software that try to make their defenses harder to penetrate by displaying the malicious behavior only under some specific situations---say, on some particulardate or for some specific Internet address.  \n\nUnderlying both these outcomes is the development of a very precise mechanism,called taint analysis, for tracking the flow of values through the instructions of the program.  Previous work on such analyses was too coarse-grained for some kinds of obfuscations and so resulted in a lot of imprecision.  This project devised a way to work at a much finer granularity, at the level of individual bits, so as to produce a much more precise analysis, without increasing the cost of analysis too much.  \n\nThe project also partially supported research on speeding up database systems software by customizing the software, as it executes, to the data it is operating on.This work is currently being commercialized through a Tucson, Arizona-based startup company.\n\nThe project has contributed to the development of a skilled workforce with advanced computational skills.  It supported the research of four PhD students and over a dozen undergraduate students, including several under-represented minorities.  These students were trained in advanced techniques in low-level program analysis, software protection, and reverse engineering, which they would not otherwise have seen in the regular university curiculum.  It resulted in two doctoral dissertations, with a third PhD dissertation currently in preparation. Results from the research were also incorporated into instructional material for classroom lectures in graduate and undergraduate courses.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 11/30/2015\n\n\t\t\t\t\tSubmitted by: Saumya K Debray"
 }
}