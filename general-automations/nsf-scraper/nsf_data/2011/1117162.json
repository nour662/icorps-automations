{
 "awd_id": "1117162",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: CSR: Small: Fine-Grained Modularity and Reuse of VM Components",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2014-07-31",
 "tot_intn_awd_amt": 499867.0,
 "awd_amount": 499867.0,
 "awd_min_amd_letter_date": "2011-07-27",
 "awd_max_amd_letter_date": "2011-07-27",
 "awd_abstract_narration": "Much of today's information infrastructure makes use of virtual\r\nmachines (VMs). For example, consumer devices typically contain VMs\r\nfor Java, JavaScript, and Flash. VMs are often well suited to roll out\r\nnew capabilities to a broad range of target devices, which is why new\r\nVMs are being created all the time. Unfortunately, most VMs today are\r\ncreated from scratch, in spite of the fact that they are broadly\r\nsimilar. This is a considerable waste of programmer time and money.\r\nThe goal of this project is to make creating VMs simpler, by creating\r\na \"toolbox\" of components from which new VMs can be constructed\r\neasily.\r\n\r\nThe technical challenge is to create building blocks that can be put\r\ntogether to work as well as the custom-crafted VMs of today. In many\r\ncases, VM performance is critical. For example, on mobile devices, a\r\nslower VM might force us to run the processor at a higher speed,\r\nleading to faster battery depletion. This research promises that \r\none may one day be able to create a competitively\r\nperforming VM for Java, JavaScript and Flash in which some parts are\r\nshared, so that the total size is much smaller than three separate\r\nVMs. This is important for resource-constrained devices such as\r\nmobile phones. Re-using components rather than reinventing the wheel\r\neach time would reduce the entry cost for new languages. Sharing\r\ncomponents would also lead to pooling of debugging resources, reducing\r\nerrors and thereby leading to a safer and more stable computing\r\ninfrastructure.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Franz",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michael Franz",
   "pi_email_addr": "franz@uci.edu",
   "nsf_id": "000162759",
   "pi_start_date": "2011-07-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Irvine",
  "inst_street_address": "160 ALDRICH HALL",
  "inst_street_address_2": "",
  "inst_city_name": "IRVINE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9498247295",
  "inst_zip_code": "926970001",
  "inst_country_name": "United States",
  "cong_dist_code": "47",
  "st_cong_dist_code": "CA47",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA IRVINE",
  "org_prnt_uei_num": "MJC5FCYQTPE6",
  "org_uei_num": "MJC5FCYQTPE6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Irvine",
  "perf_str_addr": "160 ALDRICH HALL",
  "perf_city_name": "IRVINE",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "926970001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "47",
  "perf_st_cong_dist": "CA47",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 499867.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><div class=\"page\" title=\"Page 1\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>Our project had the goal of developing the components of a modular virtual machine / language runtime that will make it easier for designers of programming languages, particularly dynamic languages, to get high-performing implementations off the ground. In the current state of the art, the up-front investment required to build a high- performance language runtime is so great that only a small fraction of deserving programming languages ever gain implementations beyond a simple interpreter.&nbsp;</span></p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"page\" title=\"Page 2\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>We largely succeeded in bringing down the effort required for making a dynamically typed programming language perform well. Of particular significance is</span>&nbsp;a new technique \"Iterator Peeling\" that leads to significant speedups of programming languages such as Python. We believe that it will be broadly adopted by language implementors.</p>\n<p>We have also made significant progress on optimizing information-flow tracking for programming languages that support certain kinds of security type systems. Information-flow tracking could solve many of the security problems that plague current web browsers, but current browsers do not support this feature because it has too much runtime overhead. The new techniques that we have developed under this award make information-flow tracking substantially more efficient, making it practical to incorporate them directly into web browsers. If this were adopted by browser vendors, it would lead to an altogether safer web browsing experience for everyone.</p>\n</div>\n</div>\n</div>\n</div><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/30/2014<br>\n\t\t\t\t\tModified by: Michael&nbsp;Franz</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\n\n\n\nOur project had the goal of developing the components of a modular virtual machine / language runtime that will make it easier for designers of programming languages, particularly dynamic languages, to get high-performing implementations off the ground. In the current state of the art, the up-front investment required to build a high- performance language runtime is so great that only a small fraction of deserving programming languages ever gain implementations beyond a simple interpreter. \n\n\n\n\n\n\n\n\n\nWe largely succeeded in bringing down the effort required for making a dynamically typed programming language perform well. Of particular significance is a new technique \"Iterator Peeling\" that leads to significant speedups of programming languages such as Python. We believe that it will be broadly adopted by language implementors.\n\nWe have also made significant progress on optimizing information-flow tracking for programming languages that support certain kinds of security type systems. Information-flow tracking could solve many of the security problems that plague current web browsers, but current browsers do not support this feature because it has too much runtime overhead. The new techniques that we have developed under this award make information-flow tracking substantially more efficient, making it practical to incorporate them directly into web browsers. If this were adopted by browser vendors, it would lead to an altogether safer web browsing experience for everyone.\n\n\n\n\n\n\t\t\t\t\tLast Modified: 10/30/2014\n\n\t\t\t\t\tSubmitted by: Michael Franz"
 }
}