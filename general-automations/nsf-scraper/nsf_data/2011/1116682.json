{
 "awd_id": "1116682",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TC: Small: WATCHDOG: Hardware-Assisted Prevention of All Use-After-Free Security Vulnerabilities",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2017-07-31",
 "tot_intn_awd_amt": 499961.0,
 "awd_amount": 499961.0,
 "awd_min_amd_letter_date": "2011-07-18",
 "awd_max_amd_letter_date": "2016-03-31",
 "awd_abstract_narration": "A use-after-free error is a software flaw that potentially allows an attacker to remotely inject malicious software or corrupt memory values. Such attacks can result in the theft of private data, propagation of worms and viruses, or the creation of botnet nodes that can be programmed to spew spam or disrupt Internet traffic.  Recently, use-after-free vulnerabilities have been found in crucial software such as Microsoft's Internet Explorer, Adobe Acrobat Reader, and Firefox among others.  The goal of the Watchdog project is to devise hardware and software mechanisms to prevent all such vulnerabilities.\r\n\r\nTo prevent use-after-free vulnerabilities, the researchers will develop hardware for enforcing safe manual memory management, without compromising system performance.  They will study a formal model of their designs to establish the correctness of the techniques.  The hardware designs will be prototyped using detailed micro-architectural simulations.  The researchers will evaluate correctness and performance by using a suite of benchmark tests and off-the-shelf software.  The tools and prototypes will be openly distributed for others to build upon, and the research findings will be integrated into the security and hardware courses taught by the researchers.  If successful, the technology developed by this research will have significant societal impacts, improving the security of our computing ecosystem by eliminating an important class of vulnerabilities that is actively being exploited to compromise systems and spread malware.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Stephan",
   "pi_last_name": "Zdancewic",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Stephan A Zdancewic",
   "pi_email_addr": "stevez@cis.upenn.edu",
   "nsf_id": "000220116",
   "pi_start_date": "2016-03-31",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Milo",
   "pi_last_name": "Martin",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Milo Martin",
   "pi_email_addr": "milom@cis.upenn.edu",
   "nsf_id": "000383219",
   "pi_start_date": "2011-07-18",
   "pi_end_date": "2015-07-08"
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Stephan",
   "pi_last_name": "Zdancewic",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Stephan A Zdancewic",
   "pi_email_addr": "stevez@cis.upenn.edu",
   "nsf_id": "000220116",
   "pi_start_date": "2011-07-18",
   "pi_end_date": "2015-07-08"
  }
 ],
 "inst": {
  "inst_name": "University of Pennsylvania",
  "inst_street_address": "3451 WALNUT ST STE 440A",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158987293",
  "inst_zip_code": "191046205",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE",
  "org_prnt_uei_num": "GM1XX56LEP58",
  "org_uei_num": "GM1XX56LEP58"
 },
 "perf_inst": {
  "perf_inst_name": "University of Pennsylvania",
  "perf_str_addr": "3451 WALNUT ST STE 440A",
  "perf_city_name": "PHILADELPHIA",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191046205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779500",
   "pgm_ele_name": "TRUSTWORTHY COMPUTING"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7795",
   "pgm_ref_txt": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 499961.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The lack of memory safety in languages such as C and C++ is a root source of exploitable security vulnerabilities prevalent in more computing infrastructure. This project explored both hardware and software techniques toeliminate such vulnerabilities by enforcing comprehensive memory safety. In bothcases, the technical approach is to associate space bounds and identifiermetadata with pointers, propagate them on pointer operations, and check them onpointer dereferences. Checking the bounds and identifier metadata provides bothprecise, byte-granularity buffer-overflow protection and protection fromuse-after-free errors, even in the presence of reallocations.</p>\n<p>This project explored the effectiveness of storing pointer metadata in a disjoint metadata space to provide both comprehensive protection and enhance compatibility with existing code. Our implementations reduce the runtime overhead with hardware extensions that use micro-operations to implement metadata access and checking and a dedicated identifier cache to reduce checking overhead. The hardware extension also eliminates metadata copies via register renaming in the out-of-order core.</p>\n<p>Subsequently, we have proposed a set of ISA extensions called WatchdogLite that provides hardware acceleration for a compiler implementation of pointer-based checking. This division of labor between the compiler and the hardware allows for hardware acceleration while using only preexisting architectural registers. By leveraging the compiler to identify pointers, perform check elimination, and insert the new instructions, this approach attains performance similar to prior hardware-intensive approaches without adding any hardware structures for tracking metadata.</p>\n<p>During the course of this project, Intel developed Memory Protection Extensions(MPX) and released the ISA specification in 2013. Intel&rsquo;s MPX extensions are similar to WatchdogLite. Intel&rsquo;s software implementation---PointerChecker---is similar to SoftBoundCETS. Intel MPX uses pointer-based checking with disjoint metadata, adding new instructions for efficiently accessing the metadata shadowspace, and adding instruction for accelerating bounds checking. In contrast with WatchdogLite, MPX does not include support for accelerating use-after-freechecking. PI Santosh Nagarakatte has collaborated with Intel to explore the addition of use-after-free checking support to Intel MPX.</p>\n<p>We also discovered that Intel MPX&rsquo;s support for incremental deployment of bounds checking results in the loss of comprehensiveness in the presence of insidious type casts from integers to pointers either directly or indirectly through memory. Particularly, any arbitrary pointer manufactured through type casts will be allowed to access any location in memory (even with MPX protection) because(1) the pointer in the metadata space is not updated during integer operations,(2) the pointer loaded and the pointer in the metadata space would mismatch on a metadata load, and (3) the result is an un-bounded pointer. The compiler can identify the occurrence of such type casts either implicitly or explicitly and warn the programmer about them.</p>\n<p>During the course of this project, we also explored various other extensions to memory safety. First, we have investigated the impact of compiler optimizations on instrumentation added for memory safety. We have also developed methods tocheck if compiler optimizations can erroneously remove instrumentation added by memory safety transformation. Second, we have also developed a suite of micro-optimizations to reduce the overhead of memory safety checks. Third,enforcing atomicity and race freedom for memory safety instrumentation with multithreaded programs.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/24/2017<br>\n\t\t\t\t\tModified by: Stephan&nbsp;A&nbsp;Zdancewic</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe lack of memory safety in languages such as C and C++ is a root source of exploitable security vulnerabilities prevalent in more computing infrastructure. This project explored both hardware and software techniques toeliminate such vulnerabilities by enforcing comprehensive memory safety. In bothcases, the technical approach is to associate space bounds and identifiermetadata with pointers, propagate them on pointer operations, and check them onpointer dereferences. Checking the bounds and identifier metadata provides bothprecise, byte-granularity buffer-overflow protection and protection fromuse-after-free errors, even in the presence of reallocations.\n\nThis project explored the effectiveness of storing pointer metadata in a disjoint metadata space to provide both comprehensive protection and enhance compatibility with existing code. Our implementations reduce the runtime overhead with hardware extensions that use micro-operations to implement metadata access and checking and a dedicated identifier cache to reduce checking overhead. The hardware extension also eliminates metadata copies via register renaming in the out-of-order core.\n\nSubsequently, we have proposed a set of ISA extensions called WatchdogLite that provides hardware acceleration for a compiler implementation of pointer-based checking. This division of labor between the compiler and the hardware allows for hardware acceleration while using only preexisting architectural registers. By leveraging the compiler to identify pointers, perform check elimination, and insert the new instructions, this approach attains performance similar to prior hardware-intensive approaches without adding any hardware structures for tracking metadata.\n\nDuring the course of this project, Intel developed Memory Protection Extensions(MPX) and released the ISA specification in 2013. Intel?s MPX extensions are similar to WatchdogLite. Intel?s software implementation---PointerChecker---is similar to SoftBoundCETS. Intel MPX uses pointer-based checking with disjoint metadata, adding new instructions for efficiently accessing the metadata shadowspace, and adding instruction for accelerating bounds checking. In contrast with WatchdogLite, MPX does not include support for accelerating use-after-freechecking. PI Santosh Nagarakatte has collaborated with Intel to explore the addition of use-after-free checking support to Intel MPX.\n\nWe also discovered that Intel MPX?s support for incremental deployment of bounds checking results in the loss of comprehensiveness in the presence of insidious type casts from integers to pointers either directly or indirectly through memory. Particularly, any arbitrary pointer manufactured through type casts will be allowed to access any location in memory (even with MPX protection) because(1) the pointer in the metadata space is not updated during integer operations,(2) the pointer loaded and the pointer in the metadata space would mismatch on a metadata load, and (3) the result is an un-bounded pointer. The compiler can identify the occurrence of such type casts either implicitly or explicitly and warn the programmer about them.\n\nDuring the course of this project, we also explored various other extensions to memory safety. First, we have investigated the impact of compiler optimizations on instrumentation added for memory safety. We have also developed methods tocheck if compiler optimizations can erroneously remove instrumentation added by memory safety transformation. Second, we have also developed a suite of micro-optimizations to reduce the overhead of memory safety checks. Third,enforcing atomicity and race freedom for memory safety instrumentation with multithreaded programs.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 10/24/2017\n\n\t\t\t\t\tSubmitted by: Stephan A Zdancewic"
 }
}