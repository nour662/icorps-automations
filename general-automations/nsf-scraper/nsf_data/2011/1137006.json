{
 "awd_id": "1137006",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Research Initiation Grant: Integrating Computation into the Materials Science and Engineering Core",
 "cfda_num": "47.041",
 "org_code": "07050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Donna Riley",
 "awd_eff_date": "2011-10-01",
 "awd_exp_date": "2014-09-30",
 "tot_intn_awd_amt": 150000.0,
 "awd_amount": 150000.0,
 "awd_min_amd_letter_date": "2011-09-29",
 "awd_max_amd_letter_date": "2011-09-29",
 "awd_abstract_narration": "This engineering education research initiation grant will partner engineering education researchers and material science faculty to look at how programming skills taught in a material science context help students learn material science concepts.  The proposed research will investigate the impact the intervention has on both students and faculty at the participating institution.\r\n\r\nThe broader significance and importance of this project will be to engage material science faculty in developing research-based content in material science as well as develop content modules that can be broadly disseminated.  This project overlaps with NSF's strategic goals of transforming the frontiers by making investments that lead to emerging new fields of engineering, or shifting existing fields.  Additionally NSF's goal of innovating for society is enabled by creating results and research that are useful for society by informing educational policy and practices.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "ENG",
 "org_dir_long_name": "Directorate for Engineering",
 "div_abbr": "EEC",
 "org_div_long_name": "Division of Engineering Education and Centers",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Falk",
   "pi_mid_init": "L",
   "pi_sufx_name": "",
   "pi_full_name": "Michael L Falk",
   "pi_email_addr": "mfalk@jhu.edu",
   "nsf_id": "000172156",
   "pi_start_date": "2011-09-29",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Alejandra",
   "pi_last_name": "Magana-de-Leon",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Alejandra J Magana-de-Leon",
   "pi_email_addr": "admagana@purdue.edu",
   "nsf_id": "000541666",
   "pi_start_date": "2011-09-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Johns Hopkins University",
  "inst_street_address": "3400 N CHARLES ST",
  "inst_street_address_2": "",
  "inst_city_name": "BALTIMORE",
  "inst_state_code": "MD",
  "inst_state_name": "Maryland",
  "inst_phone_num": "4439971898",
  "inst_zip_code": "212182608",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MD07",
  "org_lgl_bus_name": "THE JOHNS HOPKINS UNIVERSITY",
  "org_prnt_uei_num": "GS4PNKTRNKL3",
  "org_uei_num": "FTMTDMBR29C7"
 },
 "perf_inst": {
  "perf_inst_name": "Johns Hopkins University",
  "perf_str_addr": "3400 N. Charles Street",
  "perf_city_name": "Baltimore",
  "perf_st_code": "MD",
  "perf_st_name": "Maryland",
  "perf_zip_code": "212182681",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MD07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "134000",
   "pgm_ele_name": "EngEd-Engineering Education"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "110E",
   "pgm_ref_txt": "EDUCATION RESEARCH"
  }
 ],
 "app_fund": [
  {
   "app_code": "0110",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001011DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 150000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Our investigation sought to evaluate an innovation in teaching that occured throughout the Materials Science and Engineering curriculum at Johns Hopkins University over three semesters: Spring 2012, Fall 2012 and Spring 2013. In the Spring semester, preferably of their first year, students were highly encouraged to take an introductory programming course entitled \"Computation and Programming in Materials Science and Engineering\". This course provided an introduction to programmming in MATLAB using projects drawn from Materials Science and Engineering examples. In this was programming was taught in the context of the students' discipline. Over the Fall 2012 and Spring 2013 semesters computational modules were introduced into the six core courses of the discipline: Thermodynamics, Kinetics, Structures, Electronic/Magnetica/Optical Properties, Mechanical Properties and Biomaterials. These modules either involved two general approaches which we term \"transparent\" or \"balck box\". In \"transparent\" approaches students were provided with codes, typically in MATLAB, they they had to understand and complete to undertake some relevant learning task. In \"black box\" approaches students worked with existing software tools such as ThermoCalc or COMSOL to complete a relevant learning task, typically interacting with the software via a graphical user interface.</p>\n<p>During this intervention several kinds of data were collected regarding the student perceptions and learning gains. Surveys at the start and end of each semester gauged student's \"technology acceptance\" of computing by measuring their self-perceptions of their ability to use computing, the utility of computing and their expressed intention to seek out computing in their studies and career. Also, before and after computational modules students were given short 4 question ad-hoc assessments related to common misconceptions in the area related to the computational module. Finally a subset of 24 students participated in structured interviews in which they would \"think aloud\" while working on a task closely related to a computational module they had completed.</p>\n<p>There were several interesting findings that resulted from this study. The first was that programming preparation had a higher effect on student self-perception of their computing ability than computational modules deployed during disciplinary classes. Furthermore, students who had taken the contextualized programming class, CPMSE, showed higher self-perception of ability than students who had taken even multiple standard computing classes (see Image 1). When we investigated learning gains during the modules we found that students with CPMSE preparation prior to encountering modules showed higher learning gains in the disciplinary subject matter (see Image 2). Also, iin general \"black box\" modules showed higher learning gains than \"transparent\" modules (see Images 3 and 4). However, when we compared the learning gains on \"transparent\" modules by students with prior CPMSE exposure to those without such exposure, the students who had taken CPMSE showed comparable learning gains on the \"transparent\" modules vis-a-vis the \"black box\" modules (see Image 5).</p>\n<p>These findings indicate the importance of contextualizing the acquisition of programming skills within discipliarily relevant examples. Such approaches not only increased students self-perception of their ability, but also resulted in students being better prepared to engage in computing in their later studies. These computational experiences in the students' core classes produced learning gains, but these learning gains were minimized when students were asked to undertake programming tasks without prior programming experience relevant to their discipline.</p>\n<p>The intellectual merit of this study lies in our improved understanding of how asking students to move between multiple representations: concept...",
  "por_txt_cntn": "\nOur investigation sought to evaluate an innovation in teaching that occured throughout the Materials Science and Engineering curriculum at Johns Hopkins University over three semesters: Spring 2012, Fall 2012 and Spring 2013. In the Spring semester, preferably of their first year, students were highly encouraged to take an introductory programming course entitled \"Computation and Programming in Materials Science and Engineering\". This course provided an introduction to programmming in MATLAB using projects drawn from Materials Science and Engineering examples. In this was programming was taught in the context of the students' discipline. Over the Fall 2012 and Spring 2013 semesters computational modules were introduced into the six core courses of the discipline: Thermodynamics, Kinetics, Structures, Electronic/Magnetica/Optical Properties, Mechanical Properties and Biomaterials. These modules either involved two general approaches which we term \"transparent\" or \"balck box\". In \"transparent\" approaches students were provided with codes, typically in MATLAB, they they had to understand and complete to undertake some relevant learning task. In \"black box\" approaches students worked with existing software tools such as ThermoCalc or COMSOL to complete a relevant learning task, typically interacting with the software via a graphical user interface.\n\nDuring this intervention several kinds of data were collected regarding the student perceptions and learning gains. Surveys at the start and end of each semester gauged student's \"technology acceptance\" of computing by measuring their self-perceptions of their ability to use computing, the utility of computing and their expressed intention to seek out computing in their studies and career. Also, before and after computational modules students were given short 4 question ad-hoc assessments related to common misconceptions in the area related to the computational module. Finally a subset of 24 students participated in structured interviews in which they would \"think aloud\" while working on a task closely related to a computational module they had completed.\n\nThere were several interesting findings that resulted from this study. The first was that programming preparation had a higher effect on student self-perception of their computing ability than computational modules deployed during disciplinary classes. Furthermore, students who had taken the contextualized programming class, CPMSE, showed higher self-perception of ability than students who had taken even multiple standard computing classes (see Image 1). When we investigated learning gains during the modules we found that students with CPMSE preparation prior to encountering modules showed higher learning gains in the disciplinary subject matter (see Image 2). Also, iin general \"black box\" modules showed higher learning gains than \"transparent\" modules (see Images 3 and 4). However, when we compared the learning gains on \"transparent\" modules by students with prior CPMSE exposure to those without such exposure, the students who had taken CPMSE showed comparable learning gains on the \"transparent\" modules vis-a-vis the \"black box\" modules (see Image 5).\n\nThese findings indicate the importance of contextualizing the acquisition of programming skills within discipliarily relevant examples. Such approaches not only increased students self-perception of their ability, but also resulted in students being better prepared to engage in computing in their later studies. These computational experiences in the students' core classes produced learning gains, but these learning gains were minimized when students were asked to undertake programming tasks without prior programming experience relevant to their discipline.\n\nThe intellectual merit of this study lies in our improved understanding of how asking students to move between multiple representations: conceptual, matematical and computational, taxes their capacity. By providing better preparat..."
 }
}