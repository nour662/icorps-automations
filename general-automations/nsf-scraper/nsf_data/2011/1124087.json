{
 "awd_id": "1124087",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EXP:  Enabling Pedagogical Communication Between Learning and Programming Environments",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Tatiana Korelsky",
 "awd_eff_date": "2011-09-01",
 "awd_exp_date": "2015-08-31",
 "tot_intn_awd_amt": 550000.0,
 "awd_amount": 550000.0,
 "awd_min_amd_letter_date": "2011-08-31",
 "awd_max_amd_letter_date": "2011-08-31",
 "awd_abstract_narration": "Continuing increases in computer power have led to significant advances in iteractive software-development environments (IDEs) that aim to help programmers plan, write, test, and fix programs efficiently. Learning management systems (LMSs), which make available learning resources and activities, have similarly evolved to support good pedagogical practice, such as collaborative work and embedded assessments, over the entire course of a discipline. This project is investigating practices for linking an LMS to an IDE in ways that will enable computer instructors to better support their students' learning. It is expected that this investigation, aimed at undergraduate and advanced high-school students, will result in better learning not only of computing concepts but of programming practices required for designing and implementing sophisticated software. Research and evaluation activities are aimed at investigating student learning and engagement and the ways that teachers change their practice in supporting students. The project findings, along with the tools and packaged curricular activities, are to be widely disseminated to technical and educational communities through professional meetings and online repositories. While the integrated software environment and guidelines about effective use for promoting learning will be broadly useful for computer science education, it is expected that this effort will also provide more general guidelines about integrating learning management systems with productivity-support systems in other domains and disciplines.\r\n\r\nNew curricular activities enabled by this integration, along with the increased support and feedback that students will receive from both instructors and classmates, are expected to provide valuable support to all students learning computing and software engineering but especially to students who are traditionally underrepresented in computing courses or who might otherwise drop out. Results of research will inform design of software systems that integrate learning-management systems with productivity-support systems to allow students across a variety of disciplines better gain insight into the big challenges of the disciplinary practice, better gain practice addressing those types of challenges, and better gain knowledge and skills needed to address those challenges.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Clancy",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michael Clancy",
   "pi_email_addr": "clancy@cs.berkeley.edu",
   "nsf_id": "000300343",
   "pi_start_date": "2011-08-31",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Berkeley",
  "inst_street_address": "1608 4TH ST STE 201",
  "inst_street_address_2": "",
  "inst_city_name": "BERKELEY",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "5106433891",
  "inst_zip_code": "947101749",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "CA12",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE",
  "org_prnt_uei_num": "",
  "org_uei_num": "GS3YEVSS12N6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Berkeley",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "947045940",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "CA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "744400",
   "pgm_ele_name": "NATIONAL SMETE DIGITAL LIBRARY"
  },
  {
   "pgm_ele_code": "802000",
   "pgm_ele_name": "Cyberlearn & Future Learn Tech"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8045",
   "pgm_ref_txt": "Cyberlearn & Future Learn Tech"
  },
  {
   "pgm_ref_code": "8841",
   "pgm_ref_txt": "Exploration Projects"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0411",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001112DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 550000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-57161193-a713-6128-436e-ffb1914bd4de\"> </span></p>\n<h2 dir=\"ltr\"><span>Project Outcomes Report</span></h2>\n<h3 dir=\"ltr\"><span>Intellectual merit</span></h3>\n<p dir=\"ltr\"><span>We now have prototype versions of several Eclipse tools:</span></p>\n<ul>\n<li>the feedback view, a JUnit-based continuous testing facility that&rsquo;s analogous to Eclipse&rsquo;s continuous compilation facility;</li>\n<li>the logger, which keeps track of keystroke, UI interactions, navigation, testing, and saving events;</li>\n<li>editor overlays, which allow instructors to constrain editable areas of source files in order to help students attend to only relevant portions of assignments and make fill-in-the-blank assessments with live source code;</li>\n<li>a gated collaboration, a collaborative activity that poses questions to the user and, after receiving an answer, displays the responses of his/her classmates.</li>\n</ul>\n<p dir=\"ltr\"><span>We know of no system that provides all these features.</span></p>\n<p dir=\"ltr\"><span>We also have curriculum segments, drawn from Java-based versions of CS 1 and CS 2, &nbsp;that use the tools. These included the following:</span></p>\n<ul>\n<li>(UC Berkeley) designing and testing Java methods that check an object for consistency</li>\n<li>(City College of San Francisco) introduction to recursion</li>\n<li>(UC Merced) testing and object-oriented programming (methods, inheritance)</li>\n</ul>\n<h3 dir=\"ltr\"><span>Broader impact</span></h3>\n<p dir=\"ltr\"><span>Our broader impact is twofold. First, our test populations at City College of San Francisco (a community college), U.C. Merced, and U.C. Berkeley span a wide variety of student preparation, representation in computer science, and risk for failure. More generally, the tools and curricula we aim to provide will increase feedback and opportunities for self-reflection for students, while making a wider amount of information available to instructors to use in communicating with students. We also expect that the increased amount and quality of fine-grained data that our tools and curriculum will make available will offer new insights for instructors, instructional designers, and educational researchers, opening up avenues of support to a wider range of learners.</span></p>\n<h3 dir=\"ltr\"><span>Outcomes</span></h3>\n<p dir=\"ltr\"><span>Our work has had two main goals: design and deployment of Eclipse-based education tools (plug-ins for the Eclipse IDE) for delivering and evaluating programming exercises, along with curriculum to use them effectively. We have assembled a number of prototype tools (in various states of functionality), listed below.</span></p>\n<p dir=\"ltr\"><em>feedback view</em></p>\n<p dir=\"ltr\"><span><span> </span></span><span>A continuous testing facility, similar in spirit to the continuous compilation that Eclipse and other IDEs perform. Instructors provide semantic and syntactic feedback based on JUnit tests, updated as students type. Next to provide is improvement of the user interface and the integration of more and better sources of feedback.</span></p>\n<p dir=\"ltr\"><em>a logger</em></p>\n<p dir=\"ltr\"><span><span> </span></span><span>The events we logged were all keystroke, mouse, UI interaction, navigation, testing, and saving events, with several additional methods to track additional user interactions. These include all keyboard interactions and semantically tagged interactions with our other tools and curriculum.</span></p>\n<p dir=\"ltr\"><em>github for content</em></p>\n<p dir=\"ltr\"><span><span> </span></span><span>All of the curricular content is now in a github repository. This automatically gives the authors versioning, sharing, and forking. Instead of requiring new server-side tools be written, we moved to a fully client-side model for multiple-choice questions and navigation</span><span>. Our current goal is to leave curriculum as easily customizable as possible...",
  "por_txt_cntn": "\n \nProject Outcomes Report\nIntellectual merit\nWe now have prototype versions of several Eclipse tools:\n\nthe feedback view, a JUnit-based continuous testing facility that\u00c6s analogous to Eclipse\u00c6s continuous compilation facility;\nthe logger, which keeps track of keystroke, UI interactions, navigation, testing, and saving events;\neditor overlays, which allow instructors to constrain editable areas of source files in order to help students attend to only relevant portions of assignments and make fill-in-the-blank assessments with live source code;\na gated collaboration, a collaborative activity that poses questions to the user and, after receiving an answer, displays the responses of his/her classmates.\n\nWe know of no system that provides all these features.\nWe also have curriculum segments, drawn from Java-based versions of CS 1 and CS 2,  that use the tools. These included the following:\n\n(UC Berkeley) designing and testing Java methods that check an object for consistency\n(City College of San Francisco) introduction to recursion\n(UC Merced) testing and object-oriented programming (methods, inheritance)\n\nBroader impact\nOur broader impact is twofold. First, our test populations at City College of San Francisco (a community college), U.C. Merced, and U.C. Berkeley span a wide variety of student preparation, representation in computer science, and risk for failure. More generally, the tools and curricula we aim to provide will increase feedback and opportunities for self-reflection for students, while making a wider amount of information available to instructors to use in communicating with students. We also expect that the increased amount and quality of fine-grained data that our tools and curriculum will make available will offer new insights for instructors, instructional designers, and educational researchers, opening up avenues of support to a wider range of learners.\nOutcomes\nOur work has had two main goals: design and deployment of Eclipse-based education tools (plug-ins for the Eclipse IDE) for delivering and evaluating programming exercises, along with curriculum to use them effectively. We have assembled a number of prototype tools (in various states of functionality), listed below.\nfeedback view\n A continuous testing facility, similar in spirit to the continuous compilation that Eclipse and other IDEs perform. Instructors provide semantic and syntactic feedback based on JUnit tests, updated as students type. Next to provide is improvement of the user interface and the integration of more and better sources of feedback.\na logger\n The events we logged were all keystroke, mouse, UI interaction, navigation, testing, and saving events, with several additional methods to track additional user interactions. These include all keyboard interactions and semantically tagged interactions with our other tools and curriculum.\ngithub for content\n All of the curricular content is now in a github repository. This automatically gives the authors versioning, sharing, and forking. Instead of requiring new server-side tools be written, we moved to a fully client-side model for multiple-choice questions and navigation. Our current goal is to leave curriculum as easily customizable as possible, and also enable queries for instructors and students of the form \"give me all the homework pages\" or \"give me self-tests that were difficult.\"\neditor overlays\n This tool is intended to allow boxes to be drawn over a Java source code editor window that constrain where the students can type. (See Figure 6.) Student interaction with a file can then be focused on the pedagogical task at hand. For instance, if a particular exercise is focused on the predicate portion of a conditional statement, a box around a buggy or missing predicate constrains students\u00c6 input to only that portion of the code while letting them use the editor and other famiiliar features (e.g., with continuous compilation and dynamic indicators of syntax errors, context sensitive help, et..."
 }
}