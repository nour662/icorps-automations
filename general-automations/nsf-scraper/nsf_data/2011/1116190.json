{
 "awd_id": "1116190",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Nested Distributed Software Transactional Memory: Protocols, Mechanisms, and Java Package",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2015-01-31",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 481600.0,
 "awd_min_amd_letter_date": "2011-08-01",
 "awd_max_amd_letter_date": "2013-05-31",
 "awd_abstract_narration": "In this project, protocols, mechanisms, and a Java implementation of \r\nnested distributed transactional memory (TM) are developed. Distributed TM promises \r\nto alleviate the programmability, scalability, and performance challenges of lock-based \r\ndistributed concurrency control. Emerging distributed TM implementations export \r\na simple programming interface that precludes locks and are yielding performance \r\ncomparable to, or better than lock-based distributed concurrency control. Nesting is \r\nessential to distributed TM for composability, functionality, fault-management, and \r\nperformance. \r\n\r\nThe project is developing protocols and mechanisms to support closed and open \r\nnesting in distributed TM. Closed nesting allows a nested transaction to be aborted \r\nwithout aborting the parent transaction, but not vice versa. Open nesting allows a \r\nparent transaction to be aborted without aborting the nested transaction, and vice \r\nversa, permitting greater concurrency. To support these nesting models, the project \r\nis developing distributed transactional conflict resolution protocols, distributed \r\ncache coherence protocols, and mechanisms for transparently executing \r\ncompensating transactions to undo the effects of committed transactions. The \r\nproject is implementing these techniques in the open-source, HyFlow distributed \r\nTM Java package (hyflow.org). \r\n\r\nThe project is also transitioning this technology (techniques and HyFlow \r\nimplementation) to US Navy's Aegis Combat System, which uses distributed \r\nconcurrency control. Additionally, the project's results are being incorporated into \r\nadvanced graduate courses at Virginia Tech that includes students at Blacksburg, \r\nVA, scientists and engineers at US Naval Surface Warfare Center Dahlgren Division \r\n(NSWCDD), VA (through Virginia Tech's graduate outreach program at NSWCDD), \r\nand students in the Middle East and North Africa through Virginia Tech's VT-MENA \r\nprogram at Egypt.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Binoy",
   "pi_last_name": "Ravindran",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Binoy Ravindran",
   "pi_email_addr": "binoy@vt.edu",
   "nsf_id": "000201874",
   "pi_start_date": "2011-08-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Virginia Polytechnic Institute and State University",
  "inst_street_address": "300 TURNER ST NW",
  "inst_street_address_2": "STE 4200",
  "inst_city_name": "BLACKSBURG",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "5402315281",
  "inst_zip_code": "240603359",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "VA09",
  "org_lgl_bus_name": "VIRGINIA POLYTECHNIC INSTITUTE & STATE UNIVERSITY",
  "org_prnt_uei_num": "X6KEFGLHSJX7",
  "org_uei_num": "QDE5UHE5XD16"
 },
 "perf_inst": {
  "perf_inst_name": "Virginia Polytechnic Institute and State University",
  "perf_str_addr": "300 TURNER ST NW",
  "perf_city_name": "BLACKSBURG",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "240603359",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "VA09",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 450000.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 15600.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<p>Nesting is a technique for managing the execution of a transaction that is activated within the context of other transactions. This project focuses on exploiting nesting in distributed systems, where multiple nodes (or processes) interconnected through network links cooperate to atomically execute distributed transactions.</p>\n<p>&nbsp;</p>\n<p>The project's research results confirm that employing distributed nested transactions have a direct and significant impact on several aspects of transactional processing. In addition to guaranteeing code composability, functionality, and fault-management, the results show that nesting can improve the performance of distributed transactions.</p>\n<p>&nbsp;</p>\n<p>The project extensively investigated two nesting techniques: closed nesting and open nesting. In the closed nesting space, the project&rsquo;s most innovative accomplishment is a technique that makes closed-nesting completely transparent to programmers through an automatic nesting framework. This way, programmers can benefit from a fast partial rollback mechanism without the burden of decomposing transactions into closed-nested transactions. In addition, such an automatic nesting framework maximizes the effectiveness of the compositions of nested transactions according to the workload at hand.</p>\n<p>&nbsp;</p>\n<p>The project's results showed that open nesting is an effective solution for mitigating the potential performance degradation due to false conflicts in distributed data structures (those that place data structure items on multiple nodes) by releasing read and non-modified objects early in the execution. The process of releasing accessed objects is costly when done by globally committing a part of the transaction (as is the case with open nesting). The project developed a speculative commit scheme for overlapping the transaction's execution with the commit phase of an open-nested transaction, which alleviates the overhead of open nesting.</p>\n<p>&nbsp;</p>\n<p>All of the project&rsquo;s distributed concurrency control protocols have been implemented and integrated into the HyFlow distributed transactional memory (DTM) middleware software. HyFlow is a software framework for DTM, written in Java, with pluggable support for policies for directory lookup, transactional synchronization and recovery (e.g., nested concurrency control protocols), contention management, and cache coherence. To cope with different programming models and challenges, HyFlow was extended for the Scala (HyFlow2), C++ (HyflowCPP), and Go (Hyflow-go) programming languages. HyFlow exports a distributed programming model that excludes the usage of locks: a programmer can define atomic sections as transactions, in which reads and writes to shared, local and remote objects appear to take effect instantaneously. No changes are needed to the underlying virtual machine or compiler. HyFlow is freely available as open-source software at: <a title=\"The HyFlow DTM Software\" href=\"http://hyflow.org\" target=\"_blank\">http://hyflow.org</a>.</p>\n<p>&nbsp;</p>\n<p>The open and closed nesting techniques developed in the project have also been transitioned into Red Hat&rsquo;s Infinispan (<a href=\"http://infinispan.org/\">http://infinispan.org/</a>), a production-level, open-source distributed transactional system infrastructure. Infinispan is a distributed in-memory key-value repository with transactional capabilities. The integration of the project's results with Infinispan increases the potential impact of the project&rsquo;s nesting techniques, given Infinispan&rsquo;s large user base. The project's techniques and the HyFlow DTM middleware framework have also been transitioned to US Naval Surface Warfare Center Dahlgren Division (NSWCDD) for production use.</p>\n<p>&nbsp;</p>\n<p>The project has contributed to the scientific training of one postdoctoral scholar, four PhD students, one MS student, an...",
  "por_txt_cntn": "\n \n\nNesting is a technique for managing the execution of a transaction that is activated within the context of other transactions. This project focuses on exploiting nesting in distributed systems, where multiple nodes (or processes) interconnected through network links cooperate to atomically execute distributed transactions.\n\n \n\nThe project's research results confirm that employing distributed nested transactions have a direct and significant impact on several aspects of transactional processing. In addition to guaranteeing code composability, functionality, and fault-management, the results show that nesting can improve the performance of distributed transactions.\n\n \n\nThe project extensively investigated two nesting techniques: closed nesting and open nesting. In the closed nesting space, the project\u00c6s most innovative accomplishment is a technique that makes closed-nesting completely transparent to programmers through an automatic nesting framework. This way, programmers can benefit from a fast partial rollback mechanism without the burden of decomposing transactions into closed-nested transactions. In addition, such an automatic nesting framework maximizes the effectiveness of the compositions of nested transactions according to the workload at hand.\n\n \n\nThe project's results showed that open nesting is an effective solution for mitigating the potential performance degradation due to false conflicts in distributed data structures (those that place data structure items on multiple nodes) by releasing read and non-modified objects early in the execution. The process of releasing accessed objects is costly when done by globally committing a part of the transaction (as is the case with open nesting). The project developed a speculative commit scheme for overlapping the transaction's execution with the commit phase of an open-nested transaction, which alleviates the overhead of open nesting.\n\n \n\nAll of the project\u00c6s distributed concurrency control protocols have been implemented and integrated into the HyFlow distributed transactional memory (DTM) middleware software. HyFlow is a software framework for DTM, written in Java, with pluggable support for policies for directory lookup, transactional synchronization and recovery (e.g., nested concurrency control protocols), contention management, and cache coherence. To cope with different programming models and challenges, HyFlow was extended for the Scala (HyFlow2), C++ (HyflowCPP), and Go (Hyflow-go) programming languages. HyFlow exports a distributed programming model that excludes the usage of locks: a programmer can define atomic sections as transactions, in which reads and writes to shared, local and remote objects appear to take effect instantaneously. No changes are needed to the underlying virtual machine or compiler. HyFlow is freely available as open-source software at: http://hyflow.org.\n\n \n\nThe open and closed nesting techniques developed in the project have also been transitioned into Red Hat\u00c6s Infinispan (http://infinispan.org/), a production-level, open-source distributed transactional system infrastructure. Infinispan is a distributed in-memory key-value repository with transactional capabilities. The integration of the project's results with Infinispan increases the potential impact of the project\u00c6s nesting techniques, given Infinispan\u00c6s large user base. The project's techniques and the HyFlow DTM middleware framework have also been transitioned to US Naval Surface Warfare Center Dahlgren Division (NSWCDD) for production use.\n\n \n\nThe project has contributed to the scientific training of one postdoctoral scholar, four PhD students, one MS student, and two undergraduate students. Additionally, the project has contributed to the development and enhancement of research and teaching skills of two PhD students from the Middle East and North Africa region, as part of Virginia Tech\u00c6s VT-MENA program.\n\n \n\nTo summarize, the project\u00c6s research results conclusively demonstrate..."
 }
}