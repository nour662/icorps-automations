{
 "awd_id": "1117960",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CCF:  Small:  A Programming Environment for High Performance Computing Based on Practical Program Transformation",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2014-07-31",
 "tot_intn_awd_amt": 495259.0,
 "awd_amount": 495259.0,
 "awd_min_amd_letter_date": "2011-06-24",
 "awd_max_amd_letter_date": "2011-06-24",
 "awd_abstract_narration": "Successful software systems continue to change. Most programmers work on projects that they did not start, and most companies spend more on maintaining old systems than on building new ones. This goal of this research is to make programs easier to change by developing better software tools and by studying how programmers change software.    The project is extending Photran, an open-source programming environment for FORTRAN, so that it better supports the way FORTRAN programmers change their software to make them run on next-generation supercomputers. The new version of Photran will have the potential to make it much less expensive to port high-performance software, and the ideas have the potential to reduce the cost of software development in general.\r\n\r\nThe new system will record each change that a programmer makes and will represent these changes at a high-level, i.e. not just as textual changes, but as more meaningful units of changes, such as refactoring or optimizations.  It will let programmers modify these changes after the fact, making it possible to change the portable version of a program and then replay the hand-crafted optimizations.  Programmers can port a program to a new architecture by starting with a portable version and then choosing optimizations that were useful for similar machines, or that were discovered by an auto-tuner, or that were invented as needed.  They will be able to think of a program as a sequence of program transformations, and to generate a new program by reusing sub-sequences from other programs. Thus, a sequence of changes will be just as valid a representation of a program as a set of modules",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ralph",
   "pi_last_name": "Johnson",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Ralph E Johnson",
   "pi_email_addr": "johnson@cs.uiuc.edu",
   "nsf_id": "000436385",
   "pi_start_date": "2011-06-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Illinois at Urbana-Champaign",
  "inst_street_address": "506 S WRIGHT ST",
  "inst_street_address_2": "",
  "inst_city_name": "URBANA",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "2173332187",
  "inst_zip_code": "618013620",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "IL13",
  "org_lgl_bus_name": "UNIVERSITY OF ILLINOIS",
  "org_prnt_uei_num": "V2PHZ2CSCH63",
  "org_uei_num": "Y8CWNJRCNN91"
 },
 "perf_inst": {
  "perf_inst_name": "University of Illinois at Urbana-Champaign",
  "perf_str_addr": "506 S WRIGHT ST",
  "perf_city_name": "URBANA",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "618013620",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "IL13",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 495259.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\">Programs are usually thought of as a document or a collection of documents. &nbsp; But a program can also be thought of as a sequence of changes starting with an original, possibly empty, program. &nbsp;This is an important point of view since more programmers work at changing existing programs than are making new ones.</p>\n<p class=\"p1\">One problem with thinking of a program as a sequence of changes is deciding on the level of detail of a change.&nbsp; Some changes are high-level, such as&nbsp; \"add a feature\" or \"fix a bug\".&nbsp; But others are low-level, such as changing some characters.&nbsp; High-level changes can be represented as a series of low-level changes, but the converse is not always true.&nbsp; We need a way of representing change that allows both low-level changes and high-level changes, and makes it easy to convert between them.</p>\n<p class=\"p1\">To represent program changes at multiple levels, we built an Eclipse plugin called CodingTracker.&nbsp; The lowest level is a series of text edits, i.e. character changes. &nbsp; The second level is a series of changes to the abstract syntax, i.e. the logical program structure. &nbsp; The third level is high-level changes, mostly of a class of program transformations called \"refactorings\".&nbsp; Eclipse has built-in tools for automatically performing refactorings.&nbsp; CodingTracker records these automatic refactorings, and can also detect when some low-level changes could have been performed by one of the refactoring tools. &nbsp;</p>\n<p class=\"p1\">We used CodingTracker to study the changes made by a few dozen programmers, comparing the refactorings they performed using the built-in tools to the ones they could have performed with the tools but instead performed by editing text.&nbsp; They used the tools for a little less than half of them.&nbsp; We interviewed some of the programmers to try to learn why they avoided the tools. &nbsp;They thought the tools were complex and hard to use. The tools had lots of options, and programmers couldn't remember (or never got around to learning) all the options. &nbsp;Because the tools were complex, programmers were not sure what they would do.&nbsp;</p>\n<p class=\"p1\">One way to make these tools easier to use is to provide parameters using direct manipulation, i.e. drag and drop. &nbsp; This works primarily for program transformations based on moving code. &nbsp; For example, to indicate that a part of a program should be split into pieces, a programmer could select one piece and drag it outside the part of the program that contains it. &nbsp; We developed a plugin DNDRefactor that changes the Eclipse refactoring tools for Java to use drag and drop.</p>\n<p class=\"p1\">Another way to simplify these tools is to replace options with defaults.&nbsp; A program transformation will usually have parameters or choices that have to be made, and often a programmer has to fill in a large dialog box finish a program transformation.&nbsp; The tool seems easier to use if most of the options are replaced by defaults.&nbsp; Instead of setting an option before performing a refactoring, a programmer will perform another program transformation afterwards to change the default.&nbsp; This replaces a single complex transformation by several smaller ones. &nbsp; We call this way of designing a tool \"compositional\" because the programmers compose several transformations to cause the same effect.&nbsp; We changed some of the Eclipse tools to be more compositional, and did some experiments to confirm that these changes improved usability.</p>\n<p class=\"p1\">Some program transformations are complex because the tool designers were trying to make them as automated as possible.&nbsp; They can be simpler if they are less automated and rely on programmers to compose transformations. &nbsp; A good example is type inference. &nbsp; Most programming languages require each variable to have it...",
  "por_txt_cntn": "Programs are usually thought of as a document or a collection of documents.   But a program can also be thought of as a sequence of changes starting with an original, possibly empty, program.  This is an important point of view since more programmers work at changing existing programs than are making new ones.\nOne problem with thinking of a program as a sequence of changes is deciding on the level of detail of a change.  Some changes are high-level, such as  \"add a feature\" or \"fix a bug\".  But others are low-level, such as changing some characters.  High-level changes can be represented as a series of low-level changes, but the converse is not always true.  We need a way of representing change that allows both low-level changes and high-level changes, and makes it easy to convert between them.\nTo represent program changes at multiple levels, we built an Eclipse plugin called CodingTracker.  The lowest level is a series of text edits, i.e. character changes.   The second level is a series of changes to the abstract syntax, i.e. the logical program structure.   The third level is high-level changes, mostly of a class of program transformations called \"refactorings\".  Eclipse has built-in tools for automatically performing refactorings.  CodingTracker records these automatic refactorings, and can also detect when some low-level changes could have been performed by one of the refactoring tools.  \nWe used CodingTracker to study the changes made by a few dozen programmers, comparing the refactorings they performed using the built-in tools to the ones they could have performed with the tools but instead performed by editing text.  They used the tools for a little less than half of them.  We interviewed some of the programmers to try to learn why they avoided the tools.  They thought the tools were complex and hard to use. The tools had lots of options, and programmers couldn't remember (or never got around to learning) all the options.  Because the tools were complex, programmers were not sure what they would do. \nOne way to make these tools easier to use is to provide parameters using direct manipulation, i.e. drag and drop.   This works primarily for program transformations based on moving code.   For example, to indicate that a part of a program should be split into pieces, a programmer could select one piece and drag it outside the part of the program that contains it.   We developed a plugin DNDRefactor that changes the Eclipse refactoring tools for Java to use drag and drop.\nAnother way to simplify these tools is to replace options with defaults.  A program transformation will usually have parameters or choices that have to be made, and often a programmer has to fill in a large dialog box finish a program transformation.  The tool seems easier to use if most of the options are replaced by defaults.  Instead of setting an option before performing a refactoring, a programmer will perform another program transformation afterwards to change the default.  This replaces a single complex transformation by several smaller ones.   We call this way of designing a tool \"compositional\" because the programmers compose several transformations to cause the same effect.  We changed some of the Eclipse tools to be more compositional, and did some experiments to confirm that these changes improved usability.\nSome program transformations are complex because the tool designers were trying to make them as automated as possible.  They can be simpler if they are less automated and rely on programmers to compose transformations.   A good example is type inference.   Most programming languages require each variable to have its type declared.   Some do not require type declarations for variables.  A few do not require type declarations, but the system can calculate types for each variable.   This is called \"type inference\".\nCascade is a tool that solves the type inference problem by having a programmer compose transformations, instead of by complete au..."
 }
}