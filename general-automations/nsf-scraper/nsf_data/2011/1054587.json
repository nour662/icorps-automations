{
 "awd_id": "1054587",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Looking Glass: Leveraging Mentor Interactions to Create Personalized Programming Help for Independent Learners",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "William Bainbridge",
 "awd_eff_date": "2011-02-01",
 "awd_exp_date": "2017-01-31",
 "tot_intn_awd_amt": 499977.0,
 "awd_amount": 561777.0,
 "awd_min_amd_letter_date": "2011-01-25",
 "awd_max_amd_letter_date": "2015-04-07",
 "awd_abstract_narration": "This project will amplify the efforts of computer scientists who do outreach to middle school students  by capturing mentor-mentee interactions and using this captured content to create a virtual mentoring system to support independent learners (children without access to computer science experts) within the Looking Glass programming environment. Looking Glass is a novice programming environment that presents programming as a means to the motivating end of creating 3D animated stories. In the system to be developed, mentors will do three things: First, a mentor watches the story-programs his or her mentee created and writes a code suggestion: new or revised functionality that will help to improve the mentees' programs. Next, the mentor edits a draft tutorial that Looking Glass has automatically generated from the mentor's code suggestion. Looking Glass then sends this edited tutorial to the mentee. Finally, the mentor writes rules that help Looking Glass identify contexts in which that code suggestion could be helpful. Looking Glass will use the mentor-contributed code suggestions, personalized tutorials, and rules to provide virtual mentoring for independent learners. Specifically, this project will explore three hypotheses: \r\n\r\nHypothesis One: The approach of capturing and evaluating mentor-created learning materials will enable the creation of a virtual mentoring system to support independent learners. \r\n\r\nHypothesis Two: Independent learners who are presented with in-context code suggestions that both further their stories and introduce new programming concepts will develop greater programming skills than those without access to these suggestions. \r\n\r\nHypothesis Three: Independent learners who are presented with personalized tutorials based on their experience level with each topic presented will perform better than independent learners who are presented with a single level of scaffolding. \r\n\r\nThe National Academy of Engineering lists personalized learning as one of the grand challenges for engineering in this century. This project will develop and evaluate the impact of two techniques for personalizing learning: program-specific code suggestions and personalized, multi-level tutorials. The majority of research into educational environments has focused on formal educational settings, but Looking Glass will advance research in how to effectively support independent learning in open-ended software environments.  The enhancement to Looking Glass will provide an environment for exploring computer programming and learning support through virtual mentoring to middle school children without access to computer science learning opportunities.  The project's educational plan uses biographies of computer scientists integrated into Looking Glass and a research blog to help middle school children develop an accurate image of computer science.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Caitlin",
   "pi_last_name": "Kelleher",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Caitlin Kelleher",
   "pi_email_addr": "ckelleher@cse.wustl.edu",
   "nsf_id": "000240794",
   "pi_start_date": "2011-01-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Washington University",
  "inst_street_address": "1 BROOKINGS DR",
  "inst_street_address_2": "",
  "inst_city_name": "SAINT LOUIS",
  "inst_state_code": "MO",
  "inst_state_name": "Missouri",
  "inst_phone_num": "3147474134",
  "inst_zip_code": "631304862",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "MO01",
  "org_lgl_bus_name": "WASHINGTON UNIVERSITY, THE",
  "org_prnt_uei_num": "",
  "org_uei_num": "L6NFUM28LQM5"
 },
 "perf_inst": {
  "perf_inst_name": "Washington University",
  "perf_str_addr": "1 BROOKINGS DR",
  "perf_city_name": "SAINT LOUIS",
  "perf_st_code": "MO",
  "perf_st_name": "Missouri",
  "perf_zip_code": "631304862",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "MO01",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736700",
   "pgm_ele_name": "HCC-Human-Centered Computing"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "1187",
   "pgm_ref_txt": "PECASE- eligible"
  },
  {
   "pgm_ref_code": "7367",
   "pgm_ref_txt": "Cyber-Human Systems"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 134370.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 135957.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 114929.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 76967.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 99554.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"MsoNormal\">Supporting young people in learning computer science is of large and increasing importance. Existing work suggests that enabling learners to focus on personally relevant projects can support interest in computing. However, supporting learners in totally open-ended contexts can be a challenge, both in formal and informal settings. This project has contributed two new kinds of supports for youth programming environments: code puzzles and suggestions.</p>\n<p class=\"MsoNormal\">&nbsp;Code puzzles reduce the need for learners to focus on interface mechanics while learning how to combine programming statements and constructs to solve problems. Essentially, a code puzzle consists of a set of statements and constructs that can be assembled to create a target animation. Learners then need to figure out how to reconstruct the original program. As the learner&rsquo;s program runs, the interface provides correctness feedback designed to help users focus on where errors are occurring without enabling them to easily game the system. We have done a variety of studies around code puzzles. Some important results include:</p>\n<p class=\"MsoNormal\">1) Learners who use code puzzles learn 23% more efficiently than learners who use equivalent tutorials and perform 26% better on a novel related problem.</p>\n<p class=\"MsoNormal\">2) When puzzles include carefully designed unnecessary statements, distractors, learning efficiency decreases by 14%, cognitive load increases, and learners are 26% less successful at completing puzzles. In initial learning settings, this provides experimental evidence that distractor statements are more harmful than helpful.</p>\n<p class=\"MsoNormal\">3) A qualitative study exploring how youth perceive value in code puzzles and tutorials found that decisions around help resources often include a variety of factors including interest in particular content and expectations of difficulty. Overall, learners felt that completing tutorials was easier than completing puzzles, but that puzzles are more motivating. However, &nbsp;we found that learners prioritized content interest over format interest; some chose to use tutorials in order to access content they thought might be too hard otherwise.</p>\n<p class=\"MsoNormal\">This work contributes important knowledge to how to design effective code puzzles as well as how to create contexts that support youth in pursuing their own goals within programming environments.</p>\n<p class=\"MsoNormal\">&nbsp;</p>\n<p class=\"MsoNormal\">Our code suggestions framework enables a programming environment to identify potentially valuable code examples to suggest to youth programmers by analyzing their current code. Essentially, as learners work, the programming environment looks for opportunities to suggest new skills behind the scenes. The suggestions are offered in two ways through the interface: 1) through light bulb icons added to specific lines of (related) code and 2) via a tips area within the interface that archives all of the suggestions that have been offered. The tips area briefly describes each suggestion, contextualized within the learner&rsquo;s program. So, if they have an alien character a tip say &ldquo;teach alien to dance.&rdquo; When a suggestion is opened, either via the light bulb icon or the tips area, users are shown a pair of contrasting, executable examples. The use of contrasting examples helps users to zero in on the important aspects of each one.</p>\n<p class=\"MsoNormal\" style=\"margin-bottom: .0001pt; line-height: normal;\">The Example Guru shows significant promise in supporting children as they learn to program, while working on self-selected projects. Twice as many participants accessed Example Guru suggestions as compared to documentation. Those participants then used more than twice as many new API methods after accessing suggestions than documentation.<span style=\"font-size: 12.5pt; font-family: &quot;Arial&quot;,sans-serif; mso-fareast-font-family: &quot;Times New Roman&quot;;\"></span></p>\n<p class=\"MsoNormal\" style=\"margin-bottom: .0001pt; line-height: normal;\"><span style=\"font-size: 12.5pt; font-family: &quot;Arial&quot;,sans-serif; mso-fareast-font-family: &quot;Times New Roman&quot;;\">&nbsp;</span></p>\n<p class=\"MsoNormal\">A longer term study, now in review, looked at the use of suggestions, documentation, tutorials, and puzzles in two weeks of open ended use. We found that suggestions were accessed by more than twice as many participants as other forms of help and that participants were more successful in applying skills learned through suggestions than other forms of help. Qualitative survey data suggests that participants strongly preferred lightweight, in-context help that enabled them to continue working towards their own goals, while also supporting them in developing new skills.</p>\n<p>&nbsp;</p>\n<p class=\"MsoNormal\">Current programming environments for youth generally do not include in-content, lightweight help like suggestions. However, our results suggest that these forms of help may be more effective than others, particularly tutorials and puzzles that require learners to stop working on a current project in order to go learn a new skill.&nbsp;</p>\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;\"><span style=\"font-size: 11.0pt; line-height: 107%; font-family: &quot;Calibri&quot;,sans-serif; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: Calibri; mso-fareast-theme-font: minor-latin; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: &quot;Times New Roman&quot;; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA;\">The suggestions are offered in two ways through the interface: 1) through light bulb icons added to specific lines of (related) code and 2) via a tips area within the interface that archives all of the suggestions that have been offered. The tips area briefly describes each suggestion, contextualized within the learner&rsquo;s program. So, if they have an alien character a tip say &ldquo;teach alien to dance.&rdquo; When a suggestion is opened, either via the light bulb icon or the tips area, users are shown a pair of contrasting, executable examples. The use of contrasting examples helps users to zero in on the important aspects of each one.</span></div><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/05/2017<br>\n\t\t\t\t\tModified by: Caitlin&nbsp;Kelleher</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "Supporting young people in learning computer science is of large and increasing importance. Existing work suggests that enabling learners to focus on personally relevant projects can support interest in computing. However, supporting learners in totally open-ended contexts can be a challenge, both in formal and informal settings. This project has contributed two new kinds of supports for youth programming environments: code puzzles and suggestions.\n Code puzzles reduce the need for learners to focus on interface mechanics while learning how to combine programming statements and constructs to solve problems. Essentially, a code puzzle consists of a set of statements and constructs that can be assembled to create a target animation. Learners then need to figure out how to reconstruct the original program. As the learner?s program runs, the interface provides correctness feedback designed to help users focus on where errors are occurring without enabling them to easily game the system. We have done a variety of studies around code puzzles. Some important results include:\n1) Learners who use code puzzles learn 23% more efficiently than learners who use equivalent tutorials and perform 26% better on a novel related problem.\n2) When puzzles include carefully designed unnecessary statements, distractors, learning efficiency decreases by 14%, cognitive load increases, and learners are 26% less successful at completing puzzles. In initial learning settings, this provides experimental evidence that distractor statements are more harmful than helpful.\n3) A qualitative study exploring how youth perceive value in code puzzles and tutorials found that decisions around help resources often include a variety of factors including interest in particular content and expectations of difficulty. Overall, learners felt that completing tutorials was easier than completing puzzles, but that puzzles are more motivating. However,  we found that learners prioritized content interest over format interest; some chose to use tutorials in order to access content they thought might be too hard otherwise.\nThis work contributes important knowledge to how to design effective code puzzles as well as how to create contexts that support youth in pursuing their own goals within programming environments.\n \nOur code suggestions framework enables a programming environment to identify potentially valuable code examples to suggest to youth programmers by analyzing their current code. Essentially, as learners work, the programming environment looks for opportunities to suggest new skills behind the scenes. The suggestions are offered in two ways through the interface: 1) through light bulb icons added to specific lines of (related) code and 2) via a tips area within the interface that archives all of the suggestions that have been offered. The tips area briefly describes each suggestion, contextualized within the learner?s program. So, if they have an alien character a tip say \"teach alien to dance.\" When a suggestion is opened, either via the light bulb icon or the tips area, users are shown a pair of contrasting, executable examples. The use of contrasting examples helps users to zero in on the important aspects of each one.\nThe Example Guru shows significant promise in supporting children as they learn to program, while working on self-selected projects. Twice as many participants accessed Example Guru suggestions as compared to documentation. Those participants then used more than twice as many new API methods after accessing suggestions than documentation.\n \nA longer term study, now in review, looked at the use of suggestions, documentation, tutorials, and puzzles in two weeks of open ended use. We found that suggestions were accessed by more than twice as many participants as other forms of help and that participants were more successful in applying skills learned through suggestions than other forms of help. Qualitative survey data suggests that participants strongly preferred lightweight, in-context help that enabled them to continue working towards their own goals, while also supporting them in developing new skills.\n\n \nCurrent programming environments for youth generally do not include in-content, lightweight help like suggestions. However, our results suggest that these forms of help may be more effective than others, particularly tutorials and puzzles that require learners to stop working on a current project in order to go learn a new skill. \nThe suggestions are offered in two ways through the interface: 1) through light bulb icons added to specific lines of (related) code and 2) via a tips area within the interface that archives all of the suggestions that have been offered. The tips area briefly describes each suggestion, contextualized within the learner?s program. So, if they have an alien character a tip say \"teach alien to dance.\" When a suggestion is opened, either via the light bulb icon or the tips area, users are shown a pair of contrasting, executable examples. The use of contrasting examples helps users to zero in on the important aspects of each one.\n\n\t\t\t\t\tLast Modified: 05/05/2017\n\n\t\t\t\t\tSubmitted by: Caitlin Kelleher"
 }
}