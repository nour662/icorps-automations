{
 "awd_id": "1053862",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Cooperative Virtual Machines: Mechanisms and Policies for Application-Aware Runtime Services",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2011-07-01",
 "awd_exp_date": "2018-06-30",
 "tot_intn_awd_amt": 444218.0,
 "awd_amount": 444218.0,
 "awd_min_amd_letter_date": "2010-12-10",
 "awd_max_amd_letter_date": "2017-07-10",
 "awd_abstract_narration": "Modern managed programming languages, from Java and C# to Javascript  and Ruby, provide a compelling set of software engineering advantages over traditional languages like C and C++.  Unfortunately, the continue to suffer from a range of well-documented performance problems.  Their inefficient use of memory, in particular, imposes a significant penalty, with debilitating consequences for the quality and capacity of critical server software built in these languages. In spite of intensive research and development, these problems have remained stubbornly unsolved.  As a result programmers face a difficult dilemma: choose a safe and secure managed language, but take a major performance hit, or continue taking their chances with C and C++.\r\n\r\nThis project explores a new approach, called cooperative virtual machines, which attacks the problem by improving communication and cooperation between the programmer and the managed language runtime system (the virtual machine). The key idea is that with extra information, virtual machines can provide much more efficient services because they are customized to each application's needs. The project involves building new tools for exploring and quantifying memory performance, designing a configurable garbage collector for large server applications, and developing techniques to give programmers\r\nmore control over the low-level representation and management of data structures. Significant improvements in memory utilization and performance will allow existing computing infrastructure (hardware and software) to deliver higher quality services to more users. A crucial component of this project is improved pedagogical tools and techniques to help new programmers reason about the performance of these complex systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Samuel",
   "pi_last_name": "Guyer",
   "pi_mid_init": "Z",
   "pi_sufx_name": "",
   "pi_full_name": "Samuel Z Guyer",
   "pi_email_addr": "sguyer@cs.tufts.edu",
   "nsf_id": "000091427",
   "pi_start_date": "2010-12-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Tufts University",
  "inst_street_address": "80 GEORGE ST",
  "inst_street_address_2": "",
  "inst_city_name": "MEDFORD",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6176273696",
  "inst_zip_code": "021555519",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "MA05",
  "org_lgl_bus_name": "TRUSTEES OF TUFTS COLLEGE",
  "org_prnt_uei_num": "WL9FLBRVPJJ7",
  "org_uei_num": "WL9FLBRVPJJ7"
 },
 "perf_inst": {
  "perf_inst_name": "Tufts University",
  "perf_str_addr": "80 GEORGE ST",
  "perf_city_name": "MEDFORD",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021555519",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "MA05",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "1187",
   "pgm_ref_txt": "PECASE- eligible"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9218",
   "pgm_ref_txt": "BASIC RESEARCH & HUMAN RESORCS"
  },
  {
   "pgm_ref_code": "HPCC",
   "pgm_ref_txt": "HIGH PERFORMANCE COMPUTING & COMM"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 67397.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 63311.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 104059.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 109237.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 100214.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The focus of this research project was to investigate new techniques for improving the performance and robustness of a particular software component that is at the center of many server systems and plays a vital role in our computing infrastructure. The Java Virtual Machine is responsible for running all programs written in the Java programming language, which is used to implement a wide variety of web services, data analytics applications, and back-end business logic. The appeal of Java is that it provides some measure of safety and security, but these benefits come at a cost: Java systems struggle to use memory as efficiently as their predecessors written in older languages, such as C/C++.&nbsp;</p>\n<p><br />The primary outcomes of this project are (a) a new tool for analyzing the memory usage of Java programs at an unprecedented level of detail, allowing a number of research groups, besides our own, to understand the problem more deeply; (b) a detailed analysis of memory behavior for a set of standard Java benchmark programs; (c) a family of new memory management algorithms that can be tailored to the specific needs of each application; and (d) a new approach to limiting memory use in high-demand applications, trading catastrophic failure for graceful degradation.&nbsp;</p>\n<p><br />The broader impacts of the project include software that is freely available for other researchers and practitioners interested in these problems. Our hope is that these techniques will be adopted by industry, resulting in a more robust computing infrastructure.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/27/2018<br>\n\t\t\t\t\tModified by: Samuel&nbsp;Z&nbsp;Guyer</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe focus of this research project was to investigate new techniques for improving the performance and robustness of a particular software component that is at the center of many server systems and plays a vital role in our computing infrastructure. The Java Virtual Machine is responsible for running all programs written in the Java programming language, which is used to implement a wide variety of web services, data analytics applications, and back-end business logic. The appeal of Java is that it provides some measure of safety and security, but these benefits come at a cost: Java systems struggle to use memory as efficiently as their predecessors written in older languages, such as C/C++. \n\n\nThe primary outcomes of this project are (a) a new tool for analyzing the memory usage of Java programs at an unprecedented level of detail, allowing a number of research groups, besides our own, to understand the problem more deeply; (b) a detailed analysis of memory behavior for a set of standard Java benchmark programs; (c) a family of new memory management algorithms that can be tailored to the specific needs of each application; and (d) a new approach to limiting memory use in high-demand applications, trading catastrophic failure for graceful degradation. \n\n\nThe broader impacts of the project include software that is freely available for other researchers and practitioners interested in these problems. Our hope is that these techniques will be adopted by industry, resulting in a more robust computing infrastructure.\n\n \n\n\t\t\t\t\tLast Modified: 11/27/2018\n\n\t\t\t\t\tSubmitted by: Samuel Z Guyer"
 }
}