{
 "awd_id": "1115367",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Commodity Processors with Mainframe Reliability",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Tao Li",
 "awd_eff_date": "2011-07-01",
 "awd_exp_date": "2015-06-30",
 "tot_intn_awd_amt": 420000.0,
 "awd_amount": 420000.0,
 "awd_min_amd_letter_date": "2011-06-10",
 "awd_max_amd_letter_date": "2011-06-10",
 "awd_abstract_narration": "The goal of this project is to create multicore computer processors\r\nwith near-mainframe reliability at commodity costs, where the primary\r\ncosts are additional hardware and additional power consumption. Should\r\nthis project achieve these goals, it would transform computing.\r\nReliable processors would no longer be a niche product; instead, they\r\nwould be the commodity products used in desktops, laptops,\r\nsmartphones, etc.\r\n\r\nThe research thrusts in this project include error detection, error\r\nrecovery, diagnosis of permanent faults, and self-repair for\r\ntolerating permanent faults.  The end result of this project will be a\r\nhardware prototype of a low-cost, reliable multicore processor.\r\nBuilding an artifact is a vital part of this project for two\r\nreasons. First, a primary project goal is to keep power and area costs\r\nlow, and these costs cannot be accurately determined using high-level\r\nsimulation. Second, to transfer this technology to industry and\r\ntransform the industry, the chip makers must be convinced that the\r\nsolutions are viable.  Chip makers have historically been\r\nhesitant to accept ideas that have not been built, not least because\r\nimportant issues can be hidden in a high-level simulator.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Daniel",
   "pi_last_name": "Sorin",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Daniel Sorin",
   "pi_email_addr": "sorin@ee.duke.edu",
   "nsf_id": "000280417",
   "pi_start_date": "2011-06-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Duke University",
  "inst_street_address": "2200 W MAIN ST",
  "inst_street_address_2": "",
  "inst_city_name": "DURHAM",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9196843030",
  "inst_zip_code": "277054640",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "NC04",
  "org_lgl_bus_name": "DUKE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "TP7EK8DZV6N5"
 },
 "perf_inst": {
  "perf_inst_name": "Duke University",
  "perf_str_addr": "2200 W MAIN ST",
  "perf_city_name": "DURHAM",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "277054640",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "NC04",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7941",
   "pgm_ref_txt": "COMPUTER ARCHITECTURE"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 420000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goal of this project was to provide highly reliable computers at<br />low cost.&nbsp; The project studied both mechanisms for improving the<br />reliability of specific components, as well as studying how to<br />integrate these mechanisms into a holistic solution for a complete<br />processor.<br /><br />1) Mechanisms for Specific Components<br /><br />We developed a new, low-cost mechanism for detecting errors in<br />general-purpose processor cores.&nbsp; This scheme, called Nostradamus,<br />uses a small amount of hardware and power to detect when a fault<br />causes a processor core to operate incorrectly.<br /><br />We developed new, low-cost mechanisms for detecting errors in graphics<br />processors, including their cores and their memory systems.&nbsp; Graphics<br />processors, which did not used to need reliability, are now being used<br />for scientific computations and other purposes which require<br />reliability.<br /><br />We developed what is, to the best of our knowledge, the first<br />complete, low-cost scheme for detecting errors in the hardware that<br />performs floating point arithmetic in processors.<br /><br />In conjunction with colleagues in the area of information encoding, we<br />developed new schemes for extending the lifetime of memory<br />technologies that are write-limited (can only be written so many times<br />before failing).&nbsp; These technologies include the widely-used Flash<br />(e.g., in solid-state drives, smartphones, cameras, etc.), as well as<br />phase-change memory.<br /><br />2) A Holistic Implementation of a Reliable Processor<br /><br />We started with an open-source general-purpose processor core, and we<br />used it as the building block of a multicore processor that we<br />designed and implemented.&nbsp; We added a complete memory system,<br />including cache coherence, and we implemented this baseline processor<br />on a prototyping board with a field-programmable gate array (FPGA), a<br />chip that can be reconfigured to implement a desired design.&nbsp; We then<br />augmented this baseline processor with our mechanisms for detecting<br />errors and recovering from them when they are detected.&nbsp; The results<br />were very exciting, in that the processor could detect a large<br />majority of errors that we injected, and the costs of our fault<br />tolerance mechanisms were small.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/06/2015<br>\n\t\t\t\t\tModified by: Daniel&nbsp;Sorin</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goal of this project was to provide highly reliable computers at\nlow cost.  The project studied both mechanisms for improving the\nreliability of specific components, as well as studying how to\nintegrate these mechanisms into a holistic solution for a complete\nprocessor.\n\n1) Mechanisms for Specific Components\n\nWe developed a new, low-cost mechanism for detecting errors in\ngeneral-purpose processor cores.  This scheme, called Nostradamus,\nuses a small amount of hardware and power to detect when a fault\ncauses a processor core to operate incorrectly.\n\nWe developed new, low-cost mechanisms for detecting errors in graphics\nprocessors, including their cores and their memory systems.  Graphics\nprocessors, which did not used to need reliability, are now being used\nfor scientific computations and other purposes which require\nreliability.\n\nWe developed what is, to the best of our knowledge, the first\ncomplete, low-cost scheme for detecting errors in the hardware that\nperforms floating point arithmetic in processors.\n\nIn conjunction with colleagues in the area of information encoding, we\ndeveloped new schemes for extending the lifetime of memory\ntechnologies that are write-limited (can only be written so many times\nbefore failing).  These technologies include the widely-used Flash\n(e.g., in solid-state drives, smartphones, cameras, etc.), as well as\nphase-change memory.\n\n2) A Holistic Implementation of a Reliable Processor\n\nWe started with an open-source general-purpose processor core, and we\nused it as the building block of a multicore processor that we\ndesigned and implemented.  We added a complete memory system,\nincluding cache coherence, and we implemented this baseline processor\non a prototyping board with a field-programmable gate array (FPGA), a\nchip that can be reconfigured to implement a desired design.  We then\naugmented this baseline processor with our mechanisms for detecting\nerrors and recovering from them when they are detected.  The results\nwere very exciting, in that the processor could detect a large\nmajority of errors that we injected, and the costs of our fault\ntolerance mechanisms were small.\n\n\t\t\t\t\tLast Modified: 07/06/2015\n\n\t\t\t\t\tSubmitted by: Daniel Sorin"
 }
}