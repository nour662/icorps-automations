{
 "awd_id": "1116294",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: SHF: Small: Propagator-Based Computing, A Programming Foundation for Decentralized Systems",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2014-07-31",
 "tot_intn_awd_amt": 200000.0,
 "awd_amount": 200000.0,
 "awd_min_amd_letter_date": "2011-07-21",
 "awd_max_amd_letter_date": "2011-07-21",
 "awd_abstract_narration": "This project develops the Propagator Model, a concurrent decentralized\r\nframework designed to support computing in large, open, dynamic\r\nenvironments.  It provides powerful tools for organizing computations\r\nto operate effectively in a world of rapidly changing and globally\r\ninconsistent data by adopting a fundamental shift in viewpoint: the\r\nthings manipulated by basic computing elements are not fixed values.\r\nRather, they are information about values, and this information is\r\ncontinually refined as new information becomes available.\r\n\r\nThis project creates the architectural and linguistic foundations for\r\nsystems that can operate effectively in environments where there is no\r\ncentral management, and where one cannot rely on resources being\r\nconsistently available or consistently operating, and where the data is\r\nrapidly changing and globally inconsistent.  Using three mechanisms\r\nimplicit in the computational substrate: (1) constraint propagation,\r\n(2) partial information structures, and (3) dependencies, systems\r\nbuilt on the propagator model automatically have the ability to\r\nsupport their conclusions with arguments and report on the provenance\r\nof the ingredients.  They can automatically discover and use\r\nconsistent subsystems of inconsistent data.\r\n\r\nThis project erects a naturally concurrent and distributed model and\r\ninfrastructure for computation that makes it easier to build systems\r\nthat are reliable in the face of natural failures and deliberate\r\nattacks.  It provides support for auditable and accountable systems\r\nthat are robust and adaptable to novel applications.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Gerald",
   "pi_last_name": "Sussman",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Gerald J Sussman",
   "pi_email_addr": "gjs@mit.edu",
   "nsf_id": "000830860",
   "pi_start_date": "2011-07-21",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Harold",
   "pi_last_name": "Abelson",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Harold Abelson",
   "pi_email_addr": "HAL@MIT.EDU",
   "nsf_id": "000191572",
   "pi_start_date": "2011-07-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "77 MASSACHUSETTS AVE",
  "perf_city_name": "CAMBRIDGE",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394301",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 200000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Goal:<br />&nbsp;&nbsp;&nbsp; The aim of this project was to develop the Propagator Model, a<br />concurrent decentralized framework designed to support computing in<br />large, open, dynamic environments.&nbsp; It provides powerful tools for<br />organizing computations to operate effectively in a world of rapidly<br />changing and globally inconsistent data by adopting a fundamental<br />shift in viewpoint: the things manipulated by basic computing elements<br />are not fixed values.&nbsp; Rather, they are information about values, and<br />this information is continually refined as new information becomes<br />available.<br /><br />This project develops architectural and linguistic foundations for<br />systems that can operate effectively in environments where there is no<br />central management, and where one cannot rely on resources being<br />consistently available or consistently operated, and where the data is<br />rapidly changing and globally inconsistent.&nbsp; Using three mechanisms<br />implicit in the computational substrate: (1) constraint propagation,<br />(2) partial information structures, and (3) dependencies, systems<br />built on the propagator model automatically have the ability to<br />support their conclusions with arguments and report on the provenance<br />of the ingredients.&nbsp; They can automatically discover and use<br />consistent subsystems of inconsistent data.<br /><br />This project erects a naturally concurrent and distributed model and<br />infrastructure for computation that makes it easier to build systems<br />that are reliable in the face of natural failure and deliberate<br />attack.&nbsp; It provides support for auditable and accountable systems<br />that are robust and adaptable to novel applications.<br /><br /><br />Accomplishments:<br />&nbsp;&nbsp;&nbsp;&nbsp; Graduate student Micah Brodsky designed and built a prototype <br />Remote Procedure Call protocol.</p>\n<p>Micah Brodsky and P.I. Gerald Jay Sussman have employed Brodksy's<br /> RPC mechanism to extend our propagator system to allow multiple<br />independent propagator processes collaborate on solving a problem.&nbsp; <br />Using this mechanism we have made it possible for a propagator network<br />to be shared among multiple processes, so that each process is in charge <br />of updating cells and maintaining consistency in its own subnetwork.&nbsp;</p>\n<p>Brodsky and Sussman have implemented mechanisms for supporting<br />multiple agents that can access and query a shared propagator network.<br />Each agent has its own worldview: the set of premises believed or<br />tentatively assumend.&nbsp;&nbsp; So multiple agents can use the same<br />knowledge base, but have mutually inconsistent assumptions and<br />beliefs.&nbsp;&nbsp;&nbsp; An agent may employ this freedom to be&nbsp; \"of two minds\"<br /> about some subset of its beliefs.<br /><br />Distributed propagators have distributed state.&nbsp; We have made headway<br />along two different avenues into the problem of mutable state<br />management, a weak point for both pure functional languages and<br />propagators, and a bottleneck for distributed propagators.&nbsp; Micah<br />Brodsky and Pavel Panchekha (an undergraduate student) have invented a<br />novel mechanism for maintenance of distributed shared state that they<br />call a \"History Maintenance System,\" a generalization of the notion of<br />a transaction log.&nbsp; The idea is an extension of the well-known<br />operational transform technique used in version-control systems for<br />text documents.&nbsp; Their idea extends the work to arbitrary data and it<br />ensures eventual consistency, without deadlock, even in the face of<br />transient communication failures.&nbsp; They have demonstrated their idea<br />in the context of a simple shared file system.<br /><br />The propagator system's support for contingent facts and multiple<br />worldviews...",
  "por_txt_cntn": "\nGoal:\n    The aim of this project was to develop the Propagator Model, a\nconcurrent decentralized framework designed to support computing in\nlarge, open, dynamic environments.  It provides powerful tools for\norganizing computations to operate effectively in a world of rapidly\nchanging and globally inconsistent data by adopting a fundamental\nshift in viewpoint: the things manipulated by basic computing elements\nare not fixed values.  Rather, they are information about values, and\nthis information is continually refined as new information becomes\navailable.\n\nThis project develops architectural and linguistic foundations for\nsystems that can operate effectively in environments where there is no\ncentral management, and where one cannot rely on resources being\nconsistently available or consistently operated, and where the data is\nrapidly changing and globally inconsistent.  Using three mechanisms\nimplicit in the computational substrate: (1) constraint propagation,\n(2) partial information structures, and (3) dependencies, systems\nbuilt on the propagator model automatically have the ability to\nsupport their conclusions with arguments and report on the provenance\nof the ingredients.  They can automatically discover and use\nconsistent subsystems of inconsistent data.\n\nThis project erects a naturally concurrent and distributed model and\ninfrastructure for computation that makes it easier to build systems\nthat are reliable in the face of natural failure and deliberate\nattack.  It provides support for auditable and accountable systems\nthat are robust and adaptable to novel applications.\n\n\nAccomplishments:\n     Graduate student Micah Brodsky designed and built a prototype \nRemote Procedure Call protocol.\n\nMicah Brodsky and P.I. Gerald Jay Sussman have employed Brodksy's\n RPC mechanism to extend our propagator system to allow multiple\nindependent propagator processes collaborate on solving a problem.  \nUsing this mechanism we have made it possible for a propagator network\nto be shared among multiple processes, so that each process is in charge \nof updating cells and maintaining consistency in its own subnetwork. \n\nBrodsky and Sussman have implemented mechanisms for supporting\nmultiple agents that can access and query a shared propagator network.\nEach agent has its own worldview: the set of premises believed or\ntentatively assumend.   So multiple agents can use the same\nknowledge base, but have mutually inconsistent assumptions and\nbeliefs.    An agent may employ this freedom to be  \"of two minds\"\n about some subset of its beliefs.\n\nDistributed propagators have distributed state.  We have made headway\nalong two different avenues into the problem of mutable state\nmanagement, a weak point for both pure functional languages and\npropagators, and a bottleneck for distributed propagators.  Micah\nBrodsky and Pavel Panchekha (an undergraduate student) have invented a\nnovel mechanism for maintenance of distributed shared state that they\ncall a \"History Maintenance System,\" a generalization of the notion of\na transaction log.  The idea is an extension of the well-known\noperational transform technique used in version-control systems for\ntext documents.  Their idea extends the work to arbitrary data and it\nensures eventual consistency, without deadlock, even in the face of\ntransient communication failures.  They have demonstrated their idea\nin the context of a simple shared file system.\n\nThe propagator system's support for contingent facts and multiple\nworldviews allows logical mutation via worldview changes on natively\nimmutable or monotonic primitive data types.  So, based on new\ninformation, old values contingent on hypothetical assumptions can be\nkicked out and replaced with new values contingent on new, dynamically\ngenerated hypotheses.   Graduate student Ian Jacobi and Gerald Jay \nSussman have constructed a mechanism to integrate the control of \nprogram flow in a dynamic fashion, taking into account the need to \nsupport multiple world-views and a..."
 }
}