{
 "awd_id": "1116620",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: SMALL: Dependently-typed Haskell",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2016-08-31",
 "tot_intn_awd_amt": 496785.0,
 "awd_amount": 502785.0,
 "awd_min_amd_letter_date": "2011-07-18",
 "awd_max_amd_letter_date": "2012-04-16",
 "awd_abstract_narration": "The primary goal of this project is improve the stability of software\r\nsystems. Many modern programming languages use static type checking to\r\neliminate errors from programs. However, the type systems that\r\nunderlie these checkers are conservative and reject several classes of\r\nuseful, correct programs. In particular, the techniques of generic\r\nprogramming, which optimize data structures, generalize interfaces and\r\neliminate boilerplate in program development, are difficult to type\r\ncheck. Although dependent type systems provide flexibility in type\r\nchecking, particularly with respect to generic programming, they have\r\nnot yet been integrated into realistic programming languages.    \r\n\r\nThe proposed work of this project will augment a mature, general\r\npurpose, statically-typed programming language with support for\r\ndependently-typed programming. Specifically, the project will extend\r\nthe source and intermediate languages of the Glasgow Haskell Compiler\r\n(GHC). Although generic programming is the key application area, the\r\nHaskell extensions proposed here will enhance the capabilities of\r\ndependently-typed programming in Haskell in many domains. This project\r\nis in collaboration with the designers and implementers of the GHC\r\ncompiler at Microsoft Research, Cambridge. The team includes world\r\nleaders in the areas of dependent type systems, generic programming,\r\nlanguage design and implementation. As GHC is an open-source project,\r\nthe extensions to Haskell will be freely distributed. Furthermore, the\r\nproject will have educational benefits through the funding of doctoral students\r\nand the integration of its results into advanced graduate and\r\nundergraduate courses.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Stephanie",
   "pi_last_name": "Weirich",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Stephanie C Weirich",
   "pi_email_addr": "sweirich@cis.upenn.edu",
   "nsf_id": "000368211",
   "pi_start_date": "2011-07-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Pennsylvania",
  "inst_street_address": "3451 WALNUT ST STE 440A",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158987293",
  "inst_zip_code": "191046205",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE",
  "org_prnt_uei_num": "GM1XX56LEP58",
  "org_uei_num": "GM1XX56LEP58"
 },
 "perf_inst": {
  "perf_inst_name": "University of Pennsylvania",
  "perf_str_addr": "3451 WALNUT ST STE 440A",
  "perf_city_name": "PHILADELPHIA",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191046205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 496785.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 6000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The primary goal of this project was to improve the stability of software systems. Many modern programming languages use static type checking to eliminate errors from programs. However, the type systems that underlie these checkers are conservative and reject several classes of useful, correct programs. Dependent type systems provide flexibility in type checking, but are not available for industrial-strength programming languages.</p>\n<p><br />The work done in this project augmented a mature, general purpose,statically-typed programming language with support for dependently-typed programming. Specifically, the project modified the source and intermediate languages of the Glasgow Haskell Compiler (GHC) with multiple extensions to its type system. These extensions included datatype promotion, kind polymorphism, closed type families, injective type families, and kind equalities. Project members also developed and distributed the \"singletons\" library to work in conjunctions with these features.&nbsp;</p>\n<p>GHC is the primary compiler for the Haskell language, and the results of this work have been made freely available to Haskell developers with each release of the compiler. &nbsp;(This project was in collaboration with the designers and implementers of the GHC compiler at Microsoft Research,Cambridge.)</p>\n<p>Finally, this project has educational benefits through the funding of doctoral students and the integration of its results into advanced graduate and undergraduate courses.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/03/2016<br>\n\t\t\t\t\tModified by: Stephanie&nbsp;C&nbsp;Weirich</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe primary goal of this project was to improve the stability of software systems. Many modern programming languages use static type checking to eliminate errors from programs. However, the type systems that underlie these checkers are conservative and reject several classes of useful, correct programs. Dependent type systems provide flexibility in type checking, but are not available for industrial-strength programming languages.\n\n\nThe work done in this project augmented a mature, general purpose,statically-typed programming language with support for dependently-typed programming. Specifically, the project modified the source and intermediate languages of the Glasgow Haskell Compiler (GHC) with multiple extensions to its type system. These extensions included datatype promotion, kind polymorphism, closed type families, injective type families, and kind equalities. Project members also developed and distributed the \"singletons\" library to work in conjunctions with these features. \n\nGHC is the primary compiler for the Haskell language, and the results of this work have been made freely available to Haskell developers with each release of the compiler.  (This project was in collaboration with the designers and implementers of the GHC compiler at Microsoft Research,Cambridge.)\n\nFinally, this project has educational benefits through the funding of doctoral students and the integration of its results into advanced graduate and undergraduate courses.\n\n \n\n\t\t\t\t\tLast Modified: 10/03/2016\n\n\t\t\t\t\tSubmitted by: Stephanie C Weirich"
 }
}