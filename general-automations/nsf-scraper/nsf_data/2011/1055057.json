{
 "awd_id": "1055057",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Practical verification of outsourced computations",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2011-02-01",
 "awd_exp_date": "2017-01-31",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 450000.0,
 "awd_min_amd_letter_date": "2011-01-26",
 "awd_max_amd_letter_date": "2015-07-28",
 "awd_abstract_narration": "Many computing services are moving to the \"cloud\" because cloud\r\ncomputing offers economic and operational benefits. However, cloud\r\nservices not only are complex black boxes operated by third parties but\r\nalso refuse to give service guarantees. Thus, instead of trying to make\r\ncloud services more trustworthy (that is, giving customers reasons to\r\nplace faith in the cloud), this project explicitly removes trust from\r\nthe cloud: the project is building systems that give cloud customers\r\nguarantees, even under arbitrary service malfunctions. Two such systems\r\nconcern storage and function computation.\r\n\r\nUnder the storage system, the challenge is to use client-side\r\nverification to resist arbitrary or malicious cloud malfunctions (losing\r\ndata, returning stale data, corrupting data, compromising data, etc.).\r\nUnder the function computation system, a client specifies a computation\r\nto a server, the server executes it and returns the output and auxiliary\r\ninformation, and the client uses the auxiliary information to\r\nefficiently check whether the output is correct. The approach is to\r\nadapt, and translate into practice, a fascinating body of theory (on\r\nprobabilistically checkable and interactive proofs) that is currently\r\nthought to be impractical.\r\n\r\nWith qualitative advances in reliable yet practical computing, this\r\nproject will make cloud computing safer for existing customers and spur\r\nthe adoption of cloud services. This will mean more people paying less\r\nfor computing, producing beneficial effects throughout the computational\r\necosystem. The educational thrusts include teaching graduate students to\r\nteach (applying the K-12 student teaching model), graduate and\r\nundergraduate mentoring, curriculum development, and outreach to\r\nunderrepresented groups.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Walfish",
   "pi_mid_init": "H",
   "pi_sufx_name": "",
   "pi_full_name": "Michael H Walfish",
   "pi_email_addr": "mwalfish@gmail.com",
   "nsf_id": "000653725",
   "pi_start_date": "2011-01-26",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "110 INNER CAMPUS DR",
  "perf_city_name": "AUSTIN",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121139",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "1187",
   "pgm_ref_txt": "PECASE- eligible"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 91965.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 90540.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 92055.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 86960.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 88480.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo; min-height: 13.0px} span.s1 {font-variant-ligatures: no-common-ligatures} -->\n<p class=\"p1\"><span class=\"s1\">IMPACT AND INTELLECTUAL MERIT</span></p>\n<p class=\"p2\">This project has addressed a fundamental question in computer security: how can one computer be sure that another one has executed correctly?&nbsp; This question has broad relevance; applications include securing cloud computing, enabling trustworthy execution even when hardware is manufactured or operated by an untrusted entity, and enhancing confidence in distributed systems. We all want to use third-party computing resources, but we don't want to have to assume that they are computing correctly.</p>\n<p class=\"p2\">On the one hand, computer science theory had long offered solutions to this problem, based on spot checking a long proof of a correct execution. But on the other hand, the conventional wisdom prior to this project was that those solutions were far too demanding in computational resources to be the foundation of a practical application.</p>\n<p class=\"p2\">A principal outcome of this project has been a series of built systems that have challenged this wisdom. These systems, developed from 2011-2015 (named Pepper, Ginger, Zaatar, Allspice, Pantry, and Buffet), are based on theoretical refinements as well as applied techniques. They have demonstrated performance improvements of up to 20 orders of magnitude (a factor of 100 million trillion relative to the original theory), as well as tools to help programmers use this machinery.</p>\n<p class=\"p2\">Furthermore, these systems have sparked a research area at the intersection of systems, theoretical computer science, computer security, and cryptography; multiple leading groups now publish actively on this topic, and there are currently several startups based on \"practical probabilistic proofs.\"</p>\n<p class=\"p1\"><span class=\"s1\">This project has produced other outcomes as well, including making certain classes of electronic auctions verifiable, defending against untrusted peripherals, and, more recently, several privacy-preserving applications (including a version of Netflix in which the provider does not know which content is being consumed).</span></p>\n<p class=\"p1\">DISSEMINATION AND EDUCATION</p>\n<p class=\"p2\">The results of the project have been disseminated in competitive, peer-reviewed venues. In addition, the PI has written a survey on implementations of probabilistic proofs, and source code for the systems mentioned above is available online, by following pointers from <a href=\"http://pepper-project.org\" target=\"_blank\">http://pepper-project.org</a>.</p>\n<p class=\"p2\">The project has provided crucial research training to graduate students. The project has also funded participation of undergraduates: ten of the PI's publications, including many of the ones on this project, have undergraduate co-authors.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/04/2017<br>\n\t\t\t\t\tModified by: Michael&nbsp;Walfish</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIMPACT AND INTELLECTUAL MERIT\nThis project has addressed a fundamental question in computer security: how can one computer be sure that another one has executed correctly?  This question has broad relevance; applications include securing cloud computing, enabling trustworthy execution even when hardware is manufactured or operated by an untrusted entity, and enhancing confidence in distributed systems. We all want to use third-party computing resources, but we don't want to have to assume that they are computing correctly.\nOn the one hand, computer science theory had long offered solutions to this problem, based on spot checking a long proof of a correct execution. But on the other hand, the conventional wisdom prior to this project was that those solutions were far too demanding in computational resources to be the foundation of a practical application.\nA principal outcome of this project has been a series of built systems that have challenged this wisdom. These systems, developed from 2011-2015 (named Pepper, Ginger, Zaatar, Allspice, Pantry, and Buffet), are based on theoretical refinements as well as applied techniques. They have demonstrated performance improvements of up to 20 orders of magnitude (a factor of 100 million trillion relative to the original theory), as well as tools to help programmers use this machinery.\nFurthermore, these systems have sparked a research area at the intersection of systems, theoretical computer science, computer security, and cryptography; multiple leading groups now publish actively on this topic, and there are currently several startups based on \"practical probabilistic proofs.\"\nThis project has produced other outcomes as well, including making certain classes of electronic auctions verifiable, defending against untrusted peripherals, and, more recently, several privacy-preserving applications (including a version of Netflix in which the provider does not know which content is being consumed).\nDISSEMINATION AND EDUCATION\nThe results of the project have been disseminated in competitive, peer-reviewed venues. In addition, the PI has written a survey on implementations of probabilistic proofs, and source code for the systems mentioned above is available online, by following pointers from http://pepper-project.org.\nThe project has provided crucial research training to graduate students. The project has also funded participation of undergraduates: ten of the PI's publications, including many of the ones on this project, have undergraduate co-authors.\n\n\t\t\t\t\tLast Modified: 06/04/2017\n\n\t\t\t\t\tSubmitted by: Michael Walfish"
 }
}