{
 "awd_id": "1117590",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TC: Small: Homomorphic Encryption for Cloud Privacy",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032928950",
 "po_email": "rwachter@nsf.gov",
 "po_sign_block_name": "Ralph Wachter",
 "awd_eff_date": "2011-08-01",
 "awd_exp_date": "2014-07-31",
 "tot_intn_awd_amt": 312888.0,
 "awd_amount": 312888.0,
 "awd_min_amd_letter_date": "2011-07-23",
 "awd_max_amd_letter_date": "2011-07-23",
 "awd_abstract_narration": "This project applies tools from homomorphic encryption to improve security in cloud services. Cloud computing saves money for companies by allowing them to pay for services only if they need them and just at the time that such services are needed, rather than purchasing and maintaining hardware/software that may see little use. The drive to gain these savings may transform both business and personal computing.  This new level of resource sharing and complexity naturally generates new problems related to security and privacy, problems that are both novel and challenging.  \r\nIn the broadest sense, homomorphic encryption allows one to borrow computational power from an untrusted source. If made practical, this has especial implications for cloud computing. The software owner may employ homomorphic encryption in this setting to reduce the threat of reverse engineering and to administer software licenses. When made available over a untrusted cloud, the software is run homomorphically, data is submitted and returned in encrypted form, and the execution of instances is highly robust against malicious users. This project removes the uncertainties in the implementation efficiency of homomorphic encryption schemes and improves it to the point where it becomes practical for use in cloud computing. Specifically, the project centers on three modules: instruction set development for homomorphic computing, processor-specific optimizations for homomorphic schemes, and the investigation of new homomorphic schemes.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Berk",
   "pi_last_name": "Sunar",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Berk Sunar",
   "pi_email_addr": "sunar@wpi.edu",
   "nsf_id": "000434676",
   "pi_start_date": "2011-07-23",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "William",
   "pi_last_name": "Martin",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "William J Martin",
   "pi_email_addr": "martin@wpi.edu",
   "nsf_id": "000112623",
   "pi_start_date": "2011-07-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Worcester Polytechnic Institute",
  "inst_street_address": "100 INSTITUTE RD",
  "inst_street_address_2": "",
  "inst_city_name": "WORCESTER",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "5088315000",
  "inst_zip_code": "016092280",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "MA02",
  "org_lgl_bus_name": "WORCESTER POLYTECHNIC INSTITUTE",
  "org_prnt_uei_num": "",
  "org_uei_num": "HJNQME41NBU4"
 },
 "perf_inst": {
  "perf_inst_name": "Worcester Polytechnic Institute",
  "perf_str_addr": "100 INSTITUTE RD",
  "perf_city_name": "WORCESTER",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "016092280",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "MA02",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779500",
   "pgm_ele_name": "TRUSTWORTHY COMPUTING"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7795",
   "pgm_ref_txt": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 312888.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Fully homomorphic encryption (FHE) is one of the key technologies that will protect sensitive personal data stored on the cloud in the future. In a nutshell, FHE allows an untrusted party to compute functions directly over encrypted data thereby perfectly preserving the privacy of personal data. Such a powerful technology would, for example, allow companies such as Google to return search results to a user without any knowedge of the terms in the query! Unfortunately, for FHE to become practical, a substantial efficiency bottleneck first needs to be resolved. Addressing this efficiency bottleneck has been the primary aim of this project.&nbsp;</p>\n<p>During the course of this project we have developed new algorithms, clever optimizations to reduce cryptographic key sizes, and employed &nbsp;new computation platforms to bring the performance of FHE technologies closer to what would be acceptable by real-life applications.</p>\n<p>In our first effort, we have taken advantage of new platforms such as graphics processors (GPUs) commonly used for computer gaming. Such processors are commonly underutilized in server stations. By developing custom software for the Gentry Halevi FHE we have been able to gain 1-2 orders of speedup of FHE operations over common software implementations. This work not only took advantage of GPUs but also introduced many new optimizations such as taking advantage of special number representations and precomputations to achieve the cited speedup.</p>\n<p>In the next phase of the project, we developed a new class of FHE algorithms based on the NTRU cipher. To achieve this, we<span>&nbsp;have also tailored and implemented&nbsp;arithmetic operations in GPUs&nbsp;that handle very large degree polynomials. In this endeavor, we have observed similar speedups, i.e. 1-2 orders of magnitude, compared to comparable CPU implementations. By utilizing the NTRU-based library, we were able to evaluate the AES block cipher homomorphically more than 40 times faster than earlier implementations.</span></p>\n<p><span>Furthermore, with a clever specialization technique, we managed to reduce the public evaluation key sizes from several hundred gigabytes down to less than 64 Gigabytes, thereby allowing efficient homomorphic evaluation of complex circuits on common light clients (i.e. non-server platforms). In contrast, earlier FHE implementations required high-end expensive servers with huge memory resources.&nbsp;</span></p>\n<p>To assess the suitability of the somewhat homomorphic encryption techniques we developed for private information retrieval (PIR), we devised and implemented a batched PIR scheme. PIR is a standard building block for many cryptographic schemes, and informally it allows a client to retrieve data from a curated database without revealing &nbsp;to the server&nbsp;which data was retrieved. While the computational complexity is high, the bandwidth performance is significantly better than existing techniques.&nbsp;<span>With our PIR work, we demonstrated that, when carefully calibrated, FHE techniques can become as practical as and, in some respects&nbsp;(e.g. bandwidth), even more efficient than traditional multi-party computing techniques.&nbsp;</span></p>\n<p>Finally we went beyond CPU and GPU software optimizations and explored&nbsp;the power of custom hardware implemetations. We developed custom design blocks to support large integer arithmetic operations. This arithmetic core was then extended to form the <strong>first custom ASIC FHE design</strong> to provide a complete implementation of an FHE scheme. Synthesis results showed that it is possible to gain an additional 1-2 orders of speedup over software implementations.</p>\n<p>At the intellectual level, we determined that the bottleneck in FHE hardware implementations lies in the memory interface. This study further motivates the need for architectural innovations to support FHE evaluation and ...",
  "por_txt_cntn": "\nFully homomorphic encryption (FHE) is one of the key technologies that will protect sensitive personal data stored on the cloud in the future. In a nutshell, FHE allows an untrusted party to compute functions directly over encrypted data thereby perfectly preserving the privacy of personal data. Such a powerful technology would, for example, allow companies such as Google to return search results to a user without any knowedge of the terms in the query! Unfortunately, for FHE to become practical, a substantial efficiency bottleneck first needs to be resolved. Addressing this efficiency bottleneck has been the primary aim of this project. \n\nDuring the course of this project we have developed new algorithms, clever optimizations to reduce cryptographic key sizes, and employed  new computation platforms to bring the performance of FHE technologies closer to what would be acceptable by real-life applications.\n\nIn our first effort, we have taken advantage of new platforms such as graphics processors (GPUs) commonly used for computer gaming. Such processors are commonly underutilized in server stations. By developing custom software for the Gentry Halevi FHE we have been able to gain 1-2 orders of speedup of FHE operations over common software implementations. This work not only took advantage of GPUs but also introduced many new optimizations such as taking advantage of special number representations and precomputations to achieve the cited speedup.\n\nIn the next phase of the project, we developed a new class of FHE algorithms based on the NTRU cipher. To achieve this, we have also tailored and implemented arithmetic operations in GPUs that handle very large degree polynomials. In this endeavor, we have observed similar speedups, i.e. 1-2 orders of magnitude, compared to comparable CPU implementations. By utilizing the NTRU-based library, we were able to evaluate the AES block cipher homomorphically more than 40 times faster than earlier implementations.\n\nFurthermore, with a clever specialization technique, we managed to reduce the public evaluation key sizes from several hundred gigabytes down to less than 64 Gigabytes, thereby allowing efficient homomorphic evaluation of complex circuits on common light clients (i.e. non-server platforms). In contrast, earlier FHE implementations required high-end expensive servers with huge memory resources. \n\nTo assess the suitability of the somewhat homomorphic encryption techniques we developed for private information retrieval (PIR), we devised and implemented a batched PIR scheme. PIR is a standard building block for many cryptographic schemes, and informally it allows a client to retrieve data from a curated database without revealing  to the server which data was retrieved. While the computational complexity is high, the bandwidth performance is significantly better than existing techniques. With our PIR work, we demonstrated that, when carefully calibrated, FHE techniques can become as practical as and, in some respects (e.g. bandwidth), even more efficient than traditional multi-party computing techniques. \n\nFinally we went beyond CPU and GPU software optimizations and explored the power of custom hardware implemetations. We developed custom design blocks to support large integer arithmetic operations. This arithmetic core was then extended to form the first custom ASIC FHE design to provide a complete implementation of an FHE scheme. Synthesis results showed that it is possible to gain an additional 1-2 orders of speedup over software implementations.\n\nAt the intellectual level, we determined that the bottleneck in FHE hardware implementations lies in the memory interface. This study further motivates the need for architectural innovations to support FHE evaluation and explores gains that may be obtained using such innovations in custom ASIC hardware. A possible new direction to explore would be to consider specialized cores in multi-core systems where this special core is customized t..."
 }
}