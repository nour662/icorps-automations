{
 "awd_id": "1115808",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Collaborative Research: Improving Dependability of Multithreaded Distributed Programs",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2011-09-01",
 "awd_exp_date": "2015-08-31",
 "tot_intn_awd_amt": 225709.0,
 "awd_amount": 225709.0,
 "awd_min_amd_letter_date": "2011-08-06",
 "awd_max_amd_letter_date": "2011-08-06",
 "awd_abstract_narration": "Nearly all modern processors now contain multiple cores and almost all modern computer systems contain multiple processors. Thus future software is likely to be both multithreaded (in which threads of a process communicate using shared memory) and distributed (in which processes in a system communicate using messages). Ensuring that a program works correctly under all possible scenarios is a very dif&#64257;cult task. Most real-world programs contain a large number of components which makes their formal veri&#64257;cation infeasible. Effective tools for testing and debugging programs prior to their deployment are indispensable. Bugs persist even after extensive testing and debugging especially those that manifest under rare circumstances. Monitoring programs at runtime and possibly controlling their execution to avoid bad states is an important way to tolerate residual software bugs. \r\nIn this project, we are working on developing a theory and algorithms for monitoring, analyzing and controlling a multithreaded distributed computation. Specifically, we are developing (i) a unifying framework for modeling synchronization in multicore distributed systems resulting from messages, locks and other synchronization primitives (e.g., wait/notify), (ii) offline and online algorithms for detecting and controlling predicates, expressed as temporal logic formulas, using slicing and other approaches, and (iii) scalable approaches for tracking dependency among events.\r\nBesides multicore computing, the work has applications in a variety of other areas including cloud computing, distributed databases, recovery, replica consistency and resource management. We are also developing educational tools that can be used in courses to enhance the learning experience of students working with multicore distributed systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Vijay",
   "pi_last_name": "Garg",
   "pi_mid_init": "K",
   "pi_sufx_name": "",
   "pi_full_name": "Vijay K Garg",
   "pi_email_addr": "garg@ece.utexas.edu",
   "nsf_id": "000453995",
   "pi_start_date": "2011-08-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "110 INNER CAMPUS DR",
  "perf_city_name": "AUSTIN",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121139",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 225709.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\"><span class=\"s1\"><strong>Slicing Algorithms:</strong> A slice of a computation with respect to a property is the smallest sub-computation that includes all global states that satisfy the given property. Most of the current slicing algorithms work in an offline manner, i.e., they assume that all events are available a priori.&nbsp; This makes them unsuitable to use for real-time detection of faults, where it is important to detect a fault and take an appropriate corrective action in a timely manner to avoid disastrous consequences. We have developed efficient distributed online algorithms for computing slices. Our algorithms are suitable for testing distributed programs as well as runtime verification.</span></p>\n<p class=\"p1\"><span class=\"s1\"><strong>Concurrent Data Structures</strong>: A fundamental problem in any software system is to manage data in a way that allows application-specific operations to be performed on the data efficiently.&nbsp; In a multicore software system, the data may be shared among multiple threads and several threads may want to access and manipulate the data at the same time.&nbsp; One of the important data structures for storing ordered data is a binary search tree. A binary search tree supports three types of operations: search, insert or delete. It may be unbalanced or balanced. We have developed a suite of blocking and non-blocking (lock-free) algorithms for concurrent binary search trees that provide greater concurrency and better system throughput than existing concurrent algorithms.&nbsp;</span></p>\n<p class=\"p1\"><span class=\"s1\"><strong>Lattice enumeration algorithms</strong>: There are three important lattices associated with any computation. The lattice of consistent cut corresponds to the set of possible global states of a computation. The lattice of normal cuts is the smallest lattice that embed the computation.&nbsp; The lattice of maximal antichains captures all maximal sets of concurrent events and has applications in detection of global predicates because it is usually much smaller than the lattice of consistent cuts. We have developed efficient algorithms to enumerate all three lattices. Our&nbsp;</span>algorithms are simpler and have lower time and space complexity than existing algorithms. These algorithms have applications beyond concurrent computing.</p>\n<p class=\"p1\"><em><strong><span class=\"s1\">Intellectual Merit:</span></strong></em></p>\n<p class=\"p1\"><span class=\"s1\">We have developed and implemented efficient algorithms for slicing and analyzing partially ordered traces. Our algorithms are more time or space efficient than previously known algorithms.&nbsp; We have also developed several high-performance concurrent algorithms for fundamental data structures such as linked lists and binary search trees.</span></p>\n<p class=\"p2\"><span class=\"s1\">&nbsp;</span></p>\n<p class=\"p1\"><em><strong><span class=\"s1\">Broader Impact:</span></strong></em></p>\n<p class=\"p1\"><span class=\"s1\">Improving dependability of multithreaded program has a broad impact on the society because much of the high performance software is multithreaded.&nbsp; Three graduate students at the University of Texas at Austin and four graduate students at the University of Texas at Dallas have worked on various parts of the project and as a result have acquired important skills related to designing, writing and debugging concurrent programs.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/20/2015<br>\n\t\t\t\t\tModified by: Vijay&nbsp;K&nbsp;Garg</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "Slicing Algorithms: A slice of a computation with respect to a property is the smallest sub-computation that includes all global states that satisfy the given property. Most of the current slicing algorithms work in an offline manner, i.e., they assume that all events are available a priori.  This makes them unsuitable to use for real-time detection of faults, where it is important to detect a fault and take an appropriate corrective action in a timely manner to avoid disastrous consequences. We have developed efficient distributed online algorithms for computing slices. Our algorithms are suitable for testing distributed programs as well as runtime verification.\nConcurrent Data Structures: A fundamental problem in any software system is to manage data in a way that allows application-specific operations to be performed on the data efficiently.  In a multicore software system, the data may be shared among multiple threads and several threads may want to access and manipulate the data at the same time.  One of the important data structures for storing ordered data is a binary search tree. A binary search tree supports three types of operations: search, insert or delete. It may be unbalanced or balanced. We have developed a suite of blocking and non-blocking (lock-free) algorithms for concurrent binary search trees that provide greater concurrency and better system throughput than existing concurrent algorithms. \nLattice enumeration algorithms: There are three important lattices associated with any computation. The lattice of consistent cut corresponds to the set of possible global states of a computation. The lattice of normal cuts is the smallest lattice that embed the computation.  The lattice of maximal antichains captures all maximal sets of concurrent events and has applications in detection of global predicates because it is usually much smaller than the lattice of consistent cuts. We have developed efficient algorithms to enumerate all three lattices. Our algorithms are simpler and have lower time and space complexity than existing algorithms. These algorithms have applications beyond concurrent computing.\nIntellectual Merit:\nWe have developed and implemented efficient algorithms for slicing and analyzing partially ordered traces. Our algorithms are more time or space efficient than previously known algorithms.  We have also developed several high-performance concurrent algorithms for fundamental data structures such as linked lists and binary search trees.\n \nBroader Impact:\nImproving dependability of multithreaded program has a broad impact on the society because much of the high performance software is multithreaded.  Three graduate students at the University of Texas at Austin and four graduate students at the University of Texas at Dallas have worked on various parts of the project and as a result have acquired important skills related to designing, writing and debugging concurrent programs.\n\n \n\n\t\t\t\t\tLast Modified: 11/20/2015\n\n\t\t\t\t\tSubmitted by: Vijay K Garg"
 }
}