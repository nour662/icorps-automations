{
 "awd_id": "1115777",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AF: Algorithms and software for a new polyhedral polynomial system solver",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jack S. Snoeyink",
 "awd_eff_date": "2011-06-15",
 "awd_exp_date": "2015-05-31",
 "tot_intn_awd_amt": 300000.0,
 "awd_amount": 300000.0,
 "awd_min_amd_letter_date": "2011-05-25",
 "awd_max_amd_letter_date": "2011-05-25",
 "awd_abstract_narration": "Polyhedral methods to solve polynomial systems exploit the sparsity structure and give rise to hybrid symbolic-numeric algorithms for the computation of Puiseux series expansions of the solutions. The leading powers of the series are tropisms and are defined by the exact Newton polytopes of the system, while the coefficients of the series are solutions of initial form systems which may have coefficients of limited accuracy. The new algorithms will be implemented in the free open source software system PHCpack, with interfaces to computer algebra systems such as Macaulay 2 and Sage (linking the PHCpack library as a Python module). As almost all modern computers have multiple cores enabling to compute in parallel, we design our algorithms for speedup and quality, using the multiple cores to compensate for the cost of multiprecision arithmetic.\r\n\r\nSolving polynomial systems is a fundamental problem in mathematics with applications to various fields of science and engineering. Solvers that exploit the sparse structure provide better solutions faster. Algorithms and software produced by the proposed research will be disseminated through the users and developers community of Macaulay 2, a computer algebra system for research and teaching in algebraic geometry and commutative algebra. Implementations on parallel computers will enable the efficient solution of large computational problems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jan",
   "pi_last_name": "Verschelde",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jan Verschelde",
   "pi_email_addr": "janv@uic.edu",
   "nsf_id": "000326311",
   "pi_start_date": "2011-05-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Illinois at Chicago",
  "inst_street_address": "809 S MARSHFIELD AVE M/C 551",
  "inst_street_address_2": "",
  "inst_city_name": "CHICAGO",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "3129962862",
  "inst_zip_code": "606124305",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "IL07",
  "org_lgl_bus_name": "UNIVERSITY OF ILLINOIS",
  "org_prnt_uei_num": "",
  "org_uei_num": "W8XEAJDKMXH3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Illinois at Chicago",
  "perf_str_addr": "809 S MARSHFIELD AVE M/C 551",
  "perf_city_name": "CHICAGO",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "606124305",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "IL07",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7933",
   "pgm_ref_txt": "NUM, SYMBOL, & ALGEBRA COMPUT"
  },
  {
   "pgm_ref_code": "9218",
   "pgm_ref_txt": "BASIC RESEARCH & HUMAN RESORCS"
  },
  {
   "pgm_ref_code": "HPCC",
   "pgm_ref_txt": "HIGH PERFORMANCE COMPUTING & COMM"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 300000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Polynomial systems arise in many fields of science and engineering.&nbsp; The solutions of polynomial systems can be isolated points, or then can be positive dimensional solution sets, such as curves and surfaces.&nbsp; Whether a system has a solution set that is positive dimensional can be determined already from the structure of the exponents that occur in the system, by so-called polyhedral methods.&nbsp; On important benchmark problems such as the cyclic n-roots polynomial systems, jointly with Danko Adrovic, developed polyhedral methods to compute representations for the positive dimensional solution sets.</p>\n<p>When solving larger polynomial systems, the double precision as provided by standard hardware processor is no longer sufficient to compute the solutions accurately.&nbsp;&nbsp; For accurate solutions, we use double double and quad double precision as provided by the software libraries.&nbsp; To compensate for the cost overhead caused by the software driven arithmetic, we proposed to use a general purpose Graphics Processor Unit (GPU).&nbsp;&nbsp; Jointly with Genady Yoffe and Xiangcheng Yu, code was developed to accelerate Newton's method in double double and quad double arithmetic.&nbsp;&nbsp; Our results on some benchmark problems show that with GPU acceleration we can compensate for one level of extra precision.&nbsp; We achieve what can be called quality up: with GPU acceleration we can double the precision and still obtain results faster than the unaccelerated code in the standard hardware double precision.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/04/2015<br>\n\t\t\t\t\tModified by: Jan&nbsp;Verschelde</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nPolynomial systems arise in many fields of science and engineering.  The solutions of polynomial systems can be isolated points, or then can be positive dimensional solution sets, such as curves and surfaces.  Whether a system has a solution set that is positive dimensional can be determined already from the structure of the exponents that occur in the system, by so-called polyhedral methods.  On important benchmark problems such as the cyclic n-roots polynomial systems, jointly with Danko Adrovic, developed polyhedral methods to compute representations for the positive dimensional solution sets.\n\nWhen solving larger polynomial systems, the double precision as provided by standard hardware processor is no longer sufficient to compute the solutions accurately.   For accurate solutions, we use double double and quad double precision as provided by the software libraries.  To compensate for the cost overhead caused by the software driven arithmetic, we proposed to use a general purpose Graphics Processor Unit (GPU).   Jointly with Genady Yoffe and Xiangcheng Yu, code was developed to accelerate Newton's method in double double and quad double arithmetic.   Our results on some benchmark problems show that with GPU acceleration we can compensate for one level of extra precision.  We achieve what can be called quality up: with GPU acceleration we can double the precision and still obtain results faster than the unaccelerated code in the standard hardware double precision.\n\n \n\n\t\t\t\t\tLast Modified: 09/04/2015\n\n\t\t\t\t\tSubmitted by: Jan Verschelde"
 }
}