{
 "awd_id": "1117369",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Testing Large-Scale Database-Centric Applications",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2011-09-01",
 "awd_exp_date": "2016-08-31",
 "tot_intn_awd_amt": 497955.0,
 "awd_amount": 497955.0,
 "awd_min_amd_letter_date": "2011-09-08",
 "awd_max_amd_letter_date": "2011-09-08",
 "awd_abstract_narration": "Modern organizations such as social networking service providers, life-science research centers, or security agencies own an unprecedented amount of data. Such organizations want to analyze their data via software applications that are written against that data. Writing, testing, and debugging such data-intensive software applications is notoriously complex. This research develops novel techniques for dealing with this complexity. \r\n\r\nThe first objective of this research is to develop techniques that can automatically find a representative subset of an existing large-scale data set that allows the programmer to predict how the program will behave on the full data set. The intuition is that the resources needed for finding a representative data subset plus executing the program on that subset can be orders of magnitude lower than running the application on the full data set. The second research objective is to develop techniques that automatically check if a user program violates the correctness conditions imposed by data processing systems that offer a MapReduce-style programming interface.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Christoph",
   "pi_last_name": "Csallner",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Christoph Csallner",
   "pi_email_addr": "Csallner@uta.edu",
   "nsf_id": "000528419",
   "pi_start_date": "2011-09-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Leonidas",
   "pi_last_name": "Fegaras",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Leonidas Fegaras",
   "pi_email_addr": "fegaras@cse.uta.edu",
   "nsf_id": "000097684",
   "pi_start_date": "2011-09-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Chengkai",
   "pi_last_name": "Li",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Chengkai Li",
   "pi_email_addr": "cli@uta.edu",
   "nsf_id": "000084349",
   "pi_start_date": "2011-09-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Arlington",
  "inst_street_address": "701 S NEDDERMAN DR",
  "inst_street_address_2": "",
  "inst_city_name": "ARLINGTON",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "8172722105",
  "inst_zip_code": "760199800",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT ARLINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "LMLUKUPJJ9N3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Arlington",
  "perf_str_addr": "701 S NEDDERMAN DR",
  "perf_city_name": "ARLINGTON",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "760199800",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 497955.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The original project scope had two research objectives. The first objective was to develop techniques for finding bugs in and generating test cases for applications that interact with large databases. The second objective was to develop a technique for finding bugs in and generating test cases for large-scale data processing programs that follow the MapReduce paradigm. To evaluate the work, both research objectives were proposed to be implemented and evaluated on the same infrastructure, the dynamic symbolic execution engine Dsc for Java programs.</p>\n<p>Following are some of the key project results.</p>\n<p>(1) The team has observed that evaluating program analysis tools and techniques such as the proposed techniques for testing database-centric applications as well as the underlying dynamic symbolic execution system is hard. A key reason is that it is hard to obtain and install representative benchmark applications. To make progress on this problem, the team designed and implemented techniques to automatically generate large object-oriented applications. These techniques are implemented in the RugRat system. The implementation is distributed via the RugRat web site (https://sites.google.com/site/rugratproject/).</p>\n<p>(2) The second result is the first dynamic symbolic execution engine and test case generator for programs written in dataflow languages such as Pig / Hadoop MapReduce. These techniques are implemented in the SEDGE system. The SEDGE implementation is freely available as open source software (https://github.com/kaituo/sedge).</p>\n<p>(3) The third result are techniques for selecting test cases such that they achieve higher code coverage faster. These techniques are implemented in the CarFast system. The implementation is distributed via the CarFast web site (https://sites.google.com/site/carfastproject/).</p>\n<p>(4) The fourth result are dynamic residual analyses that identify which static analysis warnings most likely point to bugs. These techniques are implemented in the RFBI system.</p>\n<p>(5) The fifth result is GROPG, the first graphical debugger that can run on smart phones. The GROPG debugging technology developed as part of this project has influenced the subsequent TouchDevelop debugger of Microsoft Research (http://blogs.msdn.com/b/nikolait/archive/2013/07/10/debugging-touchdevelop-scripts.aspx).GROPG is widely available via the Google Play Store (https://play.google.com/store/apps/details?id=edu.uta.cse.gropg). The GROPG implementation is freely available as open source software (http://cseweb.uta.edu/~tuan/GROPG/).</p>\n<p>(6) The target applications of both project goals are often coded against interfaces, annotations, or both. The team has developed the first technique to extend dynamic symbolic execution to such programs. A prototype implementation of the technique is available in the team's Dsc tool (http://ranger.uta.edu/~csallner/dsc/).</p>\n<p>The research papers describing these results have been peer-reviewed and published in selective academic venues. Other researchers have cited these papers and built on this project's results.</p>\n<p>As originally proposed, much of the work has been carried out by graduate students. Some of these students are from underrepresented groups such as female students. For the work supported by this project the supervised students have received significant external recognition. Following are a few highlights.</p>\n<ul>\n<li>Shabnam Aboughadareh received the Best Paper Award at the international PPREW-4 workshop. From a total of 14 full paper submissions the program committee selected one paper for this award.</li>\n<li>Kaituo Li received an ACM SIGSOFT Distinguished Paper Award at the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2012). From a total of 108 full paper submissions the program committee selected three papers for this award.</li>\n<li>Tuan Anh Nguyen received an ACM SIGSOFT Distinguished Paper Award at the 30th IEEE/ACM International Conference on Automated Software Engineering (ASE 2015). From a total of 289 full paper submissions the program committee selected six papers for this award.</li>\n</ul><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/28/2016<br>\n\t\t\t\t\tModified by: Christoph&nbsp;Csallner</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe original project scope had two research objectives. The first objective was to develop techniques for finding bugs in and generating test cases for applications that interact with large databases. The second objective was to develop a technique for finding bugs in and generating test cases for large-scale data processing programs that follow the MapReduce paradigm. To evaluate the work, both research objectives were proposed to be implemented and evaluated on the same infrastructure, the dynamic symbolic execution engine Dsc for Java programs.\n\nFollowing are some of the key project results.\n\n(1) The team has observed that evaluating program analysis tools and techniques such as the proposed techniques for testing database-centric applications as well as the underlying dynamic symbolic execution system is hard. A key reason is that it is hard to obtain and install representative benchmark applications. To make progress on this problem, the team designed and implemented techniques to automatically generate large object-oriented applications. These techniques are implemented in the RugRat system. The implementation is distributed via the RugRat web site (https://sites.google.com/site/rugratproject/).\n\n(2) The second result is the first dynamic symbolic execution engine and test case generator for programs written in dataflow languages such as Pig / Hadoop MapReduce. These techniques are implemented in the SEDGE system. The SEDGE implementation is freely available as open source software (https://github.com/kaituo/sedge).\n\n(3) The third result are techniques for selecting test cases such that they achieve higher code coverage faster. These techniques are implemented in the CarFast system. The implementation is distributed via the CarFast web site (https://sites.google.com/site/carfastproject/).\n\n(4) The fourth result are dynamic residual analyses that identify which static analysis warnings most likely point to bugs. These techniques are implemented in the RFBI system.\n\n(5) The fifth result is GROPG, the first graphical debugger that can run on smart phones. The GROPG debugging technology developed as part of this project has influenced the subsequent TouchDevelop debugger of Microsoft Research (http://blogs.msdn.com/b/nikolait/archive/2013/07/10/debugging-touchdevelop-scripts.aspx).GROPG is widely available via the Google Play Store (https://play.google.com/store/apps/details?id=edu.uta.cse.gropg). The GROPG implementation is freely available as open source software (http://cseweb.uta.edu/~tuan/GROPG/).\n\n(6) The target applications of both project goals are often coded against interfaces, annotations, or both. The team has developed the first technique to extend dynamic symbolic execution to such programs. A prototype implementation of the technique is available in the team's Dsc tool (http://ranger.uta.edu/~csallner/dsc/).\n\nThe research papers describing these results have been peer-reviewed and published in selective academic venues. Other researchers have cited these papers and built on this project's results.\n\nAs originally proposed, much of the work has been carried out by graduate students. Some of these students are from underrepresented groups such as female students. For the work supported by this project the supervised students have received significant external recognition. Following are a few highlights.\n\nShabnam Aboughadareh received the Best Paper Award at the international PPREW-4 workshop. From a total of 14 full paper submissions the program committee selected one paper for this award.\nKaituo Li received an ACM SIGSOFT Distinguished Paper Award at the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2012). From a total of 108 full paper submissions the program committee selected three papers for this award.\nTuan Anh Nguyen received an ACM SIGSOFT Distinguished Paper Award at the 30th IEEE/ACM International Conference on Automated Software Engineering (ASE 2015). From a total of 289 full paper submissions the program committee selected six papers for this award.\n\n\n\t\t\t\t\tLast Modified: 11/28/2016\n\n\t\t\t\t\tSubmitted by: Christoph Csallner"
 }
}