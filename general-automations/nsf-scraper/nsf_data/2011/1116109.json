{
 "awd_id": "1116109",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR:Small:Parallelism and Concurrency in Scripting Languages",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Anita La Salle",
 "awd_eff_date": "2011-08-15",
 "awd_exp_date": "2014-07-31",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2011-08-08",
 "awd_max_amd_letter_date": "2011-08-08",
 "awd_abstract_narration": "The past decade has seen an explosion of interest in so-called \"dynamic\" or \"scripting\" programming languages, which emphasize programmer productivity at the possible expense of run-time performance.  Among other applications, scripting languages are central to much web-based and mobile computing.  With increasing use, and with the proliferation of multicore processors, there will be inevitable pressure to improve the performance of these languages through parallel execution.  Unfortunately, the state of the art in parallel scripting has not kept pace with parallel architecture developments.  While many scripting languages support asynchronous handling of events from the external world, programmer-centric features, like dynamic typing, make it very difficult for event handlers and the main program\r\n-- or multiple aspects of the main program -- to execute efficiently and simultaneously on separate cores of a modern processor.\r\n\r\nThe goal of this project is to build a detailed understanding of the tradeoffs between scripting language design and the performance of parallel execution.  This goal is accomplished through two main tasks: (1) minimizing the overhead necessary to safeguard the language implementation in the face of parallel execution, and (2) quantifying the marginal cost of different models of data sharing and memory consistency.  The bulk of the work takes place in the Ruby scripting language, widely used for Internet server development.  This approach will leverage recent developments in transactional memory, read-mostly synchronization, and high-performance data structures.\r\n\r\nThis project will contribute directly to the training of students at both the graduate and undergraduate level, and to curricula for courses at both the advanced and introductory level.  More broadly, effective support for parallelism in mainstream scripting languages can be expected to produce significant improvements in productivity across the full range of computer applications, in government, industry, science, the arts, and entertainment.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Scott",
   "pi_mid_init": "L",
   "pi_sufx_name": "",
   "pi_full_name": "Michael L Scott",
   "pi_email_addr": "scott@cs.rochester.edu",
   "nsf_id": "000343030",
   "pi_start_date": "2011-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Rochester",
  "inst_street_address": "910 GENESEE ST",
  "inst_street_address_2": "STE 200",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5852754031",
  "inst_zip_code": "146113847",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "UNIVERSITY OF ROCHESTER",
  "org_prnt_uei_num": "",
  "org_uei_num": "F27KDXZMF9Y8"
 },
 "perf_inst": {
  "perf_inst_name": "University of Rochester",
  "perf_str_addr": "910 GENESEE ST",
  "perf_city_name": "ROCHESTER",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146113847",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 250000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Modern computers solve problems quickly by arranging for multiple processors (\"cores\") to collaborate on the solution in parallel. &nbsp;Writing programs for these computers is hard, for many of the same reasons that it is hard to coordinate the activities of human beings collaborating in the physical world. &nbsp;The difficulty is exacerbated in computing by the fact that, until recently, programming languages for parallelism were designed for use only by experts, and only for the most complex and demanding problems. &nbsp;The emphasis has been on making the complex cases possible, not on making the simple cases easy.</p>\n<p><br />Work under this grant has taken important steps to improve this situation. &nbsp;It began with the assertion that parallel programs will be easier to write and understand if their behavior is <em>deterministic</em>&nbsp;-- if output depends only on input, and not on the detailed interleaving of the actions of the cores. &nbsp;Drawing on experience from multiple research groups, we were able to formally characterize the meaning of \"deterministic\" -- to show that there are multiple possible definitions, and to explain the impact of those definitions on ease of programming, debugging, and performance.</p>\n<p><br />Building on this formal foundation, we developed a deterministic parallel dialect of the widely used Ruby programming language. &nbsp;Ruby is representative of the \"scripting\" family of languages, in which ease of programming is of paramount performance, and parallelism has, historically, been particularly challenging. &nbsp;Using our language and implementation, we demonstrated that the \"simple case\" in parallel programming -- in essence, the identification of \"mutually independent\" subcomputations -- can indeed be easy to express. &nbsp;Moreover, independence, which is needed for correctness, can be verified automatically and efficiently. &nbsp;Experience with our Deterministic Parallel Ruby (DPR) suggests that it can be a powerful tool not only for commercial development, but for the teaching of parallel programming as well.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/14/2014<br>\n\t\t\t\t\tModified by: Michael&nbsp;L&nbsp;Scott</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2014/1116109/1116109_10119226_1413317392835_thread_models--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2014/1116109/1116109_10119226_1413317392835_thread_models--rgov-800width.jpg\" title=\"Models of Parallelism\"><img src=\"/por/images/Reports/POR/2014/1116109/1116109_10119226_1413317392835_thread_models--rgov-66x44.jpg\" alt=\"Models of Parallelism\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">In a message-passing program (a), behavior depends on the order of message receipt.  In a shared-memory program (b), it depends on the order of access to data.  With independent subcomputations (c), the relative order of operations in program branches has no impact on observable behavior.</div>\n<div class=\"imageCredit\">Michael L. Scott, University of Rochester</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Michael&nbsp;L&nbsp;Scott</div>\n<div class=\"imageTitle\">Models of Parallelism</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nModern computers solve problems quickly by arranging for multiple processors (\"cores\") to collaborate on the solution in parallel.  Writing programs for these computers is hard, for many of the same reasons that it is hard to coordinate the activities of human beings collaborating in the physical world.  The difficulty is exacerbated in computing by the fact that, until recently, programming languages for parallelism were designed for use only by experts, and only for the most complex and demanding problems.  The emphasis has been on making the complex cases possible, not on making the simple cases easy.\n\n\nWork under this grant has taken important steps to improve this situation.  It began with the assertion that parallel programs will be easier to write and understand if their behavior is deterministic -- if output depends only on input, and not on the detailed interleaving of the actions of the cores.  Drawing on experience from multiple research groups, we were able to formally characterize the meaning of \"deterministic\" -- to show that there are multiple possible definitions, and to explain the impact of those definitions on ease of programming, debugging, and performance.\n\n\nBuilding on this formal foundation, we developed a deterministic parallel dialect of the widely used Ruby programming language.  Ruby is representative of the \"scripting\" family of languages, in which ease of programming is of paramount performance, and parallelism has, historically, been particularly challenging.  Using our language and implementation, we demonstrated that the \"simple case\" in parallel programming -- in essence, the identification of \"mutually independent\" subcomputations -- can indeed be easy to express.  Moreover, independence, which is needed for correctness, can be verified automatically and efficiently.  Experience with our Deterministic Parallel Ruby (DPR) suggests that it can be a powerful tool not only for commercial development, but for the teaching of parallel programming as well.\n\n\t\t\t\t\tLast Modified: 10/14/2014\n\n\t\t\t\t\tSubmitted by: Michael L Scott"
 }
}