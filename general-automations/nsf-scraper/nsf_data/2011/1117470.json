{
 "awd_id": "1117470",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Accelerated ParalleX (APX) for Enhanced Scaling AMR based Science",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Anita La Salle",
 "awd_eff_date": "2011-09-01",
 "awd_exp_date": "2015-08-31",
 "tot_intn_awd_amt": 424911.0,
 "awd_amount": 424911.0,
 "awd_min_amd_letter_date": "2011-08-19",
 "awd_max_amd_letter_date": "2014-07-28",
 "awd_abstract_narration": "Intellectual Merit:\r\nThis project addresses scalability of applications on Exascale parallel computer architectures.  \r\n\r\nAmong the strategic challenges to scalability is identifying and exploiting new forms of parallelism as well as reducing overhead for effective fine grained parallelism execution. The project, \"Accelerated ParalleX (APX) for Enhanced Scaling\" project investigates combining a new model of computation with FPGA hardware support, in otherwise conventional multicore platforms, to realize significant gains in scalability. This approach is particularly applicable to the important class of adaptive mesh refinement based applications for colliding neutron stars and gamma ray bursts. \r\n\r\nPrior NSF funding supported the development of an experimental ParalleX prototype. That model is  employed in this new research project. This framework extracts inherent parallelism implicit in structure meta-data, eliminates most global barriers, and releases adaptive control to overlap multiple phases of computation and intermediate communication for latency hiding and circumvention of contention hot spots. \r\n\r\nThe research investigates the use of FPGA based hardware technology for accelerating system software to significantly reduce critical time path overhead in execution and directly enhance scalability. The experimental designs include synchronization atomics, thread scheduling and queues, and active message driven operations. In addition, for this class of science problems, higher precision floating-point arithmetic is becoming more important for such science questions as resolving the smallest possible black holes. FPGA technology will therefore accelerate multi-precision floating point arithmetic. \r\n\r\nThis research, if successful, will advance the specific science domain of numerical relativity and, more broadly, those science and engineering disciplines relying on both AMR and strong scaling. It will advance near-term computer system science through an innovative application of available FPGA technology to general computational science and long-term future scalable system design. The performance model derived for this purpose may prove valuable for extended preliminary exploratory investigation for establishing bounds and sensitivities in a complex multi-faceted trade-off space. \r\n\r\nBroader Impact: \r\nThe APX research results and resources will be applied to the distance-learning course distributed live to other national and international campuses to expand its content and extend its advanced topics section, in the short term, while motivating a new graduate level seminar course next year around its topic areas. Summer internships for under-represented undergraduate and high school students will be created at LSU and the Beowulf Bootcamp will be expanded for more high school students.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Hartmut",
   "pi_last_name": "Kaiser",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Hartmut Kaiser",
   "pi_email_addr": "hkaiser@cct.lsu.edu",
   "nsf_id": "000494113",
   "pi_start_date": "2011-08-19",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Thomas",
   "pi_last_name": "Sterling",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Thomas Sterling",
   "pi_email_addr": "tron@indiana.edu",
   "nsf_id": "000119080",
   "pi_start_date": "2011-08-19",
   "pi_end_date": "2014-07-28"
  }
 ],
 "inst": {
  "inst_name": "Louisiana State University",
  "inst_street_address": "202 HIMES HALL",
  "inst_street_address_2": "",
  "inst_city_name": "BATON ROUGE",
  "inst_state_code": "LA",
  "inst_state_name": "Louisiana",
  "inst_phone_num": "2255782760",
  "inst_zip_code": "708030001",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "LA06",
  "org_lgl_bus_name": "LOUISIANA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "ECQEYCHRNKJ4"
 },
 "perf_inst": {
  "perf_inst_name": "Louisiana State University",
  "perf_str_addr": "202 HIMES HALL",
  "perf_city_name": "BATON ROUGE",
  "perf_st_code": "LA",
  "perf_st_name": "Louisiana",
  "perf_zip_code": "708030001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "LA06",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  },
  {
   "pgm_ele_code": "915000",
   "pgm_ele_name": "EPSCoR Co-Funding"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 424911.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Novel approaches for the implementation of adaptive mesh refinement algorithms like those based on ParalleX are message driven, based on fine grained parallelism, global address space, and local control objects for fine grained synchronization. The software only implementation of the ParalleX execution model is HPX (High Performance ParalleX). HPX has shown promising results toward mitigating two of the major factors of performance degradation impeding the required strong scaling: it reduces starvation utilizing intrinsic load balancing and hides latencies by overlapping computation with communication. It provides substantial improvements for such problems and prepares them for exploitation of today&rsquo;s Peta&shy;flops systems. On the other hand, pure software based implementations of those novel techniques add overheads and increase hardware contention, as the required (software) functionality adds work to the critical execution path.</p>\n<p>The APX project has developed a set of well-focused customized hardware logic components based on Field Programmable Gate Arrays (FPGAs) targeted to reduce some of the overheads created by the pure software solution available with HPX. The project has tested the hypothesis, that the implementation of system management functionality in hardware, like queues, synchronization primitives, and fixed increased precision floating point units can reduce overheads and contention with the goal to finally remove the barrier for the creation of truly scalable AMR based application in the future. The main outcome of the project is that &ndash; while improvements in terms of reducing contention and improving scalability have been achieved &ndash; much more work in this domain is necessary to enable the expected break-through in real applications. Additional barrier to the adoption of FPGA-based solutions is reliance on industry-standard interconnects and protocols, such as PCI-Express. It is expected that much better results could be achieved by leveraging devices that place programmable logic in close proximity to the processor, such as Xilinx Zynq architecture, however, at the cost of portability.</p>\n<p>The project has created software wrapper modules allowing to optimally integrate the new hardware components into the existing HPX runtime system and the applications build on top of it. Like HPX, these software modules are written using C++, which allows to utilize well known C++ techniques optimizing the generated code at compile time for minimal execution time. These modules have allowed to combine high level abstractions of the implemented low-level hardware functionality for ease of use with optimized execution times of the generated code.</p>\n<p>As expected, the APX research project has had impact beyond the immediate intellectual contributions for broader effect in the educational arena. Several graduate and undergraduate students have worked as part of the team and have gained valuable experiences in the domain of hardware/software interaction in modern runtime systems. All developed code and hardware designs have been made available as open source.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/30/2015<br>\n\t\t\t\t\tModified by: Hartmut&nbsp;Kaiser</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nNovel approaches for the implementation of adaptive mesh refinement algorithms like those based on ParalleX are message driven, based on fine grained parallelism, global address space, and local control objects for fine grained synchronization. The software only implementation of the ParalleX execution model is HPX (High Performance ParalleX). HPX has shown promising results toward mitigating two of the major factors of performance degradation impeding the required strong scaling: it reduces starvation utilizing intrinsic load balancing and hides latencies by overlapping computation with communication. It provides substantial improvements for such problems and prepares them for exploitation of today\u00c6s Peta&shy;flops systems. On the other hand, pure software based implementations of those novel techniques add overheads and increase hardware contention, as the required (software) functionality adds work to the critical execution path.\n\nThe APX project has developed a set of well-focused customized hardware logic components based on Field Programmable Gate Arrays (FPGAs) targeted to reduce some of the overheads created by the pure software solution available with HPX. The project has tested the hypothesis, that the implementation of system management functionality in hardware, like queues, synchronization primitives, and fixed increased precision floating point units can reduce overheads and contention with the goal to finally remove the barrier for the creation of truly scalable AMR based application in the future. The main outcome of the project is that &ndash; while improvements in terms of reducing contention and improving scalability have been achieved &ndash; much more work in this domain is necessary to enable the expected break-through in real applications. Additional barrier to the adoption of FPGA-based solutions is reliance on industry-standard interconnects and protocols, such as PCI-Express. It is expected that much better results could be achieved by leveraging devices that place programmable logic in close proximity to the processor, such as Xilinx Zynq architecture, however, at the cost of portability.\n\nThe project has created software wrapper modules allowing to optimally integrate the new hardware components into the existing HPX runtime system and the applications build on top of it. Like HPX, these software modules are written using C++, which allows to utilize well known C++ techniques optimizing the generated code at compile time for minimal execution time. These modules have allowed to combine high level abstractions of the implemented low-level hardware functionality for ease of use with optimized execution times of the generated code.\n\nAs expected, the APX research project has had impact beyond the immediate intellectual contributions for broader effect in the educational arena. Several graduate and undergraduate students have worked as part of the team and have gained valuable experiences in the domain of hardware/software interaction in modern runtime systems. All developed code and hardware designs have been made available as open source.\n\n\t\t\t\t\tLast Modified: 11/30/2015\n\n\t\t\t\t\tSubmitted by: Hartmut Kaiser"
 }
}