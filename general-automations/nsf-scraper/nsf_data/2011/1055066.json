{
 "awd_id": "1055066",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER:  Cooperative Program Analysis:  Bridging the Gap Between User and Tool Reasoning",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2011-06-01",
 "awd_exp_date": "2018-05-31",
 "tot_intn_awd_amt": 459584.0,
 "awd_amount": 459584.0,
 "awd_min_amd_letter_date": "2010-12-14",
 "awd_max_amd_letter_date": "2015-07-31",
 "awd_abstract_narration": "While not perfect, the depth and breadth of what today's automated analysis tools can figure out about a program is truly remarkable.  Yet, despite the prevalence and cost of software defects and despite the wealth of information such automated tools could provide, program analyzers are largely ignored by today's software engineers.  This situation is not due to a lack of interest from software engineers or a lack of effort in deployment from analysis experts but rather a gap in the way a tool and its user reasons about the program, which results in, for example, a difficulty in providing analysis results understandable to the user.  This research confronts closing this user-tool reasoning gap.\r\n\r\nThe focus of the work is an effective approach to user-driven refinement of the analysis process.  Novel techniques for generating explanations of program analysis results will be created.  New approaches for trading off the exhaustiveness of compile-time verification and the simplicity of run-time checking will be developed.  Together with prior work on user-centric analysis specifications, this project lays the foundation for tomorrow's tools where users and tools cooperate to reason effectively about programs.  Significant potential impacts include the following: a change in the way software engineers view program analysis--replacing a magic box with a transparent reasoning assistant, improved software quality as a result of this change in view, and tools that engage students in algorithmic thinking in a hands-on manner.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Bor-Yuh Evan",
   "pi_last_name": "Chang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Bor-Yuh Evan Chang",
   "pi_email_addr": "evan.chang@colorado.edu",
   "nsf_id": "000512429",
   "pi_start_date": "2010-12-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Colorado at Boulder",
  "inst_street_address": "3100 MARINE ST",
  "inst_street_address_2": "STE 481 572 UCB",
  "inst_city_name": "Boulder",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "3034926221",
  "inst_zip_code": "803090001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "CO02",
  "org_lgl_bus_name": "THE REGENTS OF THE UNIVERSITY OF COLORADO",
  "org_prnt_uei_num": "",
  "org_uei_num": "SPVKK1RC2MZ3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Colorado at Boulder",
  "perf_str_addr": "3100 MARINE ST",
  "perf_city_name": "Boulder",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "803090001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "CO02",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "1187",
   "pgm_ref_txt": "PECASE- eligible"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9218",
   "pgm_ref_txt": "BASIC RESEARCH & HUMAN RESORCS"
  },
  {
   "pgm_ref_code": "HPCC",
   "pgm_ref_txt": "HIGH PERFORMANCE COMPUTING & COMM"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 89773.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 88964.0
  },
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 91239.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 93588.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 96020.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The long-term vision of this line of investigation is to empower every software developer with advanced program analysis tools. While they are not perfect, it is truly astonishing the breadth and depth of the kinds of properties that today's automated analysis and verification tools can figure out about a program. Program analysis helps programmers largely by informing sound transformation tools, such as compiler optimizers and refactoring engines. Yet, for applications where the client is directly a human user (e.g., bug finding, reasoning assistance), program analyzers are rarely in the toolbox of software developers today, despite the wealth of information they could provide. This situation is not due to lack of effort, but rather those who have taken analysis-based bug finders into the field cite specifically a difficulty in explaining analysis results.</p>\n<p>This project investigated fundamental principles to transform program analysis into technology that directly assists software developers. While this vision extends beyond this project, this project realized several essential building blocks.</p>\n<p>The most significant research thread funded by this grant has been developing a foundational framework for goal-directed program analysis. Traditionally, program analyzers, to a first approximation, work like magical black boxes that simply say, for example, whether a program verifies or is possibly buggy. This foundational framework for goal-directed program analysis enables user-centric applications like false alarm triage to targeted refinement of program analysis results. This work has generated a sequence of top-tier publications (11 in total), supported in part three PhD dissertations, multiple open source tools, and subsequently generated spin-off projects.</p>\n<p>With the advances made by this project, we have added attention to tools and techniques that surround the standard program analysis that derives facts about programs.&nbsp; In particular, we have taken a demand-driven approach focusing on automating the triage process after the core analysis.&nbsp; We have provided evidence that such an approach can scale by leveraging both a cheap, up-front analysis that first gives a global picture combined with a precise, triage analysis that is goal-directed. From a technical point of view, we have provided evidence that incorporating even coarse points-to information can significantly reduce the \"alias path explosion\" and \"calling context path explosion\" of backwards symbolic analysis.</p>\n<p>The open source tools developed from this project has provided a platform for undergraduates or graduate students that are interested in program analysis to engage via course projects or independent interactions.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/07/2019<br>\n\t\t\t\t\tModified by: Bor-Yuh Evan&nbsp;Chang</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2019/1055066/1055066_10065115_1549599928827_cooperative-program-analysis--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1055066/1055066_10065115_1549599928827_cooperative-program-analysis--rgov-800width.jpg\" title=\"Cooperative Program Analysis\"><img src=\"/por/images/Reports/POR/2019/1055066/1055066_10065115_1549599928827_cooperative-program-analysis--rgov-66x44.jpg\" alt=\"Cooperative Program Analysis\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">A illustration of cooperative program analysis with highlighted contributions.</div>\n<div class=\"imageCredit\">Bor-Yuh Evan Chang</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Bor-Yuh Evan&nbsp;Chang</div>\n<div class=\"imageTitle\">Cooperative Program Analysis</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nThe long-term vision of this line of investigation is to empower every software developer with advanced program analysis tools. While they are not perfect, it is truly astonishing the breadth and depth of the kinds of properties that today's automated analysis and verification tools can figure out about a program. Program analysis helps programmers largely by informing sound transformation tools, such as compiler optimizers and refactoring engines. Yet, for applications where the client is directly a human user (e.g., bug finding, reasoning assistance), program analyzers are rarely in the toolbox of software developers today, despite the wealth of information they could provide. This situation is not due to lack of effort, but rather those who have taken analysis-based bug finders into the field cite specifically a difficulty in explaining analysis results.\n\nThis project investigated fundamental principles to transform program analysis into technology that directly assists software developers. While this vision extends beyond this project, this project realized several essential building blocks.\n\nThe most significant research thread funded by this grant has been developing a foundational framework for goal-directed program analysis. Traditionally, program analyzers, to a first approximation, work like magical black boxes that simply say, for example, whether a program verifies or is possibly buggy. This foundational framework for goal-directed program analysis enables user-centric applications like false alarm triage to targeted refinement of program analysis results. This work has generated a sequence of top-tier publications (11 in total), supported in part three PhD dissertations, multiple open source tools, and subsequently generated spin-off projects.\n\nWith the advances made by this project, we have added attention to tools and techniques that surround the standard program analysis that derives facts about programs.  In particular, we have taken a demand-driven approach focusing on automating the triage process after the core analysis.  We have provided evidence that such an approach can scale by leveraging both a cheap, up-front analysis that first gives a global picture combined with a precise, triage analysis that is goal-directed. From a technical point of view, we have provided evidence that incorporating even coarse points-to information can significantly reduce the \"alias path explosion\" and \"calling context path explosion\" of backwards symbolic analysis.\n\nThe open source tools developed from this project has provided a platform for undergraduates or graduate students that are interested in program analysis to engage via course projects or independent interactions.\n\n\t\t\t\t\tLast Modified: 02/07/2019\n\n\t\t\t\t\tSubmitted by: Bor-Yuh Evan Chang"
 }
}