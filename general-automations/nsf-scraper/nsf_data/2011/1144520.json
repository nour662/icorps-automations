{
 "awd_id": "1144520",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER:  Programming the Crowd",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2012-01-01",
 "awd_exp_date": "2015-05-31",
 "tot_intn_awd_amt": 150000.0,
 "awd_amount": 180000.0,
 "awd_min_amd_letter_date": "2011-08-17",
 "awd_max_amd_letter_date": "2014-07-11",
 "awd_abstract_narration": "People can perform with ease many tasks that remain difficult or impossible for computers, including vision, motion planning, and natural language understanding. New \"crowdsourcing\" platforms like Amazon's Mechanical Turk make it easier than ever to harness human computational power by streamlining job posting, tracking, and payment for workers. However, the lack of automation means that crowdsourcing currently does not scale up. Low quality results must be filtered out, but checking human computations can be difficult. Economic incentives and anonymity expose crowdsourcing to fraud. Deciding how much to pay workers for particular tasks and how many workers to hire remains an art.\r\n\r\nThis project introduces crowdprogramming, an approach that fully integrates human and digital computation. In crowdprogramming, humans are modeled as function calls in a standard programming language. This approach lets programmers focus on programming logic, while the crowdprogramming runtime system manages the critical tradeoffs between cost, time, and data quality. Crowdprogramming will dramatically lower the barriers to harnessing human computational power. It will enable a rich new class of applications that divide labor between digital and human computations, where computers and humans do the work each does best. It will enable complex orchestration of human computations, automatically control quality to maintain high accuracy and avoid fraud, and schedule tasks and adjust payments to maximize speed while staying within budget. By streamlining the incorporation of human labor into computation, crowdprogramming has the potential to add an entirely new job sector to the economy.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Emery",
   "pi_last_name": "Berger",
   "pi_mid_init": "D",
   "pi_sufx_name": "",
   "pi_full_name": "Emery D Berger",
   "pi_email_addr": "emery@cs.umass.edu",
   "nsf_id": "000483414",
   "pi_start_date": "2011-08-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Massachusetts Amherst",
  "inst_street_address": "101 COMMONWEALTH AVE",
  "inst_street_address_2": "",
  "inst_city_name": "AMHERST",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "4135450698",
  "inst_zip_code": "010039252",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "MA02",
  "org_lgl_bus_name": "UNIVERSITY OF MASSACHUSETTS",
  "org_prnt_uei_num": "VGJHK59NMPK9",
  "org_uei_num": "VGJHK59NMPK9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Massachusetts Amherst",
  "perf_str_addr": "70 Butterfield Terrace",
  "perf_city_name": "Amherst",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "010039242",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "MA02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 150000.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 30000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Humans can easily perform many tasks that remain difficult or impossible for computers. For example, humans are far better than computers at performing tasks like vision, motion planning, and natural language understanding. Most researchers expect these tasks to remain beyond the reach of computers for the foreseeable future.</p>\n<p>This research explores an approach called <em>crowdprogramming</em> that makes it possible to write computer programs that integrate digital and human-based computation. In effect, crowdprogramming makes it possible to &ldquo;program with people.&rdquo; Crowdprogramming opens up the possibility for an entirely new class of computer applications, where computers and humans perform the work each does best. It can dramatically increase the scope and scale of computations available to ordinary programmers. By streamlining the incorporation of human labor into computation, crowdprogramming even has the potential to add a whole new class of jobs to the economy.</p>\n<p>We designed and implemented the first completely automatic crowdprogramming system, which we call <strong>AutoMan</strong>. AutoMan makes it easy to incorporate human-based computation directly into a standard programming language, and eliminates the barriers that make integrating human computation challenging.</p>\n<p>AutoMan leverages <em>crowdsourcing</em> systems that streamline the process of hiring humans to perform computational tasks. AutoMan uses the most popular of these systems, Amazon&rsquo;s Mechanical Turk, a web-based platform that matches employers with employees who perform &ldquo;human intelligence tasks.&rdquo;</p>\n<p>A programmer using AutoMan simply describes the task to be performed, which can be a multiple-choice question or a fill-in-the-blank form. Behind the scenes, AutoMan handles all of the details of performing human computation automatically.</p>\n<p>First, AutoMan posts tasks and manages workers by communicating with Mechanical Turk. It computes on-the-fly how much to pay each worker. If no workers show up to perform a task, AutoMan reasons that the pay must be too low and raises it. It's possible to prove mathematically that workers cannot game this system: it is always in their best interests to take a job whenever they are satisfied with the current rate of pay. Finally, AutoMan verifies the quality of each result by checking humans against each other. For each question, AutoMan recruits enough people to guarantee that when they agree on a result, it is highly unlikely it happened by random chance.</p>\n<p>We have used AutoMan to quickly build a number of new, sophisticated applications. One example is an automatic license-plate reading program. Because AutoMan makes it easy to use human labor in an application, a graduate student was able to write this program in less than a day. We fed it a range of difficult-to-read license plates. The program achieved over 90% accuracy. Each plate took under two minutes to process, and the average cost for each plate was just over ten cents.</p>\n<p>We have made the AutoMan system publicly available as an open source project at <a href=\"http://automan-lang.org\">http://automan-lang.org</a>. It runs on all standard computer platforms.</p>\n<div class=\"page\" title=\"Page 1\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p>Despite the numerous tasks that AutoMan&nbsp;makes simpler for programmers, it presents new challenges. Because it depends on a marketplace of human employees to do work, success with AutoMan&nbsp;depends on a programmer&rsquo;s ability to make their tasks sufficiently desirable to workers. Success also depends on the programmer writing clear instructions in English, which can be surprisingly tricky.</p>\n<p>To assist software developers using AutoMan, we have developed two tools: a debugger and a simulator. The AutoMan Interactive Debugger lets programmers visually monitor the performance of runnin...",
  "por_txt_cntn": "\nHumans can easily perform many tasks that remain difficult or impossible for computers. For example, humans are far better than computers at performing tasks like vision, motion planning, and natural language understanding. Most researchers expect these tasks to remain beyond the reach of computers for the foreseeable future.\n\nThis research explores an approach called crowdprogramming that makes it possible to write computer programs that integrate digital and human-based computation. In effect, crowdprogramming makes it possible to \"program with people.\" Crowdprogramming opens up the possibility for an entirely new class of computer applications, where computers and humans perform the work each does best. It can dramatically increase the scope and scale of computations available to ordinary programmers. By streamlining the incorporation of human labor into computation, crowdprogramming even has the potential to add a whole new class of jobs to the economy.\n\nWe designed and implemented the first completely automatic crowdprogramming system, which we call AutoMan. AutoMan makes it easy to incorporate human-based computation directly into a standard programming language, and eliminates the barriers that make integrating human computation challenging.\n\nAutoMan leverages crowdsourcing systems that streamline the process of hiring humans to perform computational tasks. AutoMan uses the most popular of these systems, Amazon\u00c6s Mechanical Turk, a web-based platform that matches employers with employees who perform \"human intelligence tasks.\"\n\nA programmer using AutoMan simply describes the task to be performed, which can be a multiple-choice question or a fill-in-the-blank form. Behind the scenes, AutoMan handles all of the details of performing human computation automatically.\n\nFirst, AutoMan posts tasks and manages workers by communicating with Mechanical Turk. It computes on-the-fly how much to pay each worker. If no workers show up to perform a task, AutoMan reasons that the pay must be too low and raises it. It's possible to prove mathematically that workers cannot game this system: it is always in their best interests to take a job whenever they are satisfied with the current rate of pay. Finally, AutoMan verifies the quality of each result by checking humans against each other. For each question, AutoMan recruits enough people to guarantee that when they agree on a result, it is highly unlikely it happened by random chance.\n\nWe have used AutoMan to quickly build a number of new, sophisticated applications. One example is an automatic license-plate reading program. Because AutoMan makes it easy to use human labor in an application, a graduate student was able to write this program in less than a day. We fed it a range of difficult-to-read license plates. The program achieved over 90% accuracy. Each plate took under two minutes to process, and the average cost for each plate was just over ten cents.\n\nWe have made the AutoMan system publicly available as an open source project at http://automan-lang.org. It runs on all standard computer platforms.\n\n\n\n\nDespite the numerous tasks that AutoMan makes simpler for programmers, it presents new challenges. Because it depends on a marketplace of human employees to do work, success with AutoMan depends on a programmer\u00c6s ability to make their tasks sufficiently desirable to workers. Success also depends on the programmer writing clear instructions in English, which can be surprisingly tricky.\n\nTo assist software developers using AutoMan, we have developed two tools: a debugger and a simulator. The AutoMan Interactive Debugger lets programmers visually monitor the performance of running tasks and understand how a task\u00c6s structure affects its performance. This debugger can greatly simplify the task of writing and debugging AutoMan programs. For example, the debugger can automatically reveal when a question is ambiguously worded by tracking when workers tend to disagree about responses. The de..."
 }
}