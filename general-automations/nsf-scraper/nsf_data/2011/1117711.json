{
 "awd_id": "1117711",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "TC: Small: Exploring Malware Detection on Mobile Platforms",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Deborah Shands",
 "awd_eff_date": "2011-09-01",
 "awd_exp_date": "2015-08-31",
 "tot_intn_awd_amt": 457740.0,
 "awd_amount": 457740.0,
 "awd_min_amd_letter_date": "2011-08-19",
 "awd_max_amd_letter_date": "2012-08-02",
 "awd_abstract_narration": "Mobile devices such as smartphones, netbooks and laptops are increasingly beginning to store vast amounts of personal information, such as email, friend lists, current location, and passwords to online banking websites. They are therefore swiftly becoming prized bounties for malicious entities. This project is investigating new techniques to detect malicious software on mobile devices. \r\n\r\nThis project is investigating three key thrusts (1) energy-aware malware detection, (2) malware detector protection using a new hardware architecture called Limited Local Memory, and (3) collaborative mobile malware detection in a social network environment. The first thrust develops a framework to quantitatively investigate how the energy-constrained nature of mobile devices impacts their ability to run malware detection tools. It is then using the framework to explore energy-aware malware detection. The second thrust explores how emerging multicore technology on smartphones can be usefully leveraged for security if each core is equipped with a small amount of private memory. The third trend explores how the convergence of smartphones and social networking can enable better malware detection.\r\n\r\nThe primary contribution of the project is in acknowledging the need for novel approaches for mobile malware detection. As we increasingly rely on our smartphones to support our daily activities, their security becomes paramount. The outcomes of the project are being disseminated to increase public awareness of mobile malware and anti-malware. In addition, course material related to the project will be incorporated into the Master's degree curriculum at Rutgers.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Liviu",
   "pi_last_name": "Iftode",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Liviu Iftode",
   "pi_email_addr": "iftode@cs.rutgers.edu",
   "nsf_id": "000189646",
   "pi_start_date": "2011-08-19",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Vinod",
   "pi_last_name": "Ganapathy",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Vinod Ganapathy",
   "pi_email_addr": "vinodganapathy@gmail.com",
   "nsf_id": "000502351",
   "pi_start_date": "2011-08-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rutgers University New Brunswick",
  "inst_street_address": "3 RUTGERS PLZ",
  "inst_street_address_2": "",
  "inst_city_name": "NEW BRUNSWICK",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "8489320150",
  "inst_zip_code": "089018559",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "RUTGERS, THE STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "M1LVPE5GLSD9"
 },
 "perf_inst": {
  "perf_inst_name": "Rutgers University New Brunswick",
  "perf_str_addr": "3 RUTGERS PLZ",
  "perf_city_name": "NEW BRUNSWICK",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "089018559",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "NJ12",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779500",
   "pgm_ele_name": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7795",
   "pgm_ref_txt": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 140945.0
  },
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 316795.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<p>We describe the four main technical contributions of this project:</p>\n<p>Over the past several years, there has been a vast increase in the number and heterogeneity of mobile devices available on the market. Internet access via mobile devices has exceeded internet access from traditional desktop computers. This progress has also attracted the attention of malware writers, who are beginning to write malicious software targeting mobile devices. This project focused on various aspects of mobile device and mobile app security.</p>\n<ol> </ol>\n<div></div>\n<p>(1) As most end-users of Android devices are aware, when apps are downloaded, the end-user is prompted to inspect a &ldquo;permissions&rdquo; screen and approve the permissions requested by the app. Several studies have shown that most end-users cannot clearly understand what these permissions mean, and this leads to overly permissive app sandboxes.</p>\n<div></div>\n<p>In one of our research thrusts, we developed a new method to help end-users better comprehend the significance of permissions requested by specific apps. Our main idea was to execute two versions of each app: one with a requested permission, and one without the same permission. We then study the execution of the app and observe behavioral differences. Any behavioral difference can be attributed to the suppressed permission. These differences can be presented to an end-user to help understand why the permission was requested by the app.</p>\n<div></div>\n<ol> </ol>\n<div></div>\n<p>(2) A second research thrust, related to mobile apps, involves detecting app plagiarism. There is now significant evidence that plagiarized mobile apps in third-party app marketplaces are a popular vehicle for malware delivery to mobile devices. In response the security community has been developing app plagiarism detection algorithms and tools. Many of these tools use syntactic similarity methods to detect plagiarized apps.</p>\n<div></div>\n<p>Our main contributions were (a) to show that syntactic similarity methods are easily defeated, and (b) to develop a more robust plagiarism detection algorithm. For (a), we used methods developed in the malware detection community in the mid-2000s to develop a cryptographic obfuscator that can defeat most existing and off-the-shelf plagiarism detectors. For (b), our main insight was that the interactions of the app with the underlying mobile platform (e.g., the Android or iOS API) are a reliable signature of its behavior, even if the app is obfuscated. Using this method, we developed a plagiarism detector that would detect app plagiarism even in the presence of obfuscated apps.</p>\n<p>(3) Our third research thrust was exploring novel hardware extensions to improve mobile device security. Hardware-based methods to improve security have the advantage of offering a small trusted-computing base upon which other security tools can be built. Off-the-shelf hardware may be unable to give us the security and isolation guarantees that we need, so we need to investigate new hardware. If the new hardware is sufficiently close in design to off-the-shelf hardware, we see greater chances of potential deployment&nbsp;</p>\n<div>We investigated whether the increasing number of computing cores on mobile devices could be leveraged to improve security. In particular, we demonstrated an architecture in which, assuming that one &ldquo;privileged&rdquo; compute core has access to a small &ldquo;local&rdquo; area of memory, we can build a computing environment that is fully isolated from the rest of the computing cores. We leveraged this computing environment to build a rootkit detector, i.e., a security tool that can detect whether the OS that executes on the mobile device is compromised. We have used this rootkit detector to successfully detect several rootkits available in the wild, while also ensuring that the rootkit detector itself does not becom...",
  "por_txt_cntn": "\n \n\nWe describe the four main technical contributions of this project:\n\nOver the past several years, there has been a vast increase in the number and heterogeneity of mobile devices available on the market. Internet access via mobile devices has exceeded internet access from traditional desktop computers. This progress has also attracted the attention of malware writers, who are beginning to write malicious software targeting mobile devices. This project focused on various aspects of mobile device and mobile app security.\n \n\n\n(1) As most end-users of Android devices are aware, when apps are downloaded, the end-user is prompted to inspect a \"permissions\" screen and approve the permissions requested by the app. Several studies have shown that most end-users cannot clearly understand what these permissions mean, and this leads to overly permissive app sandboxes.\n\n\nIn one of our research thrusts, we developed a new method to help end-users better comprehend the significance of permissions requested by specific apps. Our main idea was to execute two versions of each app: one with a requested permission, and one without the same permission. We then study the execution of the app and observe behavioral differences. Any behavioral difference can be attributed to the suppressed permission. These differences can be presented to an end-user to help understand why the permission was requested by the app.\n\n \n\n\n(2) A second research thrust, related to mobile apps, involves detecting app plagiarism. There is now significant evidence that plagiarized mobile apps in third-party app marketplaces are a popular vehicle for malware delivery to mobile devices. In response the security community has been developing app plagiarism detection algorithms and tools. Many of these tools use syntactic similarity methods to detect plagiarized apps.\n\n\nOur main contributions were (a) to show that syntactic similarity methods are easily defeated, and (b) to develop a more robust plagiarism detection algorithm. For (a), we used methods developed in the malware detection community in the mid-2000s to develop a cryptographic obfuscator that can defeat most existing and off-the-shelf plagiarism detectors. For (b), our main insight was that the interactions of the app with the underlying mobile platform (e.g., the Android or iOS API) are a reliable signature of its behavior, even if the app is obfuscated. Using this method, we developed a plagiarism detector that would detect app plagiarism even in the presence of obfuscated apps.\n\n(3) Our third research thrust was exploring novel hardware extensions to improve mobile device security. Hardware-based methods to improve security have the advantage of offering a small trusted-computing base upon which other security tools can be built. Off-the-shelf hardware may be unable to give us the security and isolation guarantees that we need, so we need to investigate new hardware. If the new hardware is sufficiently close in design to off-the-shelf hardware, we see greater chances of potential deployment \nWe investigated whether the increasing number of computing cores on mobile devices could be leveraged to improve security. In particular, we demonstrated an architecture in which, assuming that one \"privileged\" compute core has access to a small \"local\" area of memory, we can build a computing environment that is fully isolated from the rest of the computing cores. We leveraged this computing environment to build a rootkit detector, i.e., a security tool that can detect whether the OS that executes on the mobile device is compromised. We have used this rootkit detector to successfully detect several rootkits available in the wild, while also ensuring that the rootkit detector itself does not become the victim of infection. \n\n(4) Our fourth and final research thrust was exploring how to enforce polices to regulate device use in restricted spaces. Smart personal devices have become ubiquitous, and we increasingly rely on their..."
 }
}