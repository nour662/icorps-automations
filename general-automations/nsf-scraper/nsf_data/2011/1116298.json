{
 "awd_id": "1116298",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AF: Small: Parallel Global Optimization  Algorithms with Asynchrony, Adaptive Re-Planning, and Response Surfaces for Costly Simulations",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jack S. Snoeyink",
 "awd_eff_date": "2011-09-01",
 "awd_exp_date": "2016-08-31",
 "tot_intn_awd_amt": 499867.0,
 "awd_amount": 499867.0,
 "awd_min_amd_letter_date": "2011-08-24",
 "awd_max_amd_letter_date": "2011-08-24",
 "awd_abstract_narration": "Optimization can be used for designing lower cost or more efficient strategies and selecting model parameters so that models can accurately predict system behavior.  However, for computationally expensive simulation models, conventional optimization can require infeasibly long computation times (months or years)  The focus of this research is to develop a method (called POARS) to use parallel processors to find the global minimum of a function with relatively few simulations.  Examples of such computationally expensive simulation models are systems of nonlinear partial differential equations used to describe fluid flow and reactive chemistry transport that arise in many applications including groundwater and atmospheric modeling. Because such models can take hours or even days to complete a single simulation, it is important to have algorithms that find good optimal solutions with few simulations, which the proposed research achieves by integrating surrogate response surfaces into the optimization.  The algorithm will be applied to real models (based on field data) including a groundwater model (partial differential equations) and two watershed models (spatially distributed difference equations).  \r\n\r\nThe POARS algorithm incorporates multiple novel features including Ensembles, Asynchronous Parallelism with Adaptive Re-planning and the use of multiple optimization methods on the response surface, where many evaluations can be made cheaply.  The asynchronous aspect enables new simulations to start before simulations on other parallel processors are complete.   The response surface is based on an ensemble of response surfaces including mixture models based on Dempster-Schafer theory.  A proof of almost sure convergence of POARS will be given.  The research will couple the optimization method on M processes with parallel simulations each on N processes to efficiently use MN processors.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Christine",
   "pi_last_name": "Shoemaker",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Christine A Shoemaker",
   "pi_email_addr": "cas12@cornell.edu",
   "nsf_id": "000462125",
   "pi_start_date": "2011-08-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Cornell University",
  "inst_street_address": "341 PINE TREE RD",
  "inst_street_address_2": "",
  "inst_city_name": "ITHACA",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6072555014",
  "inst_zip_code": "148502820",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "NY19",
  "org_lgl_bus_name": "CORNELL UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "G56PUALJ3KT5"
 },
 "perf_inst": {
  "perf_inst_name": "Cornell University",
  "perf_str_addr": "341 PINE TREE RD",
  "perf_city_name": "ITHACA",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "148502820",
  "perf_ctry_code": "US",
  "perf_cong_dist": "19",
  "perf_st_cong_dist": "NY19",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7934",
   "pgm_ref_txt": "PARAL/DISTRIBUTED ALGORITHMS"
  },
  {
   "pgm_ref_code": "9218",
   "pgm_ref_txt": "BASIC RESEARCH & HUMAN RESORCS"
  },
  {
   "pgm_ref_code": "HPCC",
   "pgm_ref_txt": "HIGH PERFORMANCE COMPUTING & COMM"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 499867.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>It is the goal of this project to develop a highly efficient optimization method that can be used in conjunction with complex nonlinear computer simulation models.&nbsp; &nbsp;Many areas of science and engineering develop detailed computer &ldquo;simulation&rdquo; models that describe complex processes that are important in nature and in man&rsquo;s attempt to manage nature. &nbsp;For example the simulation models might describe the movement of a car on a curvy road or of Carbon Dioxide sequestered thousands of meters underground. These models can be used to make predictions or to help analyze the impact of a decision (like how wide to make a car or how much CO2 can safely be stored deep underground.) Let f(x) refer to (scalar) output of the simulation model and x (which can be a vector with many components) be the decisions being made.</p>\n<p>Optimization methods can enhance the usefulness of simulation models because optimization can be used to pick the best model parameters x to match historical data, which is expected to enhance the prediction capability of the model.&nbsp; Optimization can also enhance management or design decisions (also an example of x)&nbsp; by efficiently &nbsp;searching for the best solution by repeatedly selecting a possibly good decision x &nbsp;and then evaluating it with the model f(x) &nbsp;to find out which x is better.&nbsp; Optimization can do this much better and faster than doing it by trial and error. &nbsp;If the simulation model is expensive, (e.g. minutes to days per evaluation) using trial and error could take months or years to get a good answer.</p>\n<p>The approach in surrogate optimization is to build up a response surface approximation (called a surrogate) of the simulation output f(x) as a function of x based on all the previous evaluations of f(x). So as the &nbsp;algorithm does more evaluations,the surrogate approximations gets better. &nbsp; &nbsp;This also avoids the need for derivatives, which are difficult to obtain for simulation models.</p>\n<p>We &nbsp;have produced an open source toolbox &ldquo;pySOT&rdquo; for these algorithms. PySOT software has had 16,000 downloads in two years, giving support for its versatility and usefulness. A number of journal papers have documented the efficiency of these methods on a variety of problems and on serial and parallel computers in comparison to other methods. Mathematical convergence is shown.</p>\n<p>In this project we have done a number of applications with these new algorithms. One application was to use optimization to estimate the movement of a plume of carbon dioxide &nbsp;that has been injected deep underground into salt water (to keep it out of the atmosphere) given only a modest number of sampling points. . The goal is to know where the CO2 is going deep underground to avoid dangerous leaks.&nbsp; The algorithms were also used to estimate the amount of polluting phosphorous entering a reservoir that supplies New York City with drinking water to avoid algae growth, &nbsp;Asynchronous and synchronous parallel calculations were used to determing the best way to pump contaminanted water out of &nbsp;groundwater superfund site.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/28/2017<br>\n\t\t\t\t\tModified by: Christine&nbsp;A&nbsp;Shoemaker</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIt is the goal of this project to develop a highly efficient optimization method that can be used in conjunction with complex nonlinear computer simulation models.   Many areas of science and engineering develop detailed computer \"simulation\" models that describe complex processes that are important in nature and in man?s attempt to manage nature.  For example the simulation models might describe the movement of a car on a curvy road or of Carbon Dioxide sequestered thousands of meters underground. These models can be used to make predictions or to help analyze the impact of a decision (like how wide to make a car or how much CO2 can safely be stored deep underground.) Let f(x) refer to (scalar) output of the simulation model and x (which can be a vector with many components) be the decisions being made.\n\nOptimization methods can enhance the usefulness of simulation models because optimization can be used to pick the best model parameters x to match historical data, which is expected to enhance the prediction capability of the model.  Optimization can also enhance management or design decisions (also an example of x)  by efficiently  searching for the best solution by repeatedly selecting a possibly good decision x  and then evaluating it with the model f(x)  to find out which x is better.  Optimization can do this much better and faster than doing it by trial and error.  If the simulation model is expensive, (e.g. minutes to days per evaluation) using trial and error could take months or years to get a good answer.\n\nThe approach in surrogate optimization is to build up a response surface approximation (called a surrogate) of the simulation output f(x) as a function of x based on all the previous evaluations of f(x). So as the  algorithm does more evaluations,the surrogate approximations gets better.    This also avoids the need for derivatives, which are difficult to obtain for simulation models.\n\nWe  have produced an open source toolbox \"pySOT\" for these algorithms. PySOT software has had 16,000 downloads in two years, giving support for its versatility and usefulness. A number of journal papers have documented the efficiency of these methods on a variety of problems and on serial and parallel computers in comparison to other methods. Mathematical convergence is shown.\n\nIn this project we have done a number of applications with these new algorithms. One application was to use optimization to estimate the movement of a plume of carbon dioxide  that has been injected deep underground into salt water (to keep it out of the atmosphere) given only a modest number of sampling points. . The goal is to know where the CO2 is going deep underground to avoid dangerous leaks.  The algorithms were also used to estimate the amount of polluting phosphorous entering a reservoir that supplies New York City with drinking water to avoid algae growth,  Asynchronous and synchronous parallel calculations were used to determing the best way to pump contaminanted water out of  groundwater superfund site.\n\n \n\n\t\t\t\t\tLast Modified: 03/28/2017\n\n\t\t\t\t\tSubmitted by: Christine A Shoemaker"
 }
}