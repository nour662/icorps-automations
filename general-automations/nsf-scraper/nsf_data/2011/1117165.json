{
 "awd_id": "1117165",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Creating Efficient, Verifiably-Secure Computing Architectures Using Programming Language Techniques",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Tao Li",
 "awd_eff_date": "2011-10-01",
 "awd_exp_date": "2015-09-30",
 "tot_intn_awd_amt": 483997.0,
 "awd_amount": 495997.0,
 "awd_min_amd_letter_date": "2011-07-26",
 "awd_max_amd_letter_date": "2014-07-17",
 "awd_abstract_narration": "High-assurance systems are used in areas critical to human life and welfare, such as avionic, military, financial, and medical systems.  Because of the high cost of failure, e.g., financial disaster or loss of life, these systems have stringent requirements about both secrecy (guarantees that private information cannot be made public) and integrity (guarantees that un trusted information cannot corrupt trusted systems). In order to meet these requirements, the underlying computer hardware on which these systems are run must itself be verifiably secure using the same criteria. In addition, the hardware must also be efficient, able to run the systems with sufficiently high performance to be practical.\r\n\r\nThe goal of this research is to create computer hardware for high-assurance systems that is verifiably secure (that is, provably meets the requirements for secrecy and integrity) while remaining highly efficient. The unique approach taken is to leverage techniques from the programming languages community (e.g., advanced type systems) to create a new hardware description language called Caisson that enables hardware designers to quickly and easily create hardware systems that are provably secure by construction.  If a system is designed using Caisson, then it is necessarily secure. Caisson will be used to explore the space of secure hardware designs in order to develop systems that are efficient as well as secure. On a broad scale, the fruits of this research will be a large step towards a safer digital domain, safeguarding the integrity of our financial system, the privacy of our medical records, and the safety of our transportation infrastructure.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ben",
   "pi_last_name": "Hardekopf",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ben Hardekopf",
   "pi_email_addr": "benh@cs.ucsb.edu",
   "nsf_id": "000549385",
   "pi_start_date": "2011-07-26",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Frederic",
   "pi_last_name": "Chong",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Frederic T Chong",
   "pi_email_addr": "chong@cs.uchicago.edu",
   "nsf_id": "000375021",
   "pi_start_date": "2011-07-26",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Santa Barbara",
  "inst_street_address": "3227 CHEADLE HALL",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA BARBARA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8058934188",
  "inst_zip_code": "931060001",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "CA24",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SANTA BARBARA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G9QBQDH39DF4"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Santa Barbara",
  "perf_str_addr": "3227 CHEADLE HALL",
  "perf_city_name": "SANTA BARBARA",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "931060001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "24",
  "perf_st_cong_dist": "CA24",
  "perf_ctry_name": "",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779500",
   "pgm_ele_name": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7795",
   "pgm_ref_txt": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7941",
   "pgm_ref_txt": "COMPUTER ARCHITECTURE"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0111",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001112DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2011,
   "fund_oblg_amt": 483997.0
  },
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 12000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Computing architectures (desktops, mobile devices, embedded systems, etc) pervade our modern lives. Financial systems, medical records, national security infrastructure---all heavily utilize computing platforms, and the integrity of these critical systems is paramount. The goal of this project was to investigate techniques for creating secure computing architectures using techniques that are traditionally applied to programming languages.</p>\n<p>The project specifically targeted the underlying hardware that all of these systems rely on, i.e., the actual chips that run the software. The ongoing trend is to make increasingly complex hardware systems (which are thus difficult to reason about and make secure) while hiding this complexity behind a wall of abstraction. This project aimed to tame this complexity in order to make verifiably secure systems without compromising the ability to create practical, high-performance systems containing complex features and optimizations.</p>\n<p>The main outcomes of this project were two different hardware design languages (HDLs) that chip designers can use to create hardware systems that are verifiably secure. The first HDL, named Caisson, provides a guarantee that any hardware system designed using Caisson must necessarily be secure, i.e., it is impossible to create a non-secure hardware system using Caisson. Caisson has been formally proven to be correct and to provide the above guarantee. In practical terms, Caisson has been used to create reasonably complex hardware systems such as a modern-style CPU.</p>\n<p>While Caisson provides the needed guarantees, the cost of ensuring those guarantees can result in hardware systems that are not as efficient as they could be. The second HDL, named Sapper, addresses this concern by providing similar guarantees in a more flexible, efficient manner. Rather than guaranteeing at the outset that the hardware system must be secure, Sapper instead guarantees that if the resulting hardware system is about to do something insecure, it will instead take corrective action that may disrupt the functionality of the system but will do so in a provably secure fashion. In other words, Sapper waits until something insecure is about to happen and then prevents it, unlike Caisson which guarantees that insecure things can never happen. Sapper has also been formally proven to be correct and to provide the above guarantees, and it has been used to create complex hardware systems to demonstrate its practicality.</p>\n<p>The Caisson and Sapper HDLs are publically available, as are the implementations of those HDLs as used in this project and the various hardware systems designed using them.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/28/2015<br>\n\t\t\t\t\tModified by: Ben&nbsp;Hardekopf</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nComputing architectures (desktops, mobile devices, embedded systems, etc) pervade our modern lives. Financial systems, medical records, national security infrastructure---all heavily utilize computing platforms, and the integrity of these critical systems is paramount. The goal of this project was to investigate techniques for creating secure computing architectures using techniques that are traditionally applied to programming languages.\n\nThe project specifically targeted the underlying hardware that all of these systems rely on, i.e., the actual chips that run the software. The ongoing trend is to make increasingly complex hardware systems (which are thus difficult to reason about and make secure) while hiding this complexity behind a wall of abstraction. This project aimed to tame this complexity in order to make verifiably secure systems without compromising the ability to create practical, high-performance systems containing complex features and optimizations.\n\nThe main outcomes of this project were two different hardware design languages (HDLs) that chip designers can use to create hardware systems that are verifiably secure. The first HDL, named Caisson, provides a guarantee that any hardware system designed using Caisson must necessarily be secure, i.e., it is impossible to create a non-secure hardware system using Caisson. Caisson has been formally proven to be correct and to provide the above guarantee. In practical terms, Caisson has been used to create reasonably complex hardware systems such as a modern-style CPU.\n\nWhile Caisson provides the needed guarantees, the cost of ensuring those guarantees can result in hardware systems that are not as efficient as they could be. The second HDL, named Sapper, addresses this concern by providing similar guarantees in a more flexible, efficient manner. Rather than guaranteeing at the outset that the hardware system must be secure, Sapper instead guarantees that if the resulting hardware system is about to do something insecure, it will instead take corrective action that may disrupt the functionality of the system but will do so in a provably secure fashion. In other words, Sapper waits until something insecure is about to happen and then prevents it, unlike Caisson which guarantees that insecure things can never happen. Sapper has also been formally proven to be correct and to provide the above guarantees, and it has been used to create complex hardware systems to demonstrate its practicality.\n\nThe Caisson and Sapper HDLs are publically available, as are the implementations of those HDLs as used in this project and the various hardware systems designed using them.\n\n\t\t\t\t\tLast Modified: 12/28/2015\n\n\t\t\t\t\tSubmitted by: Ben Hardekopf"
 }
}